{"text": "François Chollet\nM A N N I N G\nDeep Learning with Python\nLicensed to <null>\nLicensed to <null>\nDeep Learning\nwith Python\nFRANÇOIS CHOLLET\nMANNING\nSHELTER ISLAND\nLicensed to <null>\nFor online information and ordering of this and other Manning books, please visit\nwww.manning.com. The publisher offers discounts on this book when ordered in quantity.\nFor more information, please contact\nSpecial Sales Department\nManning Publications Co.\n20 Baldwin Road\nPO Box 761\nShelter Island, NY 11964\nEmail: order"}
{"text": "s@manning.com\n©2018 by Manning Publications Co. All rights reserved.\nNo part of this publication may be reproduced, stored in a retrieval system, or transmitted, in\nany form or by means electronic, mechanical, photocopying, or otherwise, without prior written\npermission of the publisher.\nMany of the designations used by manufacturers and sellers to distinguish their products are\nclaimed as trademarks. Where those designations appear in the book, and Manning\nPublications was aware of a trademark "}
{"text": "claim, the designations have been printed in initial caps\nor all caps.\nRecognizing the importance of preserving what has been written, it is Manning’s policy to have\nthe books we publish printed on acid-free paper, and we exert our best efforts to that end.\nRecognizing also our responsibility to conserve the resources of our planet, Manning books\nare printed on paper that is at least 15 percent recycled and processed without the use of\nelemental chlorine.\nManning Publications Co. Development edi"}
{"text": "tor: Toni Arritola\n20 Baldwin Road Technical development editor: Jerry Gaines\nPO Box 761 Review editor: Aleksandar Dragosavljevi´c\nShelter Island, NY 11964 Project editor: Tiffany Taylor\nCopyeditor: Tiffany Taylor\nProofreader: Katie Tennant\nTechnical proofreaders: Alex Ott and Richard Tobias\nTypesetter: Dottie Marsico\nCover designer: Marija Tudor\nISBN 9781617294433\nPrinted in the United States of America\n1 2 3 4 5 6 7 8 9 10 – EBM – 22 21 20 19 18 17\nLicensed to <null>\nbrief contents\nPART 1 FUND"}
{"text": "AMENTALS OF DEEP LEARNING ..................................1\n1 ■ What is deep learning? 3\n2 ■ Before we begin: the mathematical building blocks of neural\nnetworks 25\n3 ■ Getting started with neural networks 56\n4 ■ Fundamentals of machine learning 93\nPART 2 DEEP LEARNING IN PRACTICE........................................117\n5 ■ Deep learning for computer vision 119\n6 ■ Deep learning for text and sequences 178\n7 ■ Advanced deep-learning best practices 233\n8 ■ Generative deep learning 269\n9 ■ Con"}
{"text": "clusions 314\nv\nLicensed to <null>\nLicensed to <null>\ncontents\npreface xiii\nacknowledgments xv\nabout this book xvi\nabout the author xx\nabout the cover xxi\nPART 1 FUNDAMENTALS OF DEEP LEARNING ...................1\n1 What is deep learning? 3\n1.1 Artificial intelligence, machine learning,\nand deep learning 4\nArtificial intelligence 4 ■ Machine learning 4 ■ Learning\nrepresentations from data 6 ■ The “deep” in deep learning 8\nUnderstanding how deep learning works, in three figures 9\nWhat deep learning"}
{"text": " has achieved so far 11 ■ Don’t believe\nthe short-term hype 12 ■ The promise of AI 13\n1.2 Before deep learning: a brief history of machine\nlearning 14\nProbabilistic modeling 14 ■ Early neural networks 14\nKernel methods 15 ■ Decision trees, random forests,\nand gradient boosting machines 16 ■ Back to neural\nnetworks 17 ■ What makes deep learning different 17\nThe modern machine-learning landscape 18\nvii\nLicensed to <null>\nviii CONTENTS\n1.3 Why deep learning? Why now? 20\nHardware 20 ■ Data 21 ■ Algo"}
{"text": "rithms 21 ■ A new\nwave of investment 22 ■ The democratization of deep\nlearning 23 ■ Will it last? 23\n2 Before we begin: the mathematical building blocks of\nneural networks 25\n2.1 A first look at a neural network 27\n2.2 Data representations for neural networks 31\nScalars (0D tensors) 31 ■ Vectors (1D tensors) 31\nMatrices (2D tensors) 31 ■ 3D tensors and higher-\ndimensional tensors 32 ■ Key attributes 32\nManipulating tensors in Numpy 34 ■ The notion\nof data batches 34 ■ Real-world examples of data"}
{"text": "\ntensors 35 ■ Vector data 35 ■ Timeseries data or\nsequence data 35 ■ Image data 36 ■ Video data 37\n2.3 The gears of neural networks: tensor operations 38\nElement-wise operations 38 ■ Broadcasting 39 ■ Tensor\ndot 40 ■ Tensor reshaping 42 ■ Geometric interpretation\nof tensor operations 43 ■ A geometric interpretation of deep\nlearning 44\n2.4 The engine of neural networks: gradient-based\noptimization 46\nWhat’s a derivative? 47 ■ Derivative of a tensor operation:\nthe gradient 48 ■ Stochastic gradient"}
{"text": " descent 48\nChaining derivatives: the Backpropagation algorithm 51\n2.5 Looking back at our first example 53\n2.6 Chapter summary 55\n3 Getting started with neural networks 56\n3.1 Anatomy of a neural network 58\nLayers: the building blocks of deep learning 58 ■ Models:\nnetworks of layers 59 ■ Loss functions and optimizers: keys\nto configuring the learning process 60\n3.2 Introduction to Keras 61\nKeras, TensorFlow, Theano, and CNTK 62 ■ Developing\nwith Keras: a quick overview 62\n3.3 Setting up a deep-"}
{"text": "learning workstation 65\nJupyter notebooks: the preferred way to run deep-learning\nexperiments 65 ■ Getting Keras running: two options 66\nLicensed to <null>\nCONTENTS ix\nRunning deep-learning jobs in the cloud: pros and cons 66\nWhat is the best GPU for deep learning? 66\n3.4 Classifying movie reviews: a binary classification\nexample 68\nThe IMDB dataset 68 ■ Preparing the data 69\nBuilding your network 70 ■ Validating your approach 73\nUsing a trained network to generate predictions on new\ndata 76 ■ F"}
{"text": "urther experiments 77 ■ Wrapping up 77\n3.5 Classifying newswires: a multiclass classification\nexample 78\nThe Reuters dataset 78 ■ Preparing the data 79\nBuilding your network 79 ■ Validating your approach 80\nGenerating predictions on new data 83 ■ A different way to\nhandle the labels and the loss 83 ■ The importance of\nhaving sufficiently large intermediate layers 83 ■ Further\nexperiments 84 ■ Wrapping up 84\n3.6 Predicting house prices: a regression example 85\nThe Boston Housing Price dataset 85 "}
{"text": "■ Preparing the\ndata 86 ■ Building your network 86 ■ Validating\nyour approach using K-fold validation 87 ■ Wrapping up 91\n3.7 Chapter summary 92\n4 Fundamentals of machine learning 93\n4.1 Four branches of machine learning 94\nSupervised learning 94 ■ Unsupervised learning 94\nSelf-supervised learning 94 ■ Reinforcement learning 95\n4.2 Evaluating machine-learning models 97\nTraining, validation, and test sets 97 ■ Things to\nkeep in mind 100\n4.3 Data preprocessing, feature engineering,\nand feature lea"}
{"text": "rning 101\nData preprocessing for neural networks 101 ■ Feature\nengineering 102\n4.4 Overfitting and underfitting 104\nReducing the network’s size 104 ■ Adding weight\nregularization 107 ■ Adding dropout 109\n4.5 The universal workflow of machine learning 111\nDefining the problem and assembling a dataset 111\nChoosing a measure of success 112 ■ Deciding on an\nLicensed to <null>\nx CONTENTS\nevaluation protocol 112 ■ Preparing your data 112\nDeveloping a model that does better than a baseline 113\nScaling "}
{"text": "up: developing a model that overfits 114\nRegularizing your model and tuning your hyperparameters 114\n4.6 Chapter summary 116\nPART 2 DEEP LEARNING IN PRACTICE.........................117\n5 Deep learning for computer vision 119\n5.1 Introduction to convnets 120\nThe convolution operation 122 ■ The max-pooling\noperation 127\n5.2 Training a convnet from scratch on a small dataset 130\nThe relevance of deep learning for small-data problems 130\nDownloading the data 131 ■ Building your network 133\nData pre"}
{"text": "processing 135 ■ Using data augmentation 138\n5.3 Using a pretrained convnet 143\nFeature extraction 143 ■ Fine-tuning 152 ■ Wrapping\nup 159\n5.4 Visualizing what convnets learn 160\nVisualizing intermediate activations 160 ■ Visualizing\nconvnet filters 167 ■ Visualizing heatmaps of class\nactivation 172\n5.5 Chapter summary 177\n6 Deep learning for text and sequences 178\n6.1 Working with text data 180\nOne-hot encoding of words and characters 181 ■ Using\nword embeddings 184 ■ Putting it all together: f"}
{"text": "rom raw\ntext to word embeddings 188 ■ Wrapping up 195\n6.2 Understanding recurrent neural networks 196\nA recurrent layer in Keras 198 ■ Understanding the\nLSTM and GRU layers 202 ■ A concrete LSTM example\nin Keras 204 ■ Wrapping up 206\n6.3 Advanced use of recurrent neural networks 207\nA temperature-forecasting problem 207 ■ Preparing the\ndata 210 ■ A common-sense, non-machine-learning\nbaseline 212 ■ A basic machine-learning approach 213\nA first recurrent baseline 215 ■ Using recurrent dropout\nLice"}
{"text": "nsed to <null>\nCONTENTS xi\nto fight overfitting 216 ■ Stacking recurrent layers 217\nUsing bidirectional RNNs 219 ■ Going even further 222\nWrapping up 223\n6.4 Sequence processing with convnets 225\nUnderstanding 1D convolution for sequence data 225\n1D pooling for sequence data 226 ■ Implementing a 1D\nconvnet 226 ■ Combining CNNs and RNNs to process long\nsequences 228 ■ Wrapping up 231\n6.5 Chapter summary 232\n7 Advanced deep-learning best practices 233\n7.1 Going beyond the Sequential model: the Ker"}
{"text": "as\nfunctional API 234\nIntroduction to the functional API 236 ■ Multi-input\nmodels 238 ■ Multi-output models 240 ■ Directed acyclic\ngraphs of layers 242 ■ Layer weight sharing 246 ■ Models\nas layers 247 ■ Wrapping up 248\n7.2 Inspecting and monitoring deep-learning models using\nKeras callbacks and TensorBoard 249\nUsing callbacks to act on a model during training 249\nIntroduction to TensorBoard: the TensorFlow visualization\nframework 252 ■ Wrapping up 259\n7.3 Getting the most out of your models 260"}
{"text": "\nAdvanced architecture patterns 260 ■ Hyperparameter\noptimization 263 ■ Model ensembling 264 ■ Wrapping\nup 266\n7.4 Chapter summary 268\n8 Generative deep learning 269\n8.1 Text generation with LSTM 271\nA brief history of generative recurrent networks 271 ■ How\ndo you generate sequence data? 272 ■ The importance of\nthe sampling strategy 272 ■ Implementing character-level\nLSTM text generation 274 ■ Wrapping up 279\n8.2 DeepDream 280\nImplementing DeepDream in Keras 281 ■ Wrapping up 286\n8.3 Neural sty"}
{"text": "le transfer 287\nThe content loss 288 ■ The style loss 288 ■ Neural style\ntransfer in Keras 289 ■ Wrapping up 295\nLicensed to <null>\nxii CONTENTS\n8.4 Generating images with variational autoencoders 296\nSampling from latent spaces of images 296 ■ Concept vectors\nfor image editing 297 ■ Variational autoencoders 298\nWrapping up 304\n8.5 Introduction to generative adversarial networks 305\nA schematic GAN implementation 307 ■ A bag of tricks 307\nThe generator 308 ■ The discriminator 309 ■ The adversari"}
{"text": "al\nnetwork 310 ■ How to train your DCGAN 310 ■ Wrapping\nup 312\n8.6 Chapter summary 313\n9 Conclusions 314\n9.1 Key concepts in review 315\nVarious approaches to AI 315 ■ What makes deep learning\nspecial within the field of machine learning 315 ■ How to\nthink about deep learning 316 ■ Key enabling technologies 317\nThe universal machine-learning workflow 318 ■ Key network\narchitectures 319 ■ The space of possibilities 322\n9.2 The limitations of deep learning 325\nThe risk of anthropomorphizing machine"}
{"text": "-learning models 325\nLocal generalization vs. extreme generalization 327\nWrapping up 329\n9.3 The future of deep learning 330\nModels as programs 330 ■ Beyond backpropagation and\ndifferentiable layers 332 ■ Automated machine learning 332\nLifelong learning and modular subroutine reuse 333\nThe long-term vision 335\n9.4 Staying up to date in a fast-moving field 337\nPractice on real-world problems using Kaggle 337\nRead about the latest developments on arXiv 337\nExplore the Keras ecosystem 338\n9.5 Final"}
{"text": " words 339\nappendix A Installing Keras and its dependencies on Ubuntu 340\nappendix B Running Jupyter notebooks on an EC2 GPU instance 345\nindex 353\nLicensed to <null>\npreface\nIf you’ve picked up this book, you’re probably aware of the extraordinary progress\nthat deep learning has represented for the field of artificial intelligence in the recent\npast. In a mere five years, we’ve gone from near-unusable image recognition and\nspeech transcription, to superhuman performance on these tasks.\nThe cons"}
{"text": "equences of this sudden progress extend to almost every industry. But in\norder to begin deploying deep-learning technology to every problem that it could\nsolve, we need to make it accessible to as many people as possible, including non-\nexperts—people who aren’t researchers or graduate students. For deep learning to\nreach its full potential, we need to radically democratize it.\nWhen I released the first version of the Keras deep-learning framework in March\n2015, the democratization of AI wasn’t "}
{"text": "what I had in mind. I had been doing research\nin machine learning for several years, and had built Keras to help me with my own\nexperiments. But throughout 2015 and 2016, tens of thousands of new people\nentered the field of deep learning; many of them picked up Keras because it was—and\nstill is—the easiest framework to get started with. As I watched scores of newcomers\nuse Keras in unexpected, powerful ways, I came to care deeply about the accessibility\nand democratization of AI. I realized that"}
{"text": " the further we spread these technologies,\nthe more useful and valuable they become. Accessibility quickly became an explicit\ngoal in the development of Keras, and over a few short years, the Keras developer\ncommunity has made fantastic achievements on this front. We’ve put deep learning\ninto the hands of tens of thousands of people, who in turn are using it to solve import-\nant problems we didn’t even know existed until recently.\nThe book you’re holding is another step on the way to making deep"}
{"text": " learning avail-\nable to as many people as possible. Keras had always needed a companion course to\nxiii\nLicensed to <null>\nxiv PREFACE\nsimultaneously cover fundamentals of deep learning, Keras usage patterns, and deep-\nlearning best practices. This book is my best effort to produce such a course. I wrote it\nwith a focus on making the concepts behind deep learning, and their implementa-\ntion, as approachable as possible. Doing so didn’t require me to dumb down any-\nthing—I strongly believe that t"}
{"text": "here are no difficult ideas in deep learning. I hope\nyou’ll find this book valuable and that it will enable you to begin building intelligent\napplications and solve the problems that matter to you.\nLicensed to <null>\nacknowledgments\nI’d like to thank the Keras community for making this book possible. Keras has grown\nto have hundreds of open source contributors and more than 200,000 users. Your con-\ntributions and feedback have turned Keras into what it is today.\nI’d also like to thank Google for"}
{"text": " backing the Keras project. It has been fantastic to\nsee Keras adopted as TensorFlow’s high-level API. A smooth integration between Keras\nand TensorFlow greatly benefits both TensorFlow users and Keras users and makes\ndeep learning accessible to most.\nI want to thank the people at Manning who made this book possible: publisher\nMarjan Bace and everyone on the editorial and production teams, including Christina\nTaylor, Janet Vail, Tiffany Taylor, Katie Tennant, Dottie Marsico, and many others who\n"}
{"text": "worked behind the scenes.\nMany thanks go to the technical peer reviewers led by Aleksandar Dragosavljevic´—\nDiego Acuña Rozas, Geoff Barto, David Blumenthal-Barby, Abel Brown, Clark Dor-\nman, Clark Gaylord, Thomas Heiman, Wilson Mar, Sumit Pal, Vladimir Pasman, Gus-\ntavo Patino, Peter Rabinovitch, Alvin Raj, Claudio Rodriguez, Srdjan Santic, Richard\nTobias, Martin Verzilli, William E. Wheeler, and Daniel Williams—and the forum con-\ntributors. Their contributions included catching technical mista"}
{"text": "kes, errors in termi-\nnology, and typos, and making topic suggestions. Each pass through the review\nprocess and each piece of feedback implemented through the forum topics shaped\nand molded the manuscript.\nOn the technical side, special thanks go to Jerry Gaines, who served as the book’s\ntechnical editor; and Alex Ott and Richard Tobias, who served as the book’s technical\nproofreaders. They’re the best technical editors I could have hoped for.\nFinally, I’d like to express my gratitude to my wife"}
{"text": " Maria for being extremely\nsupportive throughout the development of Keras and the writing of this book.\nxv\nLicensed to <null>\nabout this book\nThis book was written for anyone who wishes to explore deep learning from scratch or\nbroaden their understanding of deep learning. Whether you’re a practicing machine-learn-\ning engineer, a software developer, or a college student, you’ll find value in these pages.\nThis book offers a practical, hands-on exploration of deep learning. It avoids math-\nematica"}
{"text": "l notation, preferring instead to explain quantitative concepts via code snip-\npets and to build practical intuition about the core ideas of machine learning and\ndeep learning.\nYou’ll learn from more than 30 code examples that include detailed commentary,\npractical recommendations, and simple high-level explanations of everything you\nneed to know to start using deep learning to solve concrete problems.\nThe code examples use the Python deep-learning framework Keras, with Tensor-\nFlow as a backend"}
{"text": " engine. Keras, one of the most popular and fastest-growing deep-\nlearning frameworks, is widely recommended as the best tool to get started with deep\nlearning.\nAfter reading this book, you’ll have a solid understand of what deep learning is,\nwhen it’s applicable, and what its limitations are. You’ll be familiar with the standard\nworkflow for approaching and solving machine-learning problems, and you’ll know\nhow to address commonly encountered issues. You’ll be able to use Keras to tackle\nreal-w"}
{"text": "orld problems ranging from computer vision to natural-language processing:\nimage classification, timeseries forecasting, sentiment analysis, image and text genera-\ntion, and more.\nxvi\nLicensed to <null>\nABOUT THIS BOOK xvii\nWho should read this book\nThis book is written for people with Python programming experience who want to get\nstarted with machine learning and deep learning. But this book can also be valuable\nto many different types of readers:\n If you’re a data scientist familiar with mach"}
{"text": "ine learning, this book will provide\nyou with a solid, practical introduction to deep learning, the fastest-growing\nand most significant subfield of machine learning.\n If you’re a deep-learning expert looking to get started with the Keras frame-\nwork, you’ll find this book to be the best Keras crash course available.\n If you’re a graduate student studying deep learning in a formal setting, you’ll\nfind this book to be a practical complement to your education, helping you\nbuild intuition around "}
{"text": "the behavior of deep neural networks and familiarizing\nyou with key best practices.\nEven technically minded people who don’t code regularly will find this book useful as\nan introduction to both basic and advanced deep-learning concepts.\nIn order to use Keras, you’ll need reasonable Python proficiency. Additionally, famil-\niarity with the Numpy library will be helpful, although it isn’t required. You don’t need\nprevious experience with machine learning or deep learning: this book covers from\nscra"}
{"text": "tch all the necessary basics. You don’t need an advanced mathematics background,\neither—high school–level mathematics should suffice in order to follow along.\nRoadmap\nThis book is structured in two parts. If you have no prior experience with machine\nlearning, I strongly recommend that you complete part 1 before approaching part 2.\nWe’ll start with simple examples, and as the book goes on, we’ll get increasingly close\nto state-of-the-art techniques.\nPart 1 is a high-level introduction to deep lea"}
{"text": "rning, providing context and defini-\ntions, and explaining all the notions required to get started with machine learning\nand neural networks:\n Chapter 1 presents essential context and background knowledge around AI,\nmachine learning, and deep learning.\n Chapter 2 introduces fundamental concepts necessary in order to approach\ndeep learning: tensors, tensor operations, gradient descent, and backpropaga-\ntion. This chapter also features the book’s first example of a working neural\nnetwork.\n Chap"}
{"text": "ter 3 includes everything you need to get started with neural networks: an\nintroduction to Keras, our deep-learning framework of choice; a guide for set-\nting up your workstation; and three foundational code examples with detailed\nexplanations. By the end of this chapter, you’ll be able to train simple neural\nLicensed to <null>\nxviii ABOUT THIS BOOK\nnetworks to handle classification and regression tasks, and you’ll have a solid\nidea of what’s happening in the background as you train them.\n Chap"}
{"text": "ter 4 explores the canonical machine-learning workflow. You’ll also learn\nabout common pitfalls and their solutions.\nPart 2 takes an in-depth dive into practical applications of deep learning in computer\nvision and natural-language processing. Many of the examples introduced in this part\ncan be used as templates to solve problems you’ll encounter in the real-world practice\nof deep learning:\n Chapter 5 examines a range of practical computer-vision examples, with a focus\non image classification.\n"}
{"text": " Chapter 6 gives you practice with techniques for processing sequence data, such\nas text and timeseries.\n Chapter 7 introduces advanced techniques for building state-of-the-art deep-\nlearning models.\n Chapter 8 explains generative models: deep-learning models capable of creat-\ning images and text, with sometimes surprisingly artistic results.\n Chapter 9 is dedicated to consolidating what you’ve learned throughout the\nbook, as well as opening perspectives on the limitations of deep learning a"}
{"text": "nd\nexploring its probable future.\nSoftware/hardware requirements\nAll of this book’s code examples use the Keras deep-learning framework (https://\nkeras.io), which is open source and free to download. You’ll need access to a UNIX\nmachine; it’s possible to use Windows, too, but I don’t recommend it. Appendix A\nwalks you through the complete setup.\nI also recommend that you have a recent NVIDIA GPU on your machine, such as a\nTITAN X. This isn’t required, but it will make your experience better by a"}
{"text": "llowing you\nto run the code examples several times faster. See section 3.3 for more information\nabout setting up a deep-learning workstation.\nIf you don’t have access to a local workstation with a recent NVIDIA GPU, you can\nuse a cloud environment, instead. In particular, you can use Google Cloud instances\n(such as an n1-standard-8 instance with an NVIDIA Tesla K80 add-on) or Amazon Web\nServices (AWS) GPU instances (such as a p2.xlarge instance). Appendix B presents in\ndetail one possible cloud "}
{"text": "workflow that runs an AWS instance via Jupyter notebooks,\naccessible in your browser.\nSource code\nAll code examples in this book are available for download as Jupyter notebooks from\nthe book’s website, www.manning.com/books/deep-learning-with-python, and on\nGitHub at https://github.com/fchollet/deep-learning-with-python-notebooks.\nLicensed to <null>\nABOUT THIS BOOK xix\nBook forum\nPurchase of Deep Learning with Python includes free access to a private web forum run by\nManning Publications where y"}
{"text": "ou can make comments about the book, ask technical\nquestions, and receive help from the author and from other users. To access the forum,\ngo to https://forums.manning.com/forums/deep-learning-with-python. You can also\nlearn more about Manning’s forums and the rules of conduct at https://forums\n.manning.com/forums/about.\nManning’s commitment to our readers is to provide a venue where a meaningful\ndialogue between individual readers and between readers and the author can take\nplace. It isn’t a com"}
{"text": "mitment to any specific amount of participation on the part of the\nauthor, whose contribution to the forum remains voluntary (and unpaid). We suggest\nyou try asking him some challenging questions lest his interest stray! The forum and\nthe archives of previous discussions will be accessible from the publisher’s website as\nlong as the book is in print.\nLicensed to <null>\nabout the author\nFrançois Chollet works on deep learning at Google in Moun-\ntain View, CA. He is the creator of the Keras deep-l"}
{"text": "earning\nlibrary, as well as a contributor to the TensorFlow machine-\nlearning framework. He also does deep-learning research,\nwith a focus on computer vision and the application of\nmachine learning to formal reasoning. His papers have been\npublished at major conferences in the field, including the\nConference on Computer Vision and Pattern Recognition\n(CVPR), the Conference and Workshop on Neural Informa-\ntion Processing Systems (NIPS), the International Conference on Learning Represen-\ntations ("}
{"text": "ICLR), and others.\nxx\nLicensed to <null>\nabout the cover\nThe figure on the cover of Deep Learning with Python is captioned “Habit of a Persian\nLady in 1568.” The illustration is taken from Thomas Jefferys’ A Collection of the Dresses\nof Different Nations, Ancient and Modern (four volumes), London, published between\n1757 and 1772. The title page states that these are hand-colored copperplate engrav-\nings, heightened with gum arabic.\nThomas Jefferys (1719–1771) was called “Geographer to King Georg"}
{"text": "e III.” He was\nan English cartographer who was the leading map supplier of his day. He engraved\nand printed maps for government and other official bodies and produced a wide\nrange of commercial maps and atlases, especially of North America. His work as a map\nmaker sparked an interest in local dress customs of the lands he surveyed and\nmapped, which are brilliantly displayed in this collection. Fascination with faraway\nlands and travel for pleasure were relatively new phenomena in the late eighte"}
{"text": "enth\ncentury, and collections such as this one were popular, introducing both the tourist as\nwell as the armchair traveler to the inhabitants of other countries.\nThe diversity of the drawings in Jefferys’ volumes speaks vividly of the uniqueness\nand individuality of the world’s nations some 200 years ago. Dress codes have changed\nsince then, and the diversity by region and country, so rich at the time, has faded away.\nIt’s now often hard to tell the inhabitants of one continent from another. Per"}
{"text": "haps, try-\ning to view it optimistically, we’ve traded a cultural and visual diversity for a more var-\nied personal life—or a more varied and interesting intellectual and technical life.\nAt a time when it’s difficult to tell one computer book from another, Manning cel-\nebrates the inventiveness and initiative of the computer business with book covers\nbased on the rich diversity of regional life of two centuries ago, brought back to life by\nJefferys’ pictures.\nxxi\nLicensed to <null>\nLicensed to <"}
{"text": "null>\nPart 1\nFundamentals\nof deep learning\nC\nhapters 1–4 of this book will give you a foundational understanding of\nwhat deep learning is, what it can achieve, and how it works. It will also make you\nfamiliar with the canonical workflow for solving data problems using deep learn-\ning. If you aren’t already highly knowledgeable about deep learning, you should\ndefinitely begin by reading part 1 in full before moving on to the practical appli-\ncations in part 2.\nLicensed to <null>\nLicensed to <null"}
{"text": ">\nWhat is deep learning?\nThis chapter covers\n High-level definitions of fundamental concepts\n Timeline of the development of machine learning\n Key factors behind deep learning’s rising\npopularity and future potential\nIn the past few years, artificial intelligence (AI) has been a subject of intense media\nhype. Machine learning, deep learning, and AI come up in countless articles, often\noutside of technology-minded publications. We’re promised a future of intelligent\nchatbots, self-driving cars"}
{"text": ", and virtual assistants—a future sometimes painted in a\ngrim light and other times as utopian, where human jobs will be scarce and most\neconomic activity will be handled by robots or AI agents. For a future or current\npractitioner of machine learning, it’s important to be able to recognize the signal\nin the noise so that you can tell world-changing developments from overhyped\npress releases. Our future is at stake, and it’s a future in which you have an active\nrole to play: after reading this b"}
{"text": "ook, you’ll be one of those who develop the AI\nagents. So let’s tackle these questions: What has deep learning achieved so far?\nHow significant is it? Where are we headed next? Should you believe the hype?\nThis chapter provides essential context around artificial intelligence, machine\nlearning, and deep learning.\n3\nLicensed to <null>\n4 CHAPTER 1 What is deep learning?\n1.1 Artificial intelligence, machine learning,\nand deep learning\nFirst, we need to define clearly what we’re talking about when w"}
{"text": "e mention AI. What\nare artificial intelligence, machine learning, and deep learning (see figure 1.1)? How\ndo they relate to each other?\nArtificial\nintelligence\nMachine\nlearning\nDeep\nlearning\nFigure 1.1 Artificial intelligence,\nmachine learning, and deep learning\n1.1.1 Artificial intelligence\nArtificial intelligence was born in the 1950s, when a handful of pioneers from the\nnascent field of computer science started asking whether computers could be made to\n“think”—a question whose ramifications w"}
{"text": "e’re still exploring today. A concise defini-\ntion of the field would be as follows: the effort to automate intellectual tasks normally per-\nformed by humans. As such, AI is a general field that encompasses machine learning and\ndeep learning, but that also includes many more approaches that don’t involve any\nlearning. Early chess programs, for instance, only involved hardcoded rules crafted by\nprogrammers, and didn’t qualify as machine learning. For a fairly long time, many\nexperts believed that"}
{"text": " human-level artificial intelligence could be achieved by having\nprogrammers handcraft a sufficiently large set of explicit rules for manipulating\nknowledge. This approach is known as symbolic AI, and it was the dominant paradigm\nin AI from the 1950s to the late 1980s. It reached its peak popularity during the expert\nsystems boom of the 1980s.\nAlthough symbolic AI proved suitable to solve well-defined, logical problems, such as\nplaying chess, it turned out to be intractable to figure out explici"}
{"text": "t rules for solving more\ncomplex, fuzzy problems, such as image classification, speech recognition, and lan-\nguage translation. A new approach arose to take symbolic AI’s place: machine learning.\n1.1.2 Machine learning\nIn Victorian England, Lady Ada Lovelace was a friend and collaborator of Charles\nBabbage, the inventor of the Analytical Engine: the first-known general-purpose,\nmechanical computer. Although visionary and far ahead of its time, the Analytical\nLicensed to <null>\nArtificial intelli"}
{"text": "gence, machine learning, and deep learning 5\nEngine wasn’t meant as a general-purpose computer when it was designed in the\n1830s and 1840s, because the concept of general-purpose computation was yet to be\ninvented. It was merely meant as a way to use mechanical operations to automate cer-\ntain computations from the field of mathematical analysis—hence, the name Analyti-\ncal Engine. In 1843, Ada Lovelace remarked on the invention, “The Analytical Engine\nhas no pretensions whatever to originate an"}
{"text": "ything. It can do whatever we know how to\norder it to perform.… Its province is to assist us in making available what we’re\nalready acquainted with.”\nThis remark was later quoted by AI pioneer Alan Turing as “Lady Lovelace’s objec-\ntion” in his landmark 1950 paper “Computing Machinery and Intelligence,”1 which\nintroduced the Turing test as well as key concepts that would come to shape AI. Turing\nwas quoting Ada Lovelace while pondering whether general-purpose computers could\nbe capable of learni"}
{"text": "ng and originality, and he came to the conclusion that they could.\nMachine learning arises from this question: could a computer go beyond “what we\nknow how to order it to perform” and learn on its own how to perform a specified task?\nCould a computer surprise us? Rather than programmers crafting data-processing\nrules by hand, could a computer automatically learn these rules by looking at data?\nThis question opens the door to a new programming paradigm. In classical pro-\ngramming, the paradigm of"}
{"text": " symbolic AI, humans input rules (a program) and data to\nbe processed according to these rules, and out come answers (see figure 1.2). With\nmachine learning, humans input data as well as the answers expected from the data,\nand out come the rules. These rules can then be applied to new data to produce orig-\ninal answers.\nRules\nClassical\nAnswers\nData programming\nData\nMachine Figure 1.2 Machine learning:\nRules\nAnswers learning a new programming paradigm\nA machine-learning system is trained rather t"}
{"text": "han explicitly programmed. It’s presented\nwith many examples relevant to a task, and it finds statistical structure in these exam-\nples that eventually allows the system to come up with rules for automating the task.\nFor instance, if you wished to automate the task of tagging your vacation pictures, you\ncould present a machine-learning system with many examples of pictures already\ntagged by humans, and the system would learn statistical rules for associating specific\npictures to specific tags.\n1"}
{"text": " A. M. Turing, “Computing Machinery and Intelligence,” Mind 59, no. 236 (1950): 433-460.\nLicensed to <null>\n6 CHAPTER 1 What is deep learning?\nAlthough machine learning only started to flourish in the 1990s, it has quickly\nbecome the most popular and most successful subfield of AI, a trend driven by the\navailability of faster hardware and larger datasets. Machine learning is tightly related\nto mathematical statistics, but it differs from statistics in several important ways.\nUnlike statistics, m"}
{"text": "achine learning tends to deal with large, complex datasets (such as\na dataset of millions of images, each consisting of tens of thousands of pixels) for\nwhich classical statistical analysis such as Bayesian analysis would be impractical. As a\nresult, machine learning, and especially deep learning, exhibits comparatively little\nmathematical theory—maybe too little—and is engineering oriented. It’s a hands-on\ndiscipline in which ideas are proven empirically more often than theoretically.\n1.1.3 Lea"}
{"text": "rning representations from data\nTo define deep learning and understand the difference between deep learning\nandother machine-learning approaches, first we need some idea of what machine-\nlearning algorithms do. I just stated that machine learning discovers rules to execute\na data-processing task, given examples of what’s expected. So, to do machine learn-\ning, we need three things:\n Input data points—For instance, if the task is speech recognition, these data\npoints could be sound files of peop"}
{"text": "le speaking. If the task is image tagging,\nthey could be pictures.\n Examples of the expected output—In a speech-recognition task, these could be\nhuman-generated transcripts of sound files. In an image task, expected outputs\ncould be tags such as “dog,” “cat,” and so on.\n A way to measure whether the algorithm is doing a good job—This is necessary in\norder to determine the distance between the algorithm’s current output and\nits expected output. The measurement is used as a feedback signal to ad"}
{"text": "just\nthe way the algorithm works. This adjustment step is what we call learning.\nA machine-learning model transforms its input data into meaningful outputs, a pro-\ncess that is “learned” from exposure to known examples of inputs and outputs. There-\nfore, the central problem in machine learning and deep learning is to meaningfully\ntransform data: in other words, to learn useful representations of the input data at\nhand—representations that get us closer to the expected output. Before we go any\nfu"}
{"text": "rther: what’s a representation? At its core, it’s a different way to look at data—to rep-\nresent or encode data. For instance, a color image can be encoded in the RGB format\n(red-green-blue) or in the HSV format (hue-saturation-value): these are two different\nrepresentations of the same data. Some tasks that may be difficult with one represen-\ntation can become easy with another. For example, the task “select all red pixels in the\nimage” is simpler in the RG format, whereas “make the image less "}
{"text": "saturated” is simpler\nin the HSV format. Machine-learning models are all about finding appropriate repre-\nsentations for their input data—transformations of the data that make it more amena-\nble to the task at hand, such as a classification task.\nLicensed to <null>\nArtificial intelligence, machine learning, and deep learning 7\nLet’s make this concrete. Consider an x-axis, a y-axis, and y\nsome points represented by their coordinates in the (x, y) sys-\ntem, as shown in figure 1.3.\nAs you can see, "}
{"text": "we have a few white points and a few black\npoints. Let’s say we want to develop an algorithm that can take\nthe coordinates (x, y) of a point and output whether that\npoint is likely to be black or to be white. In this case,\n The inputs are the coordinates of our points. x\n The expected outputs are the colors of our points. Figure 1.3\n A way to measure whether our algorithm is doing a Some sample data\ngood job could be, for instance, the percentage of\npoints that are being correctly classified."}
{"text": "\nWhat we need here is a new representation of our data that cleanly separates the white\npoints from the black points. One transformation we could use, among many other\npossibilities, would be a coordinate change, illustrated in figure 1.4.\n1: Raw data 2: Coordinate change 3: Better representation\ny\ny y\nx\nx x\nFigure 1.4 Coordinate change\nIn this new coordinate system, the coordinates of our points can be said to be a new\nrepresentation of our data. And it’s a good one! With this representation, t"}
{"text": "he\nblack/white classification problem can be expressed as a simple rule: “Black points\nare such that x > 0,” or “White points are such that x < 0.” This new representation\nbasically solves the classification problem.\nIn this case, we defined the coordinate change by hand. But if instead we tried sys-\ntematically searching for different possible coordinate changes, and used as feedback\nthe percentage of points being correctly classified, then we would be doing machine\nlearning. Learning, in the c"}
{"text": "ontext of machine learning, describes an automatic search\nprocess for better representations.\nAll machine-learning algorithms consist of automatically finding such transforma-\ntions that turn data into more-useful representations for a given task. These opera-\ntions can be coordinate changes, as you just saw, or linear projections (which may\ndestroy information), translations, nonlinear operations (such as “select all points\nsuch that x > 0”), and so on. Machine-learning algorithms aren’t usuall"}
{"text": "y creative in\nLicensed to <null>\n8 CHAPTER 1 What is deep learning?\nfinding these transformations; they’re merely searching through a predefined set of\noperations, called a hypothesis space.\nSo that’s what machine learning is, technically: searching for useful representa-\ntions of some input data, within a predefined space of possibilities, using guidance\nfrom a feedback signal. This simple idea allows for solving a remarkably broad range\nof intellectual tasks, from speech recognition to autonom"}
{"text": "ous car driving.\nNow that you understand what we mean by learning, let’s take a look at what makes\ndeep learning special.\n1.1.4 The “deep” in deep learning\nDeep learning is a specific subfield of machine learning: a new take on learning repre-\nsentations from data that puts an emphasis on learning successive layers of increasingly\nmeaningful representations. The deep in deep learning isn’t a reference to any kind of\ndeeper understanding achieved by the approach; rather, it stands for this idea o"}
{"text": "f suc-\ncessive layers of representations. How many layers contribute to a model of the data is\ncalled the depth of the model. Other appropriate names for the field could have been\nlayered representations learning and hierarchical representations learning. Modern deep\nlearning often involves tens or even hundreds of successive layers of representations—\nand they’re all learned automatically from exposure to training data. Meanwhile,\nother approaches to machine learning tend to focus on learning o"}
{"text": "nly one or two lay-\ners of representations of the data; hence, they’re sometimes called shallow learning.\nIn deep learning, these layered representations are (almost always) learned via\nmodels called neural networks, structured in literal layers stacked on top of each other.\nThe term neural network is a reference to neurobiology, but although some of the cen-\ntral concepts in deep learning were developed in part by drawing inspiration from our\nunderstanding of the brain, deep-learning models are"}
{"text": " not models of the brain.\nThere’s no evidence that the brain implements anything like the learning mecha-\nnisms used in modern deep-learning models. You may come across pop-science arti-\ncles proclaiming that deep learning works like the brain or was modeled after the\nbrain, but that isn’t the case. It would be confusing and counterproductive for new-\ncomers to the field to think of deep learning as being in any way related to neurobiol-\nogy; you don’t need that shroud of “just like our minds” m"}
{"text": "ystique and mystery, and\nyou may as well forget anything you may have read about hypothetical links between\ndeep learning and biology. For our purposes, deep learning is a mathematical frame-\nwork for learning representations from data.\nLicensed to <null>\nArtificial intelligence, machine learning, and deep learning 9\nWhat do the representations learned by a deep-learning algorithm look like? Let’s\nexamine how a network several layers deep (see figure 1.5) transforms an image of a\ndigit in order "}
{"text": "to recognize what digit it is.\nLayer 1 Layer 2 Layer 3 Layer 4\nOriginal 0\ninput 1\n2\n3\n4 Final\n5 output\n6 Figure 1.5 A deep neural\n7\nnetwork for digit classification\n8\n9\nAs you can see in figure 1.6, the network transforms the digit image into representa-\ntions that are increasingly different from the original image and increasingly informa-\ntive about the final result. You can think of a deep network as a multistage\ninformation-distillation operation, where information goes through successive fi"}
{"text": "lters\nand comes out increasingly purified (that is, useful with regard to some task).\nLayer 1 Layer 2 Layer 3\nrepresentations representations representations\nLayer 4\nrepresentations\n(final output)\n0\nOriginal\n1\ninput\n2\n3\n4\n5\n6\n7\n8\n9\nLayer 1 Layer 2 Layer 3 Layer 4\nFigure 1.6 Deep representations learned by a digit-classification model\nSo that’s what deep learning is, technically: a multistage way to learn data representa-\ntions. It’s a simple idea—but, as it turns out, very simple mechanisms, suf"}
{"text": "ficiently\nscaled, can end up looking like magic.\n1.1.5 Understanding how deep learning works, in three figures\nAt this point, you know that machine learning is about mapping inputs (such as\nimages) to targets (such as the label “cat”), which is done by observing many examples\nof input and targets. You also know that deep neural networks do this input-to-target\nLicensed to <null>\n10 CHAPTER 1 What is deep learning?\nmapping via a deep sequence of simple data transformations (layers) and that these"}
{"text": "\ndata transformations are learned by exposure to examples. Now let’s look at how this\nlearning happens, concretely.\nThe specification of what a layer does to its input data is stored in the layer’s\nweights, which in essence are a bunch of numbers. In technical terms, we’d say that the\ntransformation implemented by a layer is parameterized by its weights (see figure 1.7).\n(Weights are also sometimes called the parameters of a layer.) In this context, learning\nmeans finding a set of values for the"}
{"text": " weights of all layers in a network, such that the\nnetwork will correctly map example inputs to their associated targets. But here’s the\nthing: a deep neural network can contain tens of millions of parameters. Finding the\ncorrect value for all of them may seem like a daunting task, especially given that mod-\nifying the value of one parameter will affect the behavior of all the others!\nInput X\nLayer\nWeights\nGoal: finding the (data transformation)\nright values for\nthese weights\nLayer\nWeights\n(data"}
{"text": " transformation)\nPredictions Figure 1.7 A neural network is\nY' parameterized by its weights.\nTo control something, first you need to be able to observe it. To control the output of\na neural network, you need to be able to measure how far this output is from what you\nexpected. This is the job of the loss function of the network, also called the objective\nfunction. The loss function takes the predictions of the network and the true target\n(what you wanted the network to output) and computes a dist"}
{"text": "ance score, capturing\nhow well the network has done on this specific example (see figure 1.8).\nInput X\nLayer\nWeights\n(data transformation)\nLayer\nWeights\n(data transformation)\nPredictions True targets\nY' Y\nLoss function\nFigure 1.8 A loss function measures\nLoss score\nthe quality of the network’s output.\nLicensed to <null>\nArtificial intelligence, machine learning, and deep learning 11\nThe fundamental trick in deep learning is to use this score as a feedback signal to\nadjust the value of the weight"}
{"text": "s a little, in a direction that will lower the loss score for\nthe current example (see figure 1.9). This adjustment is the job of the optimizer, which\nimplements what’s called the Backpropagation algorithm: the central algorithm in deep\nlearning. The next chapter explains in more detail how backpropagation works.\nInput X\nLayer\nWeights\n(data transformation)\nLayer\nWeights\n(data transformation)\nWeight Predictions True targets\nupdate Y' Y\nOptimizer Loss function\nFigure 1.9 The loss score is used as "}
{"text": "a\nLoss score feedback signal to adjust the weights.\nInitially, the weights of the network are assigned random values, so the network\nmerely implements a series of random transformations. Naturally, its output is far\nfrom what it should ideally be, and the loss score is accordingly very high. But with\nevery example the network processes, the weights are adjusted a little in the correct\ndirection, and the loss score decreases. This is the training loop, which, repeated a suffi-\ncient number of tim"}
{"text": "es (typically tens of iterations over thousands of examples), yields\nweight values that minimize the loss function. A network with a minimal loss is one for\nwhich the outputs are as close as they can be to the targets: a trained network. Once\nagain, it’s a simple mechanism that, once scaled, ends up looking like magic.\n1.1.6 What deep learning has achieved so far\nAlthough deep learning is a fairly old subfield of machine learning, it only rose to\nprominence in the early 2010s. In the few years s"}
{"text": "ince, it has achieved nothing short of\na revolution in the field, with remarkable results on perceptual problems such as see-\ning and hearing—problems involving skills that seem natural and intuitive to humans\nbut have long been elusive for machines.\nIn particular, deep learning has achieved the following breakthroughs, all in his-\ntorically difficult areas of machine learning:\n Near-human-level image classification\n Near-human-level speech recognition\n Near-human-level handwriting transcript"}
{"text": "ion\n Improved machine translation\nLicensed to <null>\n12 CHAPTER 1 What is deep learning?\n Improved text-to-speech conversion\n Digital assistants such as Google Now and Amazon Alexa\n Near-human-level autonomous driving\n Improved ad targeting, as used by Google, Baidu, and Bing\n Improved search results on the web\n Ability to answer natural-language questions\n Superhuman Go playing\nWe’re still exploring the full extent of what deep learning can do. We’ve started apply-\ning it to a wide vari"}
{"text": "ety of problems outside of machine perception and natural-language\nunderstanding, such as formal reasoning. If successful, this may herald an age where\ndeep learning assists humans in science, software development, and more.\n1.1.7 Don’t believe the short-term hype\nAlthough deep learning has led to remarkable achievements in recent years, expecta-\ntions for what the field will be able to achieve in the next decade tend to run much\nhigher than what will likely be possible. Although some world-chan"}
{"text": "ging applications\nlike autonomous cars are already within reach, many more are likely to remain elusive\nfor a long time, such as believable dialogue systems, human-level machine translation\nacross arbitrary languages, and human-level natural-language understanding. In par-\nticular, talk of human-level general intelligence shouldn’t be taken too seriously. The risk\nwith high expectations for the short term is that, as technology fails to deliver,\nresearch investment will dry up, slowing progress "}
{"text": "for a long time.\nThis has happened before. Twice in the past, AI went through a cycle of intense\noptimism followed by disappointment and skepticism, with a dearth of funding as a\nresult. It started with symbolic AI in the 1960s. In those early days, projections about AI\nwere flying high. One of the best-known pioneers and proponents of the symbolic AI\napproach was Marvin Minsky, who claimed in 1967, “Within a generation … the prob-\nlem of creating ‘artificial intelligence’ will substantially be "}
{"text": "solved.” Three years later, in\n1970, he made a more precisely quantified prediction: “In from three to eight years we\nwill have a machine with the general intelligence of an average human being.” In 2016,\nsuch an achievement still appears to be far in the future—so far that we have no way to\npredict how long it will take—but in the 1960s and early 1970s, several experts believed\nit to be right around the corner (as do many people today). A few years later, as these\nhigh expectations failed to ma"}
{"text": "terialize, researchers and government funds turned\naway from the field, marking the start of the first AI winter (a reference to a nuclear win-\nter, because this was shortly after the height of the Cold War).\nIt wouldn’t be the last one. In the 1980s, a new take on symbolic AI, expert systems,\nstarted gathering steam among large companies. A few initial success stories triggered\na wave of investment, with corporations around the world starting their own in-house\nAI departments to develop expert "}
{"text": "systems. Around 1985, companies were spending\nover $1 billion each year on the technology; but by the early 1990s, these systems had\nproven expensive to maintain, difficult to scale, and limited in scope, and interest\ndied down. Thus began the second AI winter.\nLicensed to <null>\nArtificial intelligence, machine learning, and deep learning 13\nWe may be currently witnessing the third cycle of AI hype and disappointment—\nand we’re still in the phase of intense optimism. It’s best to moderate our e"}
{"text": "xpectations\nfor the short term and make sure people less familiar with the technical side of the\nfield have a clear idea of what deep learning can and can’t deliver.\n1.1.8 The promise of AI\nAlthough we may have unrealistic short-term expectations for AI, the long-term pic-\nture is looking bright. We’re only getting started in applying deep learning to many\nimportant problems for which it could prove transformative, from medical diagnoses\nto digital assistants. AI research has been moving forward"}
{"text": " amazingly quickly in the past\nfive years, in large part due to a level of funding never before seen in the short history\nof AI, but so far relatively little of this progress has made its way into the products and\nprocesses that form our world. Most of the research findings of deep learning aren’t\nyet applied, or at least not applied to the full range of problems they can solve across\nall industries. Your doctor doesn’t yet use AI, and neither does your accountant. You\nprobably don’t use AI tech"}
{"text": "nologies in your day-to-day life. Of course, you can ask your\nsmartphone simple questions and get reasonable answers, you can get fairly useful\nproduct recommendations on Amazon.com, and you can search for “birthday” on\nGoogle Photos and instantly find those pictures of your daughter’s birthday party\nfrom last month. That’s a far cry from where such technologies used to stand. But\nsuch tools are still only accessories to our daily lives. AI has yet to transition to being\ncentral to the way we wo"}
{"text": "rk, think, and live.\nRight now, it may seem hard to believe that AI could have a large impact on our\nworld, because it isn’t yet widely deployed—much as, back in 1995, it would have been\ndifficult to believe in the future impact of the internet. Back then, most people didn’t\nsee how the internet was relevant to them and how it was going to change their lives. The\nsame is true for deep learning and AI today. But make no mistake: AI is coming. In a not-\nso-distant future, AI will be your assistant"}
{"text": ", even your friend; it will answer your questions,\nhelp educate your kids, and watch over your health. It will deliver your groceries to your\ndoor and drive you from point A to point B. It will be your interface to an increasingly\ncomplex and information-intensive world. And, even more important, AI will help\nhumanity as a whole move forward, by assisting human scientists in new breakthrough\ndiscoveries across all scientific fields, from genomics to mathematics.\nOn the way, we may face a few set"}
{"text": "backs and maybe a new AI winter—in much the\nsame way the internet industry was overhyped in 1998–1999 and suffered from a crash\nthat dried up investment throughout the early 2000s. But we’ll get there eventually. AI\nwill end up being applied to nearly every process that makes up our society and our\ndaily lives, much like the internet is today.\nDon’t believe the short-term hype, but do believe in the long-term vision. It may\ntake a while for AI to be deployed to its true potential—a potential the"}
{"text": " full extent of\nwhich no one has yet dared to dream—but AI is coming, and it will transform our\nworld in a fantastic way.\nLicensed to <null>\n14 CHAPTER 1 What is deep learning?\n1.2 Before deep learning:\na brief history of machine learning\nDeep learning has reached a level of public attention and industry investment never\nbefore seen in the history of AI, but it isn’t the first successful form of machine learn-\ning. It’s safe to say that most of the machine-learning algorithms used in the industr"}
{"text": "y\ntoday aren’t deep-learning algorithms. Deep learning isn’t always the right tool for the\njob—sometimes there isn’t enough data for deep learning to be applicable, and some-\ntimes the problem is better solved by a different algorithm. If deep learning is your\nfirst contact with machine learning, then you may find yourself in a situation where all\nyou have is the deep-learning hammer, and every machine-learning problem starts to\nlook like a nail. The only way not to fall into this trap is to be "}
{"text": "familiar with other\napproaches and practice them when appropriate.\nA detailed discussion of classical machine-learning approaches is outside of the\nscope of this book, but we’ll briefly go over them and describe the historical context\nin which they were developed. This will allow us to place deep learning in the broader\ncontext of machine learning and better understand where deep learning comes from\nand why it matters.\n1.2.1 Probabilistic modeling\nProbabilistic modeling is the application of the"}
{"text": " principles of statistics to data analysis. It\nwas one of the earliest forms of machine learning, and it’s still widely used to this day.\nOne of the best-known algorithms in this category is the Naive Bayes algorithm.\nNaive Bayes is a type of machine-learning classifier based on applying Bayes’ theo-\nrem while assuming that the features in the input data are all independent (a strong,\nor “naive” assumption, which is where the name comes from). This form of data analy-\nsis predates computers and "}
{"text": "was applied by hand decades before its first computer\nimplementation (most likely dating back to the 1950s). Bayes’ theorem and the foun-\ndations of statistics date back to the eighteenth century, and these are all you need to\nstart using Naive Bayes classifiers.\nA closely related model is the logistic regression (logreg for short), which is some-\ntimes considered to be the “hello world” of modern machine learning. Don’t be mis-\nled by its name—logreg is a classification algorithm rather than a "}
{"text": "regression\nalgorithm. Much like Naive Bayes, logreg predates computing by a long time, yet it’s\nstill useful to this day, thanks to its simple and versatile nature. It’s often the first thing\na data scientist will try on a dataset to get a feel for the classification task at hand.\n1.2.2 Early neural networks\nEarly iterations of neural networks have been completely supplanted by the modern\nvariants covered in these pages, but it’s helpful to be aware of how deep learning origi-\nnated. Although th"}
{"text": "e core ideas of neural networks were investigated in toy forms as early\nas the 1950s, the approach took decades to get started. For a long time, the missing piece\nwas an efficient way to train large neural networks. This changed in the mid-1980s,\nLicensed to <null>\nBefore deep learning: a brief history of machine learning 15\nwhen multiple people independently rediscovered the Backpropagation algorithm—\na way to train chains of parametric operations using gradient-descent optimization\n(later in t"}
{"text": "he book, we’ll precisely define these concepts)—and started applying it to\nneural networks.\nThe first successful practical application of neural nets came in 1989 from Bell\nLabs, when Yann LeCun combined the earlier ideas of convolutional neural networks\nand backpropagation, and applied them to the problem of classifying handwritten\ndigits. The resulting network, dubbed LeNet, was used by the United States Postal Ser-\nvice in the 1990s to automate the reading of ZIP codes on mail envelopes.\n1.2."}
{"text": "3 Kernel methods\nAs neural networks started to gain some respect among researchers in the 1990s,\nthanks to this first success, a new approach to machine learning rose to fame and\nquickly sent neural nets back to oblivion: kernel methods. Kernel methods are a group of\nclassification algorithms, the best known of which is the support vector machine (SVM).\nThe modern formulation of an SVM was developed by Vladimir\nVapnik and Corinna Cortes in the early 1990s at Bell Labs and\npublished in 1995,2 alt"}
{"text": "hough an older linear formulation was\npublished by Vapnik and Alexey Chervonenkis as early as 1963.3\nSVMs aim at solving classification problems by finding good\ndecision boundaries (see figure 1.10) between two sets of points\nbelonging to two different categories. A decision boundary can\nbe thought of as a line or surface separating your training data\ninto two spaces corresponding to two categories. To classify new\ndata points, you just need to check which side of the decision Figure 1.10\nbounda"}
{"text": "ry they fall on. A decision boundary\nSVMs proceed to find these boundaries in two steps:\n1 The data is mapped to a new high-dimensional representation where the\ndecision boundary can be expressed as a hyperplane (if the data was two-\ndimensional, as in figure 1.10, a hyperplane would be a straight line).\n2 A good decision boundary (a separation hyperplane) is computed by trying to\nmaximize the distance between the hyperplane and the closest data points from\neach class, a step called maximizing t"}
{"text": "he margin. This allows the boundary to gen-\neralize well to new samples outside of the training dataset.\nThe technique of mapping data to a high-dimensional representation where a classifi-\ncation problem becomes simpler may look good on paper, but in practice it’s\noftencomputationally intractable. That’s where the kernel trick comes in (the key idea\nthatkernel methods are named after). Here’s the gist of it: to find good decision\n2 Vladimir Vapnik and Corinna Cortes, “Support-Vector Networks,” "}
{"text": "Machine Learning 20, no. 3 (1995): 273–297.\n3 Vladimir Vapnik and Alexey Chervonenkis, “A Note on One Class of Perceptrons,” Automation and Remote Con-\ntrol 25 (1964).\nLicensed to <null>\n16 CHAPTER 1 What is deep learning?\nhyperplanes in the new representation space, you don’t have to explicitly compute\nthe coordinates of your points in the new space; you just need to compute the dis-\ntance between pairs of points in that space, which can be done efficiently using a ker-\nnel function. A kernel f"}
{"text": "unction is a computationally tractable operation that maps any\ntwo points in your initial space to the distance between these points in your target\nrepresentation space, completely bypassing the explicit computation of the new rep-\nresentation. Kernel functions are typically crafted by hand rather than learned from\ndata—in the case of an SVM, only the separation hyperplane is learned.\nAt the time they were developed, SVMs exhibited state-of-the-art performance on\nsimple classification problems a"}
{"text": "nd were one of the few machine-learning methods\nbacked by extensive theory and amenable to serious mathematical analysis, making\nthem well understood and easily interpretable. Because of these useful properties,\nSVMs became extremely popular in the field for a long time.\nBut SVMs proved hard to scale to large datasets and didn’t provide good results for\nperceptual problems such as image classification. Because an SVM is a shallow\nmethod, applying an SVM to perceptual problems requires first extr"}
{"text": "acting useful rep-\nresentations manually (a step called feature engineering), which is difficult and brittle.\n1.2.4 Decision trees, random forests, and gradient boosting machines\nDecision trees are flowchart-like structures that let you classify input data points or pre-\ndict output values given inputs (see figure 1.11). They’re easy to visualize and inter-\npret. Decisions trees learned from data began to receive significant research interest\nin the 2000s, and by 2010 they were often preferred t"}
{"text": "o kernel methods.\nInput data\nQuestion\nQuestion Question Figure 1.11 A decision tree: the parameters\nthat are learned are the questions about the\ndata. A question could be, for instance, “Is\nCategory Category Category Category coefficient 2 in the data greater than 3.5?”\nIn particular, the Random Forest algorithm introduced a robust, practical take on\ndecision-tree learning that involves building a large number of specialized decision\ntrees and then ensembling their outputs. Random forests are ap"}
{"text": "plicable to a wide\nrange of problems—you could say that they’re almost always the second-best algorithm\nfor any shallow machine-learning task. When the popular machine-learning competi-\ntion website Kaggle (http://kaggle.com) got started in 2010, random forests quickly\nbecame a favorite on the platform—until 2014, when gradient boosting machines took\nover. A gradient boosting machine, much like a random forest, is a machine-learning\ntechnique based on ensembling weak prediction models, generally"}
{"text": " decision trees. It\nLicensed to <null>\nBefore deep learning: a brief history of machine learning 17\nuses gradient boosting, a way to improve any machine-learning model by iteratively train-\ning new models that specialize in addressing the weak points of the previous models.\nApplied to decision trees, the use of the gradient boosting technique results in models\nthat strictly outperform random forests most of the time, while having similar proper-\nties. It may be one of the best, if not the best, "}
{"text": "algorithm for dealing with nonperceptual\ndata today. Alongside deep learning, it’s one of the most commonly used techniques in\nKaggle competitions.\n1.2.5 Back to neural networks\nAround 2010, although neural networks were almost completely shunned by the sci-\nentific community at large, a number of people still working on neural networks\nstarted to make important breakthroughs: the groups of Geoffrey Hinton at the Uni-\nversity of Toronto, Yoshua Bengio at the University of Montreal, Yann LeCun at"}
{"text": " New\nYork University, and IDSIA in Switzerland.\nIn 2011, Dan Ciresan from IDSIA began to win academic image-classification com-\npetitions with GPU-trained deep neural networks—the first practical success of mod-\nern deep learning. But the watershed moment came in 2012, with the entry of\nHinton’s group in the yearly large-scale image-classification challenge ImageNet. The\nImageNet challenge was notoriously difficult at the time, consisting of classifying high-\nresolution color images into 1,000 d"}
{"text": "ifferent categories after training on 1.4 million\nimages. In 2011, the top-five accuracy of the winning model, based on classical\napproaches to computer vision, was only 74.3%. Then, in 2012, a team led by Alex\nKrizhevsky and advised by Geoffrey Hinton was able to achieve a top-five accuracy of\n83.6%—a significant breakthrough. The competition has been dominated by deep\nconvolutional neural networks every year since. By 2015, the winner reached an accu-\nracy of 96.4%, and the classification task"}
{"text": " on ImageNet was considered to be a com-\npletely solved problem.\nSince 2012, deep convolutional neural networks (convnets) have become the go-to\nalgorithm for all computer vision tasks; more generally, they work on all perceptual\ntasks. At major computer vision conferences in 2015 and 2016, it was nearly impossi-\nble to find presentations that didn’t involve convnets in some form. At the same time,\ndeep learning has also found applications in many other types of problems, such as\nnatural-languag"}
{"text": "e processing. It has completely replaced SVMs and decision trees in a\nwide range of applications. For instance, for several years, the European Organization\nfor Nuclear Research, CERN, used decision tree–based methods for analysis of particle\ndata from the ATLAS detector at the Large Hadron Collider (LHC); but CERN eventu-\nally switched to Keras-based deep neural networks due to their higher performance\nand ease of training on large datasets.\n1.2.6 What makes deep learning different\nThe primary "}
{"text": "reason deep learning took off so quickly is that it offered better perfor-\nmance on many problems. But that’s not the only reason. Deep learning also makes\nLicensed to <null>\n18 CHAPTER 1 What is deep learning?\nproblem-solving much easier, because it completely automates what used to be the\nmost crucial step in a machine-learning workflow: feature engineering.\nPrevious machine-learning techniques—shallow learning—only involved trans-\nforming the input data into one or two successive representati"}
{"text": "on spaces, usually via\nsimple transformations such as high-dimensional non-linear projections (SVMs) or\ndecision trees. But the refined representations required by complex problems gener-\nally can’t be attained by such techniques. As such, humans had to go to great lengths\nto make the initial input data more amenable to processing by these methods: they\nhad to manually engineer good layers of representations for their data. This is called\nfeature engineering. Deep learning, on the other hand, co"}
{"text": "mpletely automates this step:\nwith deep learning, you learn all features in one pass rather than having to engineer\nthem yourself. This has greatly simplified machine-learning workflows, often replac-\ning sophisticated multistage pipelines with a single, simple, end-to-end deep-learning\nmodel.\nYou may ask, if the crux of the issue is to have multiple successive layers of repre-\nsentations, could shallow methods be applied repeatedly to emulate the effects of\ndeep learning? In practice, there are"}
{"text": " fast-diminishing returns to successive applica-\ntions of shallow-learning methods, because the optimal first representation layer in a three-\nlayer model isn’t the optimal first layer in a one-layer or two-layer model. What is transforma-\ntive about deep learning is that it allows a model to learn all layers of representation\njointly, at the same time, rather than in succession (greedily, as it’s called). With joint\nfeature learning, whenever the model adjusts one of its internal features, all "}
{"text": "other fea-\ntures that depend on it automatically adapt to the change, without requiring human\nintervention. Everything is supervised by a single feedback signal: every change in the\nmodel serves the end goal. This is much more powerful than greedily stacking shallow\nmodels, because it allows for complex, abstract representations to be learned by\nbreaking them down into long series of intermediate spaces (layers); each space is\nonly a simple transformation away from the previous one.\nThese are th"}
{"text": "e two essential characteristics of how deep learning learns from data:\nthe incremental, layer-by-layer way in which increasingly complex representations are developed,\nand the fact that these intermediate incremental representations are learned jointly, each layer\nbeing updated to follow both the representational needs of the layer above and the\nneeds of the layer below. Together, these two properties have made deep learning\nvastly more successful than previous approaches to machine learning.\n1."}
{"text": "2.7 The modern machine-learning landscape\nA great way to get a sense of the current landscape of machine-learning algorithms\nand tools is to look at machine-learning competitions on Kaggle. Due to its highly\ncompetitive environment (some contests have thousands of entrants and million-\ndollar prizes) and to the wide variety of machine-learning problems covered, Kaggle\noffers a realistic way to assess what works and what doesn’t. So, what kind of algorithm\nis reliably winning competitions? What t"}
{"text": "ools do top entrants use?\nLicensed to <null>\nBefore deep learning: a brief history of machine learning 19\nIn 2016 and 2017, Kaggle was dominated by two approaches: gradient boosting\nmachines and deep learning. Specifically, gradient boosting is used for problems\nwhere structured data is available, whereas deep learning is used for perceptual prob-\nlems such as image classification. Practitioners of the former almost always use the\nexcellent XGBoost library, which offers support for the two most "}
{"text": "popular languages of\ndata science: Python and R. Meanwhile, most of the Kaggle entrants using deep learn-\ning use the Keras library, due to its ease of use, flexibility, and support of Python.\nThese are the two techniques you should be the most familiar with in order to be\nsuccessful in applied machine learning today: gradient boosting machines, for shallow-\nlearning problems; and deep learning, for perceptual problems. In technical terms,\nthis means you’ll need to be familiar with XGBoost and K"}
{"text": "eras—the two libraries that\ncurrently dominate Kaggle competitions. With this book in hand, you’re already one\nbig step closer.\nLicensed to <null>\n20 CHAPTER 1 What is deep learning?\n1.3 Why deep learning? Why now?\nThe two key ideas of deep learning for computer vision—convolutional neural net-\nworks and backpropagation—were already well understood in 1989. The Long Short-\nTerm Memory (LSTM) algorithm, which is fundamental to deep learning for\ntimeseries, was developed in 1997 and has barely cha"}
{"text": "nged since. So why did deep\nlearning only take off after 2012? What changed in these two decades?\nIn general, three technical forces are driving advances in machine learning:\n Hardware\n Datasets and benchmarks\n Algorithmic advances\nBecause the field is guided by experimental findings rather than by theory, algorith-\nmic advances only become possible when appropriate data and hardware are available\nto try new ideas (or scale up old ideas, as is often the case). Machine learning isn’t\nmathemati"}
{"text": "cs or physics, where major advances can be done with a pen and a piece of\npaper. It’s an engineering science.\nThe real bottlenecks throughout the 1990s and 2000s were data and hardware. But\nhere’s what happened during that time: the internet took off, and high-performance\ngraphics chips were developed for the needs of the gaming market.\n1.3.1 Hardware\nBetween 1990 and 2010, off-the-shelf CPUs became faster by a factor of approximately\n5,000. As a result, nowadays it’s possible to run small deep-"}
{"text": "learning models on your\nlaptop, whereas this would have been intractable 25 years ago.\nBut typical deep-learning models used in computer vision or speech recognition\nrequire orders of magnitude more computational power than what your laptop can\ndeliver. Throughout the 2000s, companies like NVIDIA and AMD have been investing\nbillions of dollars in developing fast, massively parallel chips (graphical processing\nunits [GPUs]) to power the graphics of increasingly photorealistic video games—\ncheap, "}
{"text": "single-purpose supercomputers designed to render complex 3D scenes on your\nscreen in real time. This investment came to benefit the scientific community when,\nin 2007, NVIDIA launched CUDA (https://developer.nvidia.com/about-cuda), a pro-\ngramming interface for its line of GPUs. A small number of GPUs started replacing\nmassive clusters of CPUs in various highly parallelizable applications, beginning with\nphysics modeling. Deep neural networks, consisting mostly of many small matrix mul-\ntiplicat"}
{"text": "ions, are also highly parallelizable; and around 2011, some researchers began\nto write CUDA implementations of neural nets—Dan Ciresan4 and Alex Krizhevsky5\nwere among the first.\n4 See “Flexible, High Performance Convolutional Neural Networks for Image Classification,” Proceedings of the\n22nd International Joint Conference on Artificial Intelligence (2011), www.ijcai.org/Proceedings/11/Papers/\n210.pdf.\n5 See “ImageNet Classification with Deep Convolutional Neural Networks,” Advances in Neural In"}
{"text": "formation Pro-\ncessing Systems 25 (2012), http://mng.bz/2286.\nLicensed to <null>\nWhy deep learning? Why now? 21\nWhat happened is that the gaming market subsidized supercomputing for the next\ngeneration of artificial intelligence applications. Sometimes, big things begin as\ngames. Today, the NVIDIA TITAN X, a gaming GPU that cost $1,000 at the end of 2015,\ncan deliver a peak of 6.6 TFLOPS in single precision: 6.6 trillion float32 operations\nper second. That’s about 350 times more than what you ca"}
{"text": "n get out of a modern lap-\ntop. On a TITAN X, it takes only a couple of days to train an ImageNet model of the\nsort that would have won the ILSVRC competition a few years ago. Meanwhile, large\ncompanies train deep-learning models on clusters of hundreds of GPUs of a type\ndeveloped specifically for the needs of deep learning, such as the NVIDIA Tesla K80.\nThe sheer computational power of such clusters is something that would never have\nbeen possible without modern GPUs.\nWhat’s more, the deep-lear"}
{"text": "ning industry is starting to go beyond GPUs and is\ninvesting in increasingly specialized, efficient chips for deep learning. In 2016, at its\nannual I/O convention, Google revealed its tensor processing unit (TPU) project: a\nnew chip design developed from the ground up to run deep neural networks, which is\nreportedly 10 times faster and far more energy efficient than top-of-the-line GPUs.\n1.3.2 Data\nAI is sometimes heralded as the new industrial revolution. If deep learning is the steam\nengine of"}
{"text": " this revolution, then data is its coal: the raw material that powers our intelli-\ngent machines, without which nothing would be possible. When it comes to data, in\naddition to the exponential progress in storage hardware over the past 20 years (fol-\nlowing Moore’s law), the game changer has been the rise of the internet, making it fea-\nsible to collect and distribute very large datasets for machine learning. Today, large\ncompanies work with image datasets, video datasets, and natural-language d"}
{"text": "atasets that\ncouldn’t have been collected without the internet. User-generated image tags on\nFlickr, for instance, have been a treasure trove of data for computer vision. So are You-\nTube videos. And Wikipedia is a key dataset for natural-language processing.\nIf there’s one dataset that has been a catalyst for the rise of deep learning, it’s the\nImageNet dataset, consisting of 1.4 million images that have been hand annotated\nwith 1,000 image categories (1 category per image). But what makes Imag"}
{"text": "eNet special\nisn’t just its large size, but also the yearly competition associated with it.6\nAs Kaggle has been demonstrating since 2010, public competitions are an excel-\nlent way to motivate researchers and engineers to push the envelope. Having common\nbenchmarks that researchers compete to beat has greatly helped the recent rise of\ndeep learning.\n1.3.3 Algorithms\nIn addition to hardware and data, until the late 2000s, we were missing a reliable way to\ntrain very deep neural networks. As a res"}
{"text": "ult, neural networks were still fairly shallow,\n6 The ImageNet Large Scale Visual Recognition Challenge (ILSVRC), www.image-net.org/challenges/LSVRC.\nLicensed to <null>\n22 CHAPTER 1 What is deep learning?\nusing only one or two layers of representations; thus, they weren’t able to shine against\nmore-refined shallow methods such as SVMs and random forests. The key issue was that\nof gradient propagation through deep stacks of layers. The feedback signal used to train\nneural networks would fade away"}
{"text": " as the number of layers increased.\nThis changed around 2009–2010 with the advent of several simple but important\nalgorithmic improvements that allowed for better gradient propagation:\n Better activation functions for neural layers\n Better weight-initialization schemes, starting with layer-wise pretraining, which was\nquickly abandoned\n Better optimization schemes, such as RMSProp and Adam\nOnly when these improvements began to allow for training models with 10 or more\nlayers did deep learning "}
{"text": "start to shine.\nFinally, in 2014, 2015, and 2016, even more advanced ways to help gradient propa-\ngation were discovered, such as batch normalization, residual connections, and depth-\nwise separable convolutions. Today we can train from scratch models that are\nthousands of layers deep.\n1.3.4 A new wave of investment\nAs deep learning became the new state of the art for computer vision in 2012–2013,\nand eventually for all perceptual tasks, industry leaders took note. What followed was\na gradual wa"}
{"text": "ve of industry investment far beyond anything previously seen in the his-\ntory of AI.\nIn 2011, right before deep learning took the spotlight, the total venture capital\ninvestment in AI was around $19 million, which went almost entirely to practical appli-\ncations of shallow machine-learning approaches. By 2014, it had risen to a staggering\n$394 million. Dozens of startups launched in these three years, trying to capitalize on\nthe deep-learning hype. Meanwhile, large tech companies such as Google"}
{"text": ", Facebook,\nBaidu, and Microsoft have invested in internal research departments in amounts that\nwould most likely dwarf the flow of venture-capital money. Only a few numbers have\nsurfaced: In 2013, Google acquired the deep-learning startup DeepMind for a\nreported $500 million—the largest acquisition of an AI company in history. In 2014,\nBaidu started a deep-learning research center in Silicon Valley, investing $300 million\nin the project. The deep-learning hardware startup Nervana Systems was ac"}
{"text": "quired by\nIntel in 2016 for over $400 million.\nMachine learning—in particular, deep learning—has become central to the prod-\nuct strategy of these tech giants. In late 2015, Google CEO Sundar Pichai stated,\n“Machine learning is a core, transformative way by which we’re rethinking how we’re\ndoing everything. We’re thoughtfully applying it across all our products, be it search,\nads, YouTube, or Play. And we’re in early days, but you’ll see us—in a systematic way—\napply machine learning in all thes"}
{"text": "e areas.”7\n7 Sundar Pichai, Alphabet earnings call, Oct. 22, 2015.\nLicensed to <null>\nWhy deep learning? Why now? 23\nAs a result of this wave of investment, the number of people working on deep\nlearning went in just five years from a few hundred to tens of thousands, and research\nprogress has reached a frenetic pace. There are currently no signs that this trend will\nslow any time soon.\n1.3.5 The democratization of deep learning\nOne of the key factors driving this inflow of new faces in deep lear"}
{"text": "ning has been the\ndemocratization of the toolsets used in the field. In the early days, doing deep learning\nrequired significant C++ and CUDA expertise, which few people possessed. Nowadays,\nbasic Python scripting skills suffice to do advanced deep-learning research. This has been\ndriven most notably by the development of Theano and then TensorFlow—two symbolic\ntensor-manipulation frameworks for Python that support autodifferentiation, greatly sim-\nplifying the implementation of new models—and b"}
{"text": "y the rise of user-friendly libraries\nsuch as Keras, which makes deep learning as easy as manipulating LEGO bricks. After its\nrelease in early 2015, Keras quickly became the go-to deep-learning solution for large\nnumbers of new startups, graduate students, and researchers pivoting into the field.\n1.3.6 Will it last?\nIs there anything special about deep neural networks that makes them the “right”\napproach for companies to be investing in and for researchers to flock to? Or is deep\nlearning just a"}
{"text": " fad that may not last? Will we still be using deep neural networks in\n20years?\nDeep learning has several properties that justify its status as an AI revolution, and\nit’s here to stay. We may not be using neural networks two decades from now, but what-\never we use will directly inherit from modern deep learning and its core concepts.\nThese important properties can be broadly sorted into three categories:\n Simplicity—Deep learning removes the need for feature engineering, replacing\ncomplex, brit"}
{"text": "tle, engineering-heavy pipelines with simple, end-to-end trainable\nmodels that are typically built using only five or six different tensor operations.\n Scalability—Deep learning is highly amenable to parallelization on GPUs or\nTPUs, so it can take full advantage of Moore’s law. In addition, deep-learning\nmodels are trained by iterating over small batches of data, allowing them to be\ntrained on datasets of arbitrary size. (The only bottleneck is the amount of\nparallel computational power availab"}
{"text": "le, which, thanks to Moore’s law, is a fast-\nmoving barrier.)\n Versatility and reusability—Unlike many prior machine-learning approaches,\ndeep-learning models can be trained on additional data without restarting from\nscratch, making them viable for continuous online learning—an important\nproperty for very large production models. Furthermore, trained deep-learning\nmodels are repurposable and thus reusable: for instance, it’s possible to take a\ndeep-learning model trained for image classificatio"}
{"text": "n and drop it into a video-\nprocessing pipeline. This allows us to reinvest previous work into increasingly\nLicensed to <null>\n24 CHAPTER 1 What is deep learning?\ncomplex and powerful models. This also makes deep learning applicable to\nfairly small datasets.\nDeep learning has only been in the spotlight for a few years, and we haven’t yet estab-\nlished the full scope of what it can do. With every passing month, we learn about new\nuse cases and engineering improvements that lift previous limitatio"}
{"text": "ns. Following a sci-\nentific revolution, progress generally follows a sigmoid curve: it starts with a period of\nfast progress, which gradually stabilizes as researchers hit hard limitations, and then\nfurther improvements become incremental. Deep learning in 2017 seems to be in the\nfirst half of that sigmoid, with much more progress to come in the next few years.\nLicensed to <null>\nBefore we begin: the\nmathematical building\nblocks of neural networks\nThis chapter covers\n A first example of a neur"}
{"text": "al network\n Tensors and tensor operations\n How neural networks learn via backpropagation\nand gradient descent\nUnderstanding deep learning requires familiarity with many simple mathematical\nconcepts: tensors, tensor operations, differentiation, gradient descent, and so on.\nOur goal in this chapter will be to build your intuition about these notions without\ngetting overly technical. In particular, we’ll steer away from mathematical notation,\nwhich can be off-putting for those without any mathema"}
{"text": "tics background and isn’t\nstrictly necessary to explain things well.\nTo add some context for tensors and gradient descent, we’ll begin the chapter\nwith a practical example of a neural network. Then we’ll go over every new concept\n25\nLicensed to <null>\n26 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\nthat’s been introduced, point by point. Keep in mind that these concepts will be essen-\ntial for you to understand the practical examples that will come in the follow"}
{"text": "ing\nchapters!\nAfter reading this chapter, you’ll have an intuitive understanding of how neural\nnetworks work, and you’ll be able to move on to practical applications—which will\nstart with chapter 3.\nLicensed to <null>\nA first look at a neural network 27\n2.1 A first look at a neural network\nLet’s look at a concrete example of a neural network that uses the Python library Keras\nto learn to classify handwritten digits. Unless you already have experience with Keras\nor similar libraries, you won’t un"}
{"text": "derstand everything about this first example right\naway. You probably haven’t even installed Keras yet; that’s fine. In the next chapter,\nwe’ll review each element in the example and explain them in detail. So don’t worry if\nsome steps seem arbitrary or look like magic to you! We’ve got to start somewhere.\nThe problem we’re trying to solve here is to classify grayscale images of handwrit-\nten digits (28 × 28 pixels) into their 10 categories (0 through 9). We’ll use the MNIST\ndataset, a classic i"}
{"text": "n the machine-learning community, which has been around almost\nas long as the field itself and has been intensively studied. It’s a set of 60,000 training\nimages, plus 10,000 test images, assembled by the National Institute of Standards and\nTechnology (the NIST in MNIST) in the 1980s. You can think of “solving” MNIST as the\n“Hello World” of deep learning—it’s what you do to verify that your algorithms are\nworking as expected. As you become a machine-learning practitioner, you’ll see\nMNIST come u"}
{"text": "p over and over again, in scientific papers, blog posts, and so on. You\ncan see some MNIST samples in figure 2.1.\nNote on classes and labels\nIn machine learning, a category in a classification problem is called a class. Data\npoints are called samples. The class associated with a specific sample is called a\nlabel.\nFigure 2.1 MNIST sample digits\nYou don’t need to try to reproduce this example on your machine just now. If you wish\nto, you’ll first need to set up Keras, which is covered in section 3"}
{"text": ".3.\nThe MNIST dataset comes preloaded in Keras, in the form of a set of four Numpy\narrays.\nListing2.1 Loading the MNIST dataset in Keras\nfrom keras.datasets import mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\ntrain_images and train_labels form the training set, the data that the model will\nlearn from. The model will then be tested on the test set, test_images and test_labels.\nLicensed to <null>\n28 CHAPTER 2 Before we begin: the mathematical building blocks o"}
{"text": "f neural networks\nThe images are encoded as Numpy arrays, and the labels are an array of digits, ranging\nfrom 0 to 9. The images and labels have a one-to-one correspondence.\nLet’s look at the training data:\n>>> train_images.shape\n(60000, 28, 28)\n>>> len(train_labels)\n60000\n>>> train_labels\narray([5, 0, 4, ..., 5, 6, 8], dtype=uint8)\nAnd here’s the test data:\n>>> test_images.shape\n(10000, 28, 28)\n>>> len(test_labels)\n10000\n>>> test_labels\narray([7, 2, 1, ..., 4, 5, 6], dtype=uint8)\nThe workflow w"}
{"text": "ill be as follows: First, we’ll feed the neural network the training data,\ntrain_images and train_labels. The network will then learn to associate images and\nlabels. Finally, we’ll ask the network to produce predictions for test_images, and we’ll\nverify whether these predictions match the labels from test_labels.\nLet’s build the network—again, remember that you aren’t expected to understand\neverything about this example yet.\nListing2.2 The network architecture\nfrom keras import models\nfrom keras"}
{"text": " import layers\nnetwork = models.Sequential()\nnetwork.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\nnetwork.add(layers.Dense(10, activation='softmax'))\nThe core building block of neural networks is the layer, a data-processing module that\nyou can think of as a filter for data. Some data goes in, and it comes out in a more use-\nful form. Specifically, layers extract representations out of the data fed into them—hope-\nfully, representations that are more meaningful for the probl"}
{"text": "em at hand. Most of\ndeep learning consists of chaining together simple layers that will implement a form\nof progressive data distillation. A deep-learning model is like a sieve for data process-\ning, made of a succession of increasingly refined data filters—the layers.\nHere, our network consists of a sequence of two Dense layers, which are densely\nconnected (also called fully connected) neural layers. The second (and last) layer is a\n10-way softmax layer, which means it will return an array of 1"}
{"text": "0 probability scores (sum-\nming to 1). Each score will be the probability that the current digit image belongs to\none of our 10 digit classes.\nLicensed to <null>\nA first look at a neural network 29\nTo make the network ready for training, we need to pick three more things, as part\nof the compilation step:\n A loss function—How the network will be able to measure its performance on\nthe training data, and thus how it will be able to steer itself in the right direc-\ntion.\n An optimizer—The mechanis"}
{"text": "m through which the network will update itself\nbased on the data it sees and its loss function.\n Metrics to monitor during training and testing—Here, we’ll only care about accu-\nracy (the fraction of the images that were correctly classified).\nThe exact purpose of the loss function and the optimizer will be made clear through-\nout the next two chapters.\nListing2.3 The compilation step\nnetwork.compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\nBefore training, we"}
{"text": "’ll preprocess the data by reshaping it into the shape the network\nexpects and scaling it so that all values are in the [0, 1] interval. Previously, our train-\ning images, for instance, were stored in an array of shape (60000, 28, 28) of type\nuint8 with values in the [0, 255] interval. We transform it into a float32 array of\nshape (60000, 28 * 28) with values between 0 and 1.\nListing2.4 Preparing the image data\ntrain_images = train_images.reshape((60000, 28 * 28))\ntrain_images = train_images.ast"}
{"text": "ype('float32') / 255\ntest_images = test_images.reshape((10000, 28 * 28))\ntest_images = test_images.astype('float32') / 255\nWe also need to categorically encode the labels, a step that’s explained in chapter 3.\nListing2.5 Preparing the labels\nfrom keras.utils import to_categorical\ntrain_labels = to_categorical(train_labels)\ntest_labels = to_categorical(test_labels)\nWe’re now ready to train the network, which in Keras is done via a call to the net-\nwork’s fit method—we fit the model to its trainin"}
{"text": "g data:\n>>> network.fit(train_images, train_labels, epochs=5, batch_size=128)\nEpoch 1/5\n60000/60000 [==============================] - 9s - loss: 0.2524 - acc: 0.9273\nEpoch 2/5\n51328/60000 [========================>.....] - ETA: 1s - loss: 0.1035 - acc: 0.9692\nLicensed to <null>\n30 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\nTwo quantities are displayed during training: the loss of the network over the training\ndata, and the accuracy of the network over the tra"}
{"text": "ining data.\nWe quickly reach an accuracy of 0.989 (98.9%) on the training data. Now let’s\ncheck that the model performs well on the test set, too:\n>>> test_loss, test_acc = network.evaluate(test_images, test_labels)\n>>> print('test_acc:', test_acc)\ntest_acc: 0.9785\nThe test-set accuracy turns out to be 97.8%—that’s quite a bit lower than the training\nset accuracy. This gap between training accuracy and test accuracy is an example of\noverfitting: the fact that machine-learning models tend to perf"}
{"text": "orm worse on new data\nthan on their training data. Overfitting is a central topic in chapter 3.\nThis concludes our first example—you just saw how you can build and train a neu-\nral network to classify handwritten digits in less than 20 lines of Python code. In the\nnext chapter, I’ll go into detail about every moving piece we just previewed and clarify\nwhat’s going on behind the scenes. You’ll learn about tensors, the data-storing objects\ngoing into the network; tensor operations, which layers ar"}
{"text": "e made of; and gradient\ndescent, which allows your network to learn from its training examples.\nLicensed to <null>\nData representations for neural networks 31\n2.2 Data representations for neural networks\nIn the previous example, we started from data stored in multidimensional Numpy\narrays, also called tensors. In general, all current machine-learning systems use tensors\nas their basic data structure. Tensors are fundamental to the field—so fundamental\nthat Google’s TensorFlow was named after the"}
{"text": "m. So what’s a tensor?\nAt its core, a tensor is a container for data—almost always numerical data. So, it’s a\ncontainer for numbers. You may be already familiar with matrices, which are 2D ten-\nsors: tensors are a generalization of matrices to an arbitrary number of dimensions\n(note that in the context of tensors, a dimension is often called an axis).\n2.2.1 Scalars (0D tensors)\nA tensor that contains only one number is called a scalar (or scalar tensor, or 0-dimensional\ntensor, or 0D tensor). In"}
{"text": " Numpy, a float32 or float64 number is a scalar tensor (or scalar\narray). You can display the number of axes of a Numpy tensor via the ndim attribute; a sca-\nlar tensor has 0 axes (ndim == 0). The number of axes of a tensor is also called its rank.\nHere’s a Numpy scalar:\n>>> import numpy as np\n>>> x = np.array(12)\n>>> x\narray(12)\n>>> x.ndim\n0\n2.2.2 Vectors (1D tensors)\nAn array of numbers is called a vector, or 1D tensor. A 1D tensor is said to have exactly\none axis. Following is a Numpy vector:"}
{"text": "\n>>> x = np.array([12, 3, 6, 14])\n>>> x\narray([12, 3, 6, 14])\n>>> x.ndim\n1\nThis vector has five entries and so is called a 5-dimensional vector. Don’t confuse a 5D\nvector with a 5D tensor! A 5D vector has only one axis and has five dimensions along its\naxis, whereas a 5D tensor has five axes (and may have any number of dimensions\nalong each axis). Dimensionality can denote either the number of entries along a spe-\ncific axis (as in the case of our 5D vector) or the number of axes in a tensor (su"}
{"text": "ch as a\n5D tensor), which can be confusing at times. In the latter case, it’s technically more\ncorrect to talk about a tensor of rank 5 (the rank of a tensor being the number of axes),\nbut the ambiguous notation 5D tensor is common regardless.\n2.2.3 Matrices (2D tensors)\nAn array of vectors is a matrix, or 2D tensor. A matrix has two axes (often referred to\nrows and columns). You can visually interpret a matrix as a rectangular grid of numbers.\nThis is a Numpy matrix:\nLicensed to <null>\n32 CHAPT"}
{"text": "ER 2 Before we begin: the mathematical building blocks of neural networks\n>>> x = np.array([[5, 78, 2, 34, 0],\n[6, 79, 3, 35, 1],\n[7, 80, 4, 36, 2]])\n>>> x.ndim\n2\nThe entries from the first axis are called the rows, and the entries from the second axis\nare called the columns. In the previous example, [5, 78, 2, 34, 0] is the first row of x,\nand [5, 6, 7] is the first column.\n2.2.4 3D tensors and higher-dimensional tensors\nIf you pack such matrices in a new array, you obtain a 3D tensor, which yo"}
{"text": "u can visually\ninterpret as a cube of numbers. Following is a Numpy 3D tensor:\n>>> x = np.array([[[5, 78, 2, 34, 0],\n[6, 79, 3, 35, 1],\n[7, 80, 4, 36, 2]],\n[[5, 78, 2, 34, 0],\n[6, 79, 3, 35, 1],\n[7, 80, 4, 36, 2]],\n[[5, 78, 2, 34, 0],\n[6, 79, 3, 35, 1],\n[7, 80, 4, 36, 2]]])\n>>> x.ndim\n3\nBy packing 3D tensors in an array, you can create a 4D tensor, and so on. In deep learn-\ning, you’ll generally manipulate tensors that are 0D to 4D, although you may go up to\n5D if you process video data.\n2.2.5 K"}
{"text": "ey attributes\nA tensor is defined by three key attributes:\n Number of axes (rank)—For instance, a 3D tensor has three axes, and a matrix has\ntwo axes. This is also called the tensor’s ndim in Python libraries such as Numpy.\n Shape—This is a tuple of integers that describes how many dimensions the ten-\nsor has along each axis. For instance, the previous matrix example has shape\n(3, 5), and the 3D tensor example has shape (3, 3, 5). A vector has a shape\nwith a single element, such as (5,), where"}
{"text": "as a scalar has an empty shape, ().\n Data type (usually called dtype in Python libraries)—This is the type of the data\ncontained in the tensor; for instance, a tensor’s type could be float32, uint8,\nfloat64, and so on. On rare occasions, you may see a char tensor. Note that\nstring tensors don’t exist in Numpy (or in most other libraries), because tensors\nlive in preallocated, contiguous memory segments: and strings, being variable\nlength, would preclude the use of this implementation.\nLicensed "}
{"text": "to <null>\nData representations for neural networks 33\nTo make this more concrete, let’s look back at the data we processed in the MNIST\nexample. First, we load the MNIST dataset:\nfrom keras.datasets import mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\nNext, we display the number of axes of the tensor train_images, the ndim attribute:\n>>> print(train_images.ndim)\n3\nHere’s its shape:\n>>> print(train_images.shape)\n(60000, 28, 28)\nAnd this is its data type, the d"}
{"text": "type attribute:\n>>> print(train_images.dtype)\nuint8\nSo what we have here is a 3D tensor of 8-bit integers. More precisely, it’s an array of\n60,000 matrices of 28 × 8 integers. Each such matrix is a grayscale image, with coeffi-\ncients between 0 and 255.\nLet’s display the fourth digit in this 3D tensor, using the library Matplotlib (part of\nthe standard scientific Python suite); see figure 2.2.\nListing2.6 Displaying the fourth digit\ndigit = train_images[4]\nimport matplotlib.pyplot as plt\nplt.imsh"}
{"text": "ow(digit, cmap=plt.cm.binary)\nplt.show()\nFigure 2.2 The fourth sample in our dataset\nLicensed to <null>\n34 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\n2.2.6 Manipulating tensors in Numpy\nIn the previous example, we selected a specific digit alongside the first axis using the\nsyntax train_images[i]. Selecting specific elements in a tensor is called tensor slicing.\nLet’s look at the tensor-slicing operations you can do on Numpy arrays.\nThe following example selec"}
{"text": "ts digits #10 to #100 (#100 isn’t included) and puts\nthem in an array of shape (90, 28, 28):\n>>> my_slice = train_images[10:100]\n>>> print(my_slice.shape)\n(90, 28, 28)\nIt’s equivalent to this more detailed notation, which specifies a start index and stop\nindex for the slice along each tensor axis. Note that : is equivalent to selecting the\nentire axis:\nEquivalent to the\n>>> my_slice = train_images[10:100, :, :] previous example\n>>> my_slice.shape\n(90, 28, 28) Also equivalent to the\n>>> my_slice "}
{"text": "= train_images[10:100, 0:28, 0:28] previous example\n>>> my_slice.shape\n(90, 28, 28)\nIn general, you may select between any two indices along each tensor axis. For\ninstance, in order to select 14 × 14 pixels in the bottom-right corner of all images, you\ndo this:\nmy_slice = train_images[:, 14:, 14:]\nIt’s also possible to use negative indices. Much like negative indices in Python lists,\nthey indicate a position relative to the end of the current axis. In order to crop the\nimages to patches of 14 × "}
{"text": "14 pixels centered in the middle, you do this:\nmy_slice = train_images[:, 7:-7, 7:-7]\n2.2.7 The notion of data batches\nIn general, the first axis (axis 0, because indexing starts at 0) in all data tensors you’ll\ncome across in deep learning will be the samples axis (sometimes called the samples\ndimension). In the MNIST example, samples are images of digits.\nIn addition, deep-learning models don’t process an entire dataset at once; rather,\nthey break the data into small batches. Concretely, here’"}
{"text": "s one batch of our MNIST dig-\nits, with batch size of 128:\nbatch = train_images[:128]\nAnd here’s the next batch:\nbatch = train_images[128:256]\nAnd the nth batch:\nbatch = train_images[128 * n:128 * (n + 1)]\nLicensed to <null>\nData representations for neural networks 35\nWhen considering such a batch tensor, the first axis (axis 0) is called the batch axis or\nbatch dimension. This is a term you’ll frequently encounter when using Keras and other\ndeep-learning libraries.\n2.2.8 Real-world examples of "}
{"text": "data tensors\nLet’s make data tensors more concrete with a few examples similar to what you’ll\nencounter later. The data you’ll manipulate will almost always fall into one of the fol-\nlowing categories:\n Vector data—2D tensors of shape (samples, features)\n Timeseries data or sequence data—3D tensors of shape (samples, timesteps,\nfeatures)\n Images—4D tensors of shape (samples, height, width, channels) or (samples,\nchannels, height, width)\n Video—5D tensors of shape (samples, frames, height, wi"}
{"text": "dth, channels) or\n(samples, frames, channels, height, width)\n2.2.9 Vector data\nThis is the most common case. In such a dataset, each single data point can be encoded\nas a vector, and thus a batch of data will be encoded as a 2D tensor (that is, an array of\nvectors), where the first axis is the samples axis and the second axis is the features axis.\nLet’s take a look at two examples:\n An actuarial dataset of people, where we consider each person’s age, ZIP code,\nand income. Each person can be cha"}
{"text": "racterized as a vector of 3 values, and thus\nan entire dataset of 100,000 people can be stored in a 2D tensor of shape\n(100000, 3).\n A dataset of text documents, where we represent each document by the counts\nof how many times each word appears in it (out of a dictionary of 20,000 com-\nmon words). Each document can be encoded as a vector of 20,000 values (one\ncount per word in the dictionary), and thus an entire dataset of 500 documents\ncan be stored in a tensor of shape (500, 20000).\n2.2.10 Ti"}
{"text": "meseries data or sequence data\nWhenever time matters in your data (or the notion of sequence order), it makes sense\nto store it in a 3D tensor with an explicit time axis. Each sample can be encoded as a\nsequence of vectors (a 2D tensor), and thus a batch of data will be encoded as a 3D\ntensor (see figure 2.3).\nFeatures\nSamples\nTimesteps Figure 2.3 A 3D timeseries data tensor\nLicensed to <null>\n36 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\nThe time axis is alwa"}
{"text": "ys the second axis (axis of index 1), by convention. Let’s look at a\nfew examples:\n A dataset of stock prices. Every minute, we store the current price of the stock,\nthe highest price in the past minute, and the lowest price in the past minute.\nThus every minute is encoded as a 3D vector, an entire day of trading is\nencoded as a 2D tensor of shape (390, 3) (there are 390 minutes in a trading\nday), and 250 days’ worth of data can be stored in a 3D tensor of shape (250,\n390, 3). Here, each sample"}
{"text": " would be one day’s worth of data.\n A dataset of tweets, where we encode each tweet as a sequence of 280 characters\nout of an alphabet of 128 unique characters. In this setting, each character can\nbe encoded as a binary vector of size 128 (an all-zeros vector except for a 1 entry\nat the index corresponding to the character). Then each tweet can be encoded\nas a 2D tensor of shape (280, 128), and a dataset of 1 million tweets can be\nstored in a tensor of shape (1000000, 280, 128).\n2.2.11 Image da"}
{"text": "ta\nImages typically have three dimensions: height, width, and color depth. Although\ngrayscale images (like our MNIST digits) have only a single color channel and could\nthus be stored in 2D tensors, by convention image tensors are always 3D, with a one-\ndimensional color channel for grayscale images. A batch of 128 grayscale images of\nsize 256 × 256 could thus be stored in a tensor of shape (128, 256, 256, 1), and a\nbatch of 128 color images could be stored in a tensor of shape (128, 256, 256, 3)"}
{"text": "\n(see figure 2.4).\nColor channels\nHeight\nSamples\nFigure 2.4 A 4D image data\nWidth tensor (channels-first convention)\nThere are two conventions for shapes of images tensors: the channels-last convention\n(used by TensorFlow) and the channels-first convention (used by Theano). The Tensor-\nFlow machine-learning framework, from Google, places the color-depth axis at the\nend: (samples, height, width, color_depth). Meanwhile, Theano places the color\ndepth axis right after the batch axis: (samples, colo"}
{"text": "r_depth, height, width). With\nLicensed to <null>\nData representations for neural networks 37\nthe Theano convention, the previous examples would become (128, 1, 256, 256)\nand (128, 3, 256, 256). The Keras framework provides support for both formats.\n2.2.12 Video data\nVideo data is one of the few types of real-world data for which you’ll need 5D tensors.\nA video can be understood as a sequence of frames, each frame being a color image.\nBecause each frame can be stored in a 3D tensor (height, width"}
{"text": ", color_depth), a\nsequence of frames can be stored in a 4D tensor (frames, height, width, color_\ndepth), and thus a batch of different videos can be stored in a 5D tensor of shape\n(samples, frames, height, width, color_depth).\nFor instance, a 60-second, 144 × 256 YouTube video clip sampled at 4 frames per\nsecond would have 240 frames. A batch of four such video clips would be stored in a\ntensor of shape (4, 240, 144, 256, 3). That’s a total of 106,168,320 values! If the\ndtype of the tensor was f"}
{"text": "loat32, then each value would be stored in 32 bits, so the\ntensor would represent 405 MB. Heavy! Videos you encounter in real life are much\nlighter, because they aren’t stored in float32, and they’re typically compressed by a\nlarge factor (such as in the MPEG format).\nLicensed to <null>\n38 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\n2.3 The gears of neural networks: tensor operations\nMuch as any computer program can be ultimately reduced to a small set of binar"}
{"text": "y\noperations on binary inputs (AND, OR, NOR, and so on), all transformations learned\nby deep neural networks can be reduced to a handful of tensor operations applied to\ntensors of numeric data. For instance, it’s possible to add tensors, multiply tensors,\nand so on.\nIn our initial example, we were building our network by stacking Dense layers on\ntop of each other. A Keras layer instance looks like this:\nkeras.layers.Dense(512, activation='relu')\nThis layer can be interpreted as a function, which"}
{"text": " takes as input a 2D tensor and\nreturns another 2D tensor—a new representation for the input tensor. Specifically, the\nfunction is as follows (where W is a 2D tensor and b is a vector, both attributes of the\nlayer):\noutput = relu(dot(W, input) + b)\nLet’s unpack this. We have three tensor operations here: a dot product (dot) between\nthe input tensor and a tensor named W; an addition (+) between the resulting 2D ten-\nsor and a vector b; and, finally, a relu operation. relu(x) is max(x, 0).\nNOTE Al"}
{"text": "though this section deals entirely with linear algebra expressions,\nyou won’t find any mathematical notation here. I’ve found that mathematical\nconcepts can be more readily mastered by programmers with no mathemati-\ncal background if they’re expressed as short Python snippets instead of math-\nematical equations. So we’ll use Numpy code throughout.\n2.3.1 Element-wise operations\nThe relu operation and addition are element-wise operations: operations that are\napplied independently to each entry in "}
{"text": "the tensors being considered. This means\nthese operations are highly amenable to massively parallel implementations (vectorized\nimplementations, a term that comes from the vector processor supercomputer archi-\ntecture from the 1970–1990 period). If you want to write a naive Python imple-\nmentation of an element-wise operation, you use a for loop, as in this naive\nimplementation of an element-wise relu operation:\ndef naive_relu(x):\nassert len(x.shape) == 2 x is a 2D Numpy tensor.\nx = x.copy() Avo"}
{"text": "id overwriting the input tensor.\nfor i in range(x.shape[0]):\nfor j in range(x.shape[1]):\nx[i, j] = max(x[i, j], 0)\nreturn x\nLicensed to <null>\nThe gears of neural networks: tensor operations 39\nYou do the same for addition:\ndef naive_add(x, y): x and y are 2D\nassert len(x.shape) == 2 Numpy tensors.\nassert x.shape == y.shape\nx = x.copy()\nAvoid overwriting\nfor i in range(x.shape[0]):\nthe input tensor.\nfor j in range(x.shape[1]):\nx[i, j] += y[i, j]\nreturn x\nOn the same principle, you can do element"}
{"text": "-wise multiplication, subtraction, and so on.\nIn practice, when dealing with Numpy arrays, these operations are available as well-\noptimized built-in Numpy functions, which themselves delegate the heavy lifting to a\nBasic Linear Algebra Subprograms (BLAS) implementation if you have one installed\n(which you should). BLAS are low-level, highly parallel, efficient tensor-manipulation\nroutines that are typically implemented in Fortran or C.\nSo, in Numpy, you can do the following element-wise operati"}
{"text": "on, and it will be blaz-\ning fast:\nimport numpy as np\nz = x + y Element-wise addition\nz = np.maximum(z, 0.) Element-wise relu\n2.3.2 Broadcasting\nOur earlier naive implementation of naive_add only supports the addition of 2D ten-\nsors with identical shapes. But in the Dense layer introduced earlier, we added a 2D\ntensor with a vector. What happens with addition when the shapes of the two tensors\nbeing added differ?\nWhen possible, and if there’s no ambiguity, the smaller tensor will be broadcasted"}
{"text": " to\nmatch the shape of the larger tensor. Broadcasting consists of two steps:\n1 Axes (called broadcast axes) are added to the smaller tensor to match the ndim of\nthe larger tensor.\n2 The smaller tensor is repeated alongside these new axes to match the full shape\nof the larger tensor.\nLet’s look at a concrete example. Consider X with shape (32, 10) and y with shape\n(10,). First, we add an empty first axis to y, whose shape becomes (1, 10). Then, we\nrepeat y 32 times alongside this new axis, so th"}
{"text": "at we end up with a tensor Y with shape\n(32, 10), where Y[i, :] == y for i in range(0, 32). At this point, we can proceed to\nadd X and Y, because they have the same shape.\nIn terms of implementation, no new 2D tensor is created, because that would be\nterribly inefficient. The repetition operation is entirely virtual: it happens at the algo-\nrithmic level rather than at the memory level. But thinking of the vector being\nLicensed to <null>\n40 CHAPTER 2 Before we begin: the mathematical building bl"}
{"text": "ocks of neural networks\nrepeated 10 times alongside a new axis is a helpful mental model. Here’s what a naive\nimplementation would look like:\ndef naive_add_matrix_and_vector(x, y): x is a 2D Numpy tensor.\nassert len(x.shape) == 2\nassert len(y.shape) == 1 y is a Numpy vector.\nassert x.shape[1] == y.shape[0]\nx = x.copy()\nAvoid overwriting\nfor i in range(x.shape[0]):\nthe input tensor.\nfor j in range(x.shape[1]):\nx[i, j] += y[j]\nreturn x\nWith broadcasting, you can generally apply two-tensor element-"}
{"text": "wise operations if one\ntensor has shape (a, b, … n, n + 1, … m) and the other has shape (n, n + 1, … m). The\nbroadcasting will then automatically happen for axes a through n - 1.\nThe following example applies the element-wise maximum operation to two tensors\nof different shapes via broadcasting:\nimport numpy as np\nx is a random tensor with\nx = np.random.random((64, 3, 32, 10)) shape (64, 3, 32, 10).\ny = np.random.random((32, 10))\ny is a random tensor\nz = np.maximum(x, y) with shape (32, 10).\nThe"}
{"text": " output z has shape\n(64, 3, 32, 10) like x.\n2.3.3 Tensor dot\nThe dot operation, also called a tensor product (not to be confused with an element-\nwise product) is the most common, most useful tensor operation. Contrary to\nelement-wise operations, it combines entries in the input tensors.\nAn element-wise product is done with the * operator in Numpy, Keras, Theano,\nand TensorFlow. dot uses a different syntax in TensorFlow, but in both Numpy and\nKeras it’s done using the standard dot operator:\nimpo"}
{"text": "rt numpy as np\nz = np.dot(x, y)\nIn mathematical notation, you’d note the operation with a dot (.):\nz = x . y\nMathematically, what does the dot operation do? Let’s start with the dot product of\ntwo vectors x and y. It’s computed as follows:\ndef naive_vector_dot(x, y):\nassert len(x.shape) == 1\nx and y are Numpy vectors.\nassert len(y.shape) == 1\nassert x.shape[0] == y.shape[0]\nLicensed to <null>\nThe gears of neural networks: tensor operations 41\nz = 0.\nfor i in range(x.shape[0]):\nz += x[i] * y[i]\nr"}
{"text": "eturn z\nYou’ll have noticed that the dot product between two vectors is a scalar and that only\nvectors with the same number of elements are compatible for a dot product.\nYou can also take the dot product between a matrix x and a vector y, which returns\na vector where the coefficients are the dot products between y and the rows of x. You\nimplement it as follows:\nimport numpy as np x is a Numpy matrix.\ndef naive_matrix_vector_dot(x, y):\nassert len(x.shape) == 2 y is a Numpy vector.\nassert len(y.sh"}
{"text": "ape) == 1\nassert x.shape[1] == y.shape[0]\nThe first dimension of x must be the\nz = np.zeros(x.shape[0]) same as the 0th dimension of y!\nfor i in range(x.shape[0]):\nfor j in range(x.shape[1]): This operation returns a vector of\nz[i] += x[i, j] * y[j] 0s with the same shape as y.\nreturn z\nYou could also reuse the code we wrote previously, which highlights the relationship\nbetween a matrix-vector product and a vector product:\ndef naive_matrix_vector_dot(x, y):\nz = np.zeros(x.shape[0])\nfor i in rang"}
{"text": "e(x.shape[0]):\nz[i] = naive_vector_dot(x[i, :], y)\nreturn z\nNote that as soon as one of the two tensors has an ndim greater than 1, dot is no lon-\nger symmetric, which is to say that dot(x, y) isn’t the same as dot(y, x).\nOf course, a dot product generalizes to tensors with an arbitrary number of axes.\nThe most common applications may be the dot product between two matrices. You\ncan take the dot product of two matrices x and y (dot(x, y)) if and only if\nx.shape[1] == y.shape[0]. The result is a "}
{"text": "matrix with shape (x.shape[0],\ny.shape[1]), where the coefficients are the vector products between the rows of x\nand the columns of y. Here’s the naive implementation:\ndef naive_matrix_dot(x, y):\nThe first dimension of x must be the\nx and y assert len(x.shape) == 2\nsame as the 0th dimension of y!\nare assert len(y.shape) == 2\nNumpy assert x.shape[1] == y.shape[0]\nThis operation returns a matrix\nmatrices.\nz = np.zeros((x.shape[0], y.shape[1])) of 0s with a specific shape.\nfor i in range(x.shape[0]"}
{"text": "): Iterates over the rows of x …\nfor j in range(y.shape[1]): … and over the columns of y.\nrow_x = x[i, :]\ncolumn_y = y[:, j]\nz[i, j] = naive_vector_dot(row_x, column_y)\nreturn z\nLicensed to <null>\n42 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\nTo understand dot-product shape compatibility, it helps to visualize the input and out-\nput tensors by aligning them as shown in figure 2.5.\nc\ny.shape:\n(b, c)\nx . y = z\nb Column of y\nb\nx.shape: z.shape:\n(a, b) (a, c)\na\nFi"}
{"text": "gure 2.5 Matrix dot-product\nz [ i, j ]\nRow of x box diagram\nx, y, and z are pictured as rectangles (literal boxes of coefficients). Because the rows\nand x and the columns of y must have the same size, it follows that the width of x must\nmatch the height of y. If you go on to develop new machine-learning algorithms,\nyou’ll likely be drawing such diagrams often.\nMore generally, you can take the dot product between higher-dimensional tensors,\nfollowing the same rules for shape compatibility as outl"}
{"text": "ined earlier for the 2D case:\n(a, b, c, d) . (d,) -> (a, b, c)\n(a, b, c, d) . (d, e) -> (a, b, c, e)\nAnd so on.\n2.3.4 Tensor reshaping\nA third type of tensor operation that’s essential to understand is tensor reshaping.\nAlthough it wasn’t used in the Dense layers in our first neural network example, we\nused it when we preprocessed the digits data before feeding it into our network:\ntrain_images = train_images.reshape((60000, 28 * 28))\nReshaping a tensor means rearranging its rows and columns to "}
{"text": "match a target shape.\nNaturally, the reshaped tensor has the same total number of coefficients as the initial\ntensor. Reshaping is best understood via simple examples:\n>>> x = np.array([[0., 1.],\n[2., 3.],\n[4., 5.]])\n>>> print(x.shape)\n(3, 2)\nLicensed to <null>\nThe gears of neural networks: tensor operations 43\n>>> x = x.reshape((6, 1))\n>>> x\narray([[ 0.],\n[ 1.],\n[ 2.],\n[ 3.],\n[ 4.],\n[ 5.]])\n>>> x = x.reshape((2, 3))\n>>> x\narray([[ 0., 1., 2.],\n[ 3., 4., 5.]])\nA special case of reshaping that’s "}
{"text": "commonly encountered is transposition. Transposing a\nmatrix means exchanging its rows and its columns, so that x[i, :] becomes x[:, i]:\n>>> x = np.zeros((300, 20))\nCreates an all-zeros matrix\n>>> x = np.transpose(x)\nof shape (300, 20)\n>>> print(x.shape)\n(20, 300)\n2.3.5 Geometric interpretation of tensor operations\nBecause the contents of the tensors manipulated by tensor operations can be inter-\npreted as coordinates of points in some geometric space, all tensor operations have a\ngeometric inter"}
{"text": "pretation. For instance, let’s consider addition. We’ll start with the fol-\nlowing vector:\nA = [0.5, 1]\nIt’s a point in a 2D space (see figure 2.6). It’s common to picture a vector as an arrow\nlinking the origin to the point, as shown in figure 2.7.\n1 A [0.5, 1] 1 A [0.5, 1]\n1 1\nFigure 2.6 A point in a 2D space Figure 2.7 A point in a 2D space\npictured as an arrow\nLicensed to <null>\n44 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\nLet’s consider a new point, B = "}
{"text": "[1, 0.25], which we’ll add to the previous one. This is\ndone geometrically by chaining together the vector arrows, with the resulting location\nbeing the vector representing the sum of the previous two vectors (see figure 2.8).\nA + B\n1 A\nB\n1 Figure 2.8 Geometric interpretation of\nthe sum of two vectors\nIn general, elementary geometric operations such as affine transformations, rotations,\nscaling, and so on can be expressed as tensor operations. For instance, a rotation of a\n2D vector by an angle "}
{"text": "theta can be achieved via a dot product with a 2 × 2 matrix\nR = [u, v], where u and v are both vectors of the plane: u = [cos(theta),\nsin(theta)] and v = [-sin(theta), cos(theta)].\n2.3.6 A geometric interpretation of deep learning\nYou just learned that neural networks consist entirely of chains of tensor operations and\nthat all of these tensor operations are just geometric transformations of the input data.\nIt follows that you can interpret a neural network as a very complex geometric transfor-\n"}
{"text": "mation in a high-dimensional space, implemented via a long series of simple steps.\nIn 3D, the following mental image may prove useful. Imagine two sheets of colored\npaper: one red and one blue. Put one on top of the other. Now crumple them\ntogether into a small ball. That crumpled paper ball is your input data, and each sheet\nof paper is a class of data in a classification problem. What a neural network (or any\nother machine-learning model) is meant to do is figure out a transformation of the\npa"}
{"text": "per ball that would uncrumple it, so as to make the two classes cleanly separable\nagain. With deep learning, this would be implemented as a series of simple transfor-\nmations of the 3D space, such as those you could apply on the paper ball with your fin-\ngers, one movement at a time.\nFigure 2.9 Uncrumpling a\ncomplicated manifold of data\nLicensed to <null>\nThe gears of neural networks: tensor operations 45\nUncrumpling paper balls is what machine learning is about: finding neat representa-\ntions f"}
{"text": "or complex, highly folded data manifolds. At this point, you should have a\npretty good intuition as to why deep learning excels at this: it takes the approach of\nincrementally decomposing a complicated geometric transformation into a long\nchain of elementary ones, which is pretty much the strategy a human would follow to\nuncrumple a paper ball. Each layer in a deep network applies a transformation that\ndisentangles the data a little—and a deep stack of layers makes tractable an extremely\ncomplic"}
{"text": "ated disentanglement process.\nLicensed to <null>\n46 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\n2.4 The engine of neural networks:\ngradient-based optimization\nAs you saw in the previous section, each neural layer from our first network example\ntransforms its input data as follows:\noutput = relu(dot(W, input) + b)\nIn this expression, W and b are tensors that are attributes of the layer. They’re called\nthe weights or trainable parameters of the layer (the kernel "}
{"text": "and bias attributes, respec-\ntively). These weights contain the information learned by the network from exposure\nto training data.\nInitially, these weight matrices are filled with small random values (a step called ran-\ndom initialization). Of course, there’s no reason to expect that relu(dot(W, input) + b),\nwhen W and b are random, will yield any useful representations. The resulting represen-\ntations are meaningless—but they’re a starting point. What comes next is to gradually\nadjust these wei"}
{"text": "ghts, based on a feedback signal. This gradual adjustment, also called\ntraining, is basically the learning that machine learning is all about.\nThis happens within what’s called a training loop, which works as follows. Repeat\nthese steps in a loop, as long as necessary:\n1 Draw a batch of training samples x and corresponding targets y.\n2 Run the network on x (a step called the forward pass) to obtain predictions y_pred.\n3 Compute the loss of the network on the batch, a measure of the mismatch\nbetw"}
{"text": "een y_pred and y.\n4 Update all weights of the network in a way that slightly reduces the loss on this\nbatch.\nYou’ll eventually end up with a network that has a very low loss on its training data: a\nlow mismatch between predictions y_pred and expected targets y. The network has\n“learned” to map its inputs to correct targets. From afar, it may look like magic, but\nwhen you reduce it to elementary steps, it turns out to be simple.\nStep 1 sounds easy enough—just I/O code. Steps 2 and 3 are merely th"}
{"text": "e applica-\ntion of a handful of tensor operations, so you could implement these steps purely\nfrom what you learned in the previous section. The difficult part is step 4: updating\nthe network’s weights. Given an individual weight coefficient in the network, how can\nyou compute whether the coefficient should be increased or decreased, and by how\nmuch?\nOne naive solution would be to freeze all weights in the network except the one\nscalar coefficient being considered, and try different values for th"}
{"text": "is coefficient. Let’s\nsay the initial value of the coefficient is 0.3. After the forward pass on a batch of data,\nthe loss of the network on the batch is 0.5. If you change the coefficient’s value to 0.35\nand rerun the forward pass, the loss increases to 0.6. But if you lower the coefficient to\n0.25, the loss falls to 0.4. In this case, it seems that updating the coefficient by -0.05\nLicensed to <null>\nThe engine of neural networks: gradient-based optimization 47\nwould contribute to minimizing t"}
{"text": "he loss. This would have to be repeated for all coeffi-\ncients in the network.\nBut such an approach would be horribly inefficient, because you’d need to com-\npute two forward passes (which are expensive) for every individual coefficient (of\nwhich there are many, usually thousands and sometimes up to millions). A much bet-\nter approach is to take advantage of the fact that all operations used in the network\nare differentiable, and compute the gradient of the loss with regard to the network’s\ncoef"}
{"text": "ficients. You can then move the coefficients in the opposite direction from the\ngradient, thus decreasing the loss.\nIf you already know what differentiable means and what a gradient is, you can skip to\nsection 2.4.3. Otherwise, the following two sections will help you understand these\nconcepts.\n2.4.1 What’s a derivative?\nConsider a continuous, smooth function f(x) = y, mapping a real number x to a new\nreal number y. Because the function is continuous, a small change in x can only result\nin a sma"}
{"text": "ll change in y—that’s the intuition behind continuity. Let’s say you increase x\nby a small factor epsilon_x: this results in a small epsilon_y change to y:\nf(x + epsilon_x) = y + epsilon_y\nIn addition, because the function is smooth (its curve doesn’t have any abrupt angles),\nwhen epsilon_x is small enough, around a certain point p, it’s possible to approxi-\nmate f as a linear function of slope a, so that epsilon_y becomes a * epsilon_x:\nf(x + epsilon_x) = y + a * epsilon_x\nObviously, this linea"}
{"text": "r approximation is valid only when x is close enough to p.\nThe slope a is called the derivative of f in p. If a is negative, it means a small change\nof x around p will result in a decrease of f(x) (as shown in figure 2.10); and if a is pos-\nitive, a small change in x will result in an increase of f(x). Further, the absolute value\nof a (the magnitude of the derivative) tells you how quickly this increase or decrease\nwill happen.\nLocal linear\napproximation of f,\nwith slope a\nf Figure 2.10 Derivati"}
{"text": "ve of f in p\nFor every differentiable function f(x) (differentiable means “can be derived”: for exam-\nple, smooth, continuous functions can be derived), there exists a derivative function\nf'(x) that maps values of x to the slope of the local linear approximation of f in those\nLicensed to <null>\n48 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\npoints. For instance, the derivative of cos(x) is -sin(x), the derivative of f(x) = a * x\nis f'(x) = a, and so on.\nIf you’"}
{"text": "re trying to update x by a factor epsilon_x in order to minimize f(x), and\nyou know the derivative of f, then your job is done: the derivative completely\ndescribes how f(x) evolves as you change x. If you want to reduce the value of f(x),\nyou just need to move x a little in the opposite direction from the derivative.\n2.4.2 Derivative of a tensor operation: the gradient\nA gradient is the derivative of a tensor operation. It’s the generalization of the concept\nof derivatives to functions of multid"}
{"text": "imensional inputs: that is, to functions that take\ntensors as inputs.\nConsider an input vector x, a matrix W, a target y, and a loss function loss. You can\nuse W to compute a target candidate y_pred, and compute the loss, or mismatch,\nbetween the target candidate y_pred and the target y:\ny_pred = dot(W, x)\nloss_value = loss(y_pred, y)\nIf the data inputs x and y are frozen, then this can be interpreted as a function map-\nping values of W to loss values:\nloss_value = f(W)\nLet’s say the current val"}
{"text": "ue of W is W0. Then the derivative of f in the point W0 is a tensor\ngradient(f)(W0) with the same shape as W, where each coefficient gradient(f)\n(W0)[i, j] indicates the direction and magnitude of the change in loss_value you\nobserve when modifying W0[i, j]. That tensor gradient(f)(W0) is the gradient of\nthe function f(W) = loss_value in W0.\nYou saw earlier that the derivative of a function f(x) of a single coefficient can be\ninterpreted as the slope of the curve of f. Likewise, gradient(f)(W0) "}
{"text": "can be inter-\npreted as the tensor describing the curvature of f(W) around W0.\nFor this reason, in much the same way that, for a function f(x), you can reduce\nthe value of f(x) by moving x a little in the opposite direction from the derivative,\nwith a function f(W) of a tensor, you can reduce f(W) by moving W in the opposite\ndirection from the gradient: for example, W1 = W0 - step * gradient(f)(W0) (where\nstep is a small scaling factor). That means going against the curvature, which intui-\ntivel"}
{"text": "y should put you lower on the curve. Note that the scaling factor step is needed\nbecause gradient(f)(W0) only approximates the curvature when you’re close to W0,\nso you don’t want to get too far from W0.\n2.4.3 Stochastic gradient descent\nGiven a differentiable function, it’s theoretically possible to find its minimum analyti-\ncally: it’s known that a function’s minimum is a point where the derivative is 0, so all\nyou have to do is find all the points where the derivative goes to 0 and check for "}
{"text": "which\nof these points the function has the lowest value.\nLicensed to <null>\nThe engine of neural networks: gradient-based optimization 49\nApplied to a neural network, that means finding analytically the combination of\nweight values that yields the smallest possible loss function. This can be done by solv-\ning the equation gradient(f)(W) = 0 for W. This is a polynomial equation of N vari-\nables, where N is the number of coefficients in the network. Although it would be\npossible to solve such an e"}
{"text": "quation for N = 2 or N = 3, doing so is intractable for real\nneural networks, where the number of parameters is never less than a few thousand\nand can often be several tens of millions.\nInstead, you can use the four-step algorithm outlined at the beginning of this sec-\ntion: modify the parameters little by little based on the current loss value on a ran-\ndom batch of data. Because you’re dealing with a differentiable function, you can\ncompute its gradient, which gives you an efficient way to imp"}
{"text": "lement step 4. If you\nupdate the weights in the opposite direction from the gradient, the loss will be a little\nless every time:\n1 Draw a batch of training samples x and corresponding targets y.\n2 Run the network on x to obtain predictions y_pred.\n3 Compute the loss of the network on the batch, a measure of the mismatch\nbetween y_pred and y.\n4 Compute the gradient of the loss with regard to the network’s parameters (a\nbackward pass).\n5 Move the parameters a little in the opposite direction from "}
{"text": "the gradient—for\nexample W -= step * gradient—thus reducing the loss on the batch a bit.\nEasy enough! What I just described is called mini-batch stochastic gradient descent (mini-\nbatch SGD). The term stochastic refers to the fact that each batch of data is drawn at\nrandom (stochastic is a scientific synonym of random). Figure 2.11 illustrates what hap-\npens in 1D, when the network has only one parameter and you have only one training\nsample.\nLoss Step, also called learning rate\nvalue\nStarting\np"}
{"text": "oint (t=0)\nt=1\nt=2\nt=3\nParameter Figure 2.11 SGD down a 1D loss\nvalue curve (one learnable parameter)\nLicensed to <null>\n50 CHAPTER 2 Before we begin: the mathematical building blocks of neural networks\nAs you can see, intuitively it’s important to pick a reasonable value for the step factor.\nIf it’s too small, the descent down the curve will take many iterations, and it could get\nstuck in a local minimum. If step is too large, your updates may end up taking you to\ncompletely random locations on"}
{"text": " the curve.\nNote that a variant of the mini-batch SGD algorithm would be to draw a single sam-\nple and target at each iteration, rather than drawing a batch of data. This would be\ntrue SGD (as opposed to mini-batch SGD). Alternatively, going to the opposite extreme,\nyou could run every step on all data available, which is called batch SGD. Each update\nwould then be more accurate, but far more expensive. The efficient compromise\nbetween these two extremes is to use mini-batches of reasonable size"}
{"text": ".\nAlthough figure 2.11 illustrates gradient descent in a 1D parameter space, in prac-\ntice you’ll use gradient descent in highly dimensional spaces: every weight coefficient\nin a neural network is a free dimension in the space, and there may be tens of thou-\nsands or even millions of them. To help you build intuition about loss surfaces, you\ncan also visualize gradient descent along a 2D loss surface, as shown in figure 2.12. But\nyou can’t possibly visualize what the actual process of training a"}
{"text": " neural network looks\nlike—you can’t represent a 1,000,000-dimensional space in a way that makes sense to\nhumans. As such, it’s good to keep in mind that the intuitions you develop through\nthese low-dimensional representations may not always be accurate in practice. This\nhas historically been a source of issues in the world of deep-learning research.\nStarting point\n45\n40\n35\n30\n25\n20\n15\n10\n5\nFigure 2.12 Gradient descent\ndown a 2D loss surface (two\nFinal point learnable parameters)\nAdditionally, t"}
{"text": "here exist multiple variants of SGD that differ by taking into account\nprevious weight updates when computing the next weight update, rather than just\nlooking at the current value of the gradients. There is, for instance, SGD with momen-\ntum, as well as Adagrad, RMSProp, and several others. Such variants are known as opti-\nmization methods or optimizers. In particular, the concept of momentum, which is used in\nmany of these variants, deserves your attention. Momentum addresses two issues with\nSG"}
{"text": "D: convergence speed and local minima. Consider figure 2.13, which shows the\ncurve of a loss as a function of a network parameter.\nLicensed to <null>\nThe engine of neural networks: gradient-based optimization 51\nLoss\nvalue\nLocal\nminimum\nGlobal\nminimum\nFigure 2.13 A local minimum\nParameter\nvalue and a global minimum\nAs you can see, around a certain parameter value, there is a local minimum: around\nthat point, moving left would result in the loss increasing, but so would moving right.\nIf the param"}
{"text": "eter under consideration were being optimized via SGD with a small\nlearning rate, then the optimization process would get stuck at the local minimum\ninstead of making its way to the global minimum.\nYou can avoid such issues by using momentum, which draws inspiration from phys-\nics. A useful mental image here is to think of the optimization process as a small ball\nrolling down the loss curve. If it has enough momentum, the ball won’t get stuck in a\nravine and will end up at the global minimum. Mo"}
{"text": "mentum is implemented by moving\nthe ball at each step based not only on the current slope value (current acceleration)\nbut also on the current velocity (resulting from past acceleration). In practice, this\nmeans updating the parameter w based not only on the current gradient value but also\non the previous parameter update, such as in this naive implementation:\npast_velocity = 0. Constant momentum factor\nmomentum = 0.1\nOptimization loop\nwhile loss > 0.01:\nw, loss, gradient = get_current_parameter"}
{"text": "s()\nvelocity = past_velocity * momentum + learning_rate * gradient\nw = w + momentum * velocity - learning_rate * gradient\npast_velocity = velocity\nupdate_parameter(w)\n2.4.4 Chaining derivatives: the Backpropagation algorithm\nIn the previous algorithm, we casually assumed that because a function is differentia-\nble, we can explicitly compute its derivative. In practice, a neural network function\nconsists of many tensor operations chained together, each of which has a simple,\nknown derivative. For"}
{"text": " instance, this is a network f composed of three tensor opera-\ntions, a, b, and c, with weight matrices W1, W2, and W3:\nf(W1, W2, W3) = a(W1, b(W2, c(W3)))\nCalculus tells us that such a chain of functions can be derived using the following iden-\ntity, called the chain rule: f(g(x)) = f'(g(x)) * g'(x). Applying the chain rule to the\ncomputation of the gradient values of a neural network gives rise to an algorithm\nLicensed to <null>\n52 CHAPTER 2 Before we begin: the mathematical building blocks of"}
{"text": " neural networks\ncalled Backpropagation (also sometimes called reverse-mode differentiation). Backpropaga-\ntion starts with the final loss value and works backward from the top layers to the bot-\ntom layers, applying the chain rule to compute the contribution that each parameter\nhad in the loss value.\nNowadays, and for years to come, people will implement networks in modern\nframeworks that are capable of symbolic differentiation, such as TensorFlow. This means\nthat, given a chain of operations w"}
{"text": "ith a known derivative, they can compute a gradient\nfunction for the chain (by applying the chain rule) that maps network parameter values\nto gradient values. When you have access to such a function, the backward pass is\nreduced to a call to this gradient function. Thanks to symbolic differentiation, you’ll\nnever have to implement the Backpropagation algorithm by hand. For this reason, we\nwon’t waste your time and your focus on deriving the exact formulation of the Back-\npropagation algorithm in"}
{"text": " these pages. All you need is a good understanding of how\ngradient-based optimization works.\nLicensed to <null>\nLooking back at our first example 53\n2.5 Looking back at our first example\nYou’ve reached the end of this chapter, and you should now have a general under-\nstanding of what’s going on behind the scenes in a neural network. Let’s go back to\nthe first example and review each piece of it in the light of what you’ve learned in the\nprevious three sections.\nThis was the input data:\n(train_im"}
{"text": "ages, train_labels), (test_images, test_labels) = mnist.load_data()\ntrain_images = train_images.reshape((60000, 28 * 28))\ntrain_images = train_images.astype('float32') / 255\ntest_images = test_images.reshape((10000, 28 * 28))\ntest_images = test_images.astype('float32') / 255\nNow you understand that the input images are stored in Numpy tensors, which are\nhere formatted as float32 tensors of shape (60000, 784) (training data) and (10000,\n784) (test data), respectively.\nThis was our network:\nnetwor"}
{"text": "k = models.Sequential()\nnetwork.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\nnetwork.add(layers.Dense(10, activation='softmax'))\nNow you understand that this network consists of a chain of two Dense layers, that\neach layer applies a few simple tensor operations to the input data, and that these\noperations involve weight tensors. Weight tensors, which are attributes of the layers,\nare where the knowledge of the network persists.\nThis was the network-compilation step:\nnetwork."}
{"text": "compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\nNow you understand that categorical_crossentropy is the loss function that’s used\nas a feedback signal for learning the weight tensors, and which the training phase will\nattempt to minimize. You also know that this reduction of the loss happens via mini-\nbatch stochastic gradient descent. The exact rules governing a specific use of gradient\ndescent are defined by the rmsprop optimizer passed as the first argument"}
{"text": ".\nFinally, this was the training loop:\nnetwork.fit(train_images, train_labels, epochs=5, batch_size=128)\nNow you understand what happens when you call fit: the network will start to iterate\non the training data in mini-batches of 128 samples, 5 times over (each iteration over\nall the training data is called an epoch). At each iteration, the network will compute the\ngradients of the weights with regard to the loss on the batch, and update the weights\nLicensed to <null>\n54 CHAPTER 2 Before we begi"}
{"text": "n: the mathematical building blocks of neural networks\naccordingly. After these 5 epochs, the network will have performed 2,345 gradient\nupdates (469 per epoch), and the loss of the network will be sufficiently low that the\nnetwork will be capable of classifying handwritten digits with high accuracy.\nAt this point, you already know most of what there is to know about neural networks.\nLicensed to <null>\nLooking back at our first example 55\nChapter summary\n Learning means finding a combination of"}
{"text": " model parameters that mini-\nmizes a loss function for a given set of training data samples and their cor-\nresponding targets.\n Learning happens by drawing random batches of data samples and their\ntargets, and computing the gradient of the network parameters with\nrespect to the loss on the batch. The network parameters are then moved\na bit (the magnitude of the move is defined by the learning rate) in the\nopposite direction from the gradient.\n The entire learning process is made possible by th"}
{"text": "e fact that neural net-\nworks are chains of differentiable tensor operations, and thus it’s possible\nto apply the chain rule of derivation to find the gradient function map-\nping the current parameters and current batch of data to a gradient value.\n Two key concepts you’ll see frequently in future chapters are loss and opti-\nmizers. These are the two things you need to define before you begin feed-\ning data into a network.\n The loss is the quantity you’ll attempt to minimize during training, s"}
{"text": "o it\nshould represent a measure of success for the task you’re trying to solve.\n The optimizer specifies the exact way in which the gradient of the loss will\nbe used to update parameters: for instance, it could be the RMSProp opti-\nmizer, SGD with momentum, and so on.\nLicensed to <null>\nGetting started\nwith neural networks\nThis chapter covers\n Core components of neural networks\n An introduction to Keras\n Setting up a deep-learning workstation\n Using neural networks to solve basic\nclassifica"}
{"text": "tion and regression problems\nThis chapter is designed to get you started with using neural networks to solve real\nproblems. You’ll consolidate the knowledge you gained from our first practical\nexample in chapter 2, and you’ll apply what you’ve learned to three new problems\ncovering the three most common use cases of neural networks: binary classifica-\ntion, multiclass classification, and scalar regression.\nIn this chapter, we’ll take a closer look at the core components of neural networks\nthat w"}
{"text": "e introduced in chapter 2: layers, networks, objective functions, and optimiz-\ners. We’ll give you a quick introduction to Keras, the Python deep-learning library\nthat we’ll use throughout the book. You’ll set up a deep-learning workstation, with\n56\nLicensed to <null>\n57\nTensorFlow, Keras, and GPU support. We’ll dive into three introductory examples of\nhow to use neural networks to address real problems:\n Classifying movie reviews as positive or negative (binary classification)\n Classifying ne"}
{"text": "ws wires by topic (multiclass classification)\n Estimating the price of a house, given real-estate data (regression)\nBy the end of this chapter, you’ll be able to use neural networks to solve simple\nmachine problems such as classification and regression over vector data. You’ll then\nbe ready to start building a more principled, theory-driven understanding of machine\nlearning in chapter 4.\nLicensed to <null>\n58 CHAPTER 3 Getting started with neural networks\n3.1 Anatomy of a neural network\nAs you "}
{"text": "saw in the previous chapters, training a neural network revolves around the fol-\nlowing objects:\n Layers, which are combined into a network (or model)\n The input data and corresponding targets\n The loss function, which defines the feedback signal used for learning\n The optimizer, which determines how learning proceeds\nYou can visualize their interaction as illustrated in figure 3.1: the network, composed\nof layers that are chained together, maps the input data to predictions. The loss func-\n"}
{"text": "tion then compares these predictions to the targets, producing a loss value: a measure\nof how well the network’s predictions match what was expected. The optimizer uses\nthis loss value to update the network’s weights.\nInput X\nLayer\nWeights\n(data transformation)\nLayer\nWeights\n(data transformation)\nWeight Predictions True targets\nupdate Y' Y\nOptimizer Loss function\nFigure 3.1 Relationship between the\nLoss score\nnetwork, layers, loss function, and optimizer\nLet’s take a closer look at layers, netwo"}
{"text": "rks, loss functions, and optimizers.\n3.1.1 Layers: the building blocks of deep learning\nThe fundamental data structure in neural networks is the layer, to which you were\nintroduced in chapter 2. A layer is a data-processing module that takes as input one or\nmore tensors and that outputs one or more tensors. Some layers are stateless, but\nmore frequently layers have a state: the layer’s weights, one or several tensors learned\nwith stochastic gradient descent, which together contain the network’s "}
{"text": "knowledge.\nDifferent layers are appropriate for different tensor formats and different types of data\nprocessing. For instance, simple vector data, stored in 2D tensors of shape (samples,\nfeatures), is often processed by densely connected layers, also called fully connected or dense\nlayers (the Dense class in Keras). Sequence data, stored in 3D tensors of shape (samples,\ntimesteps, features), is typically processed by recurrent layers such as an LSTM layer.\nImage data, stored in 4D tensors, is us"}
{"text": "ually processed by 2D convolution layers (Conv2D).\nLicensed to <null>\nAnatomy of a neural network 59\nYou can think of layers as the LEGO bricks of deep learning, a metaphor that is\nmade explicit by frameworks like Keras. Building deep-learning models in Keras is\ndone by clipping together compatible layers to form useful data-transformation pipe-\nlines. The notion of layer compatibility here refers specifically to the fact that every layer\nwill only accept input tensors of a certain shape and wil"}
{"text": "l return output tensors of a cer-\ntain shape. Consider the following example:\nfrom keras import layers\nA dense layer with 32\nlayer = layers.Dense(32, input_shape=(784,)) output units\nWe’re creating a layer that will only accept as input 2D tensors where the first dimen-\nsion is 784 (axis 0, the batch dimension, is unspecified, and thus any value would be\naccepted). This layer will return a tensor where the first dimension has been trans-\nformed to be 32.\nThus this layer can only be connected to "}
{"text": "a downstream layer that expects 32-\ndimensional vectors as its input. When using Keras, you don’t have to worry about\ncompatibility, because the layers you add to your models are dynamically built to\nmatch the shape of the incoming layer. For instance, suppose you write the following:\nfrom keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmodel.add(layers.Dense(32, input_shape=(784,)))\nmodel.add(layers.Dense(32))\nThe second layer didn’t receive an input shape argument—inst"}
{"text": "ead, it automatically\ninferred its input shape as being the output shape of the layer that came before.\n3.1.2 Models: networks of layers\nA deep-learning model is a directed, acyclic graph of layers. The most common\ninstance is a linear stack of layers, mapping a single input to a single output.\nBut as you move forward, you’ll be exposed to a much broader variety of network\ntopologies. Some common ones include the following:\n Two-branch networks\n Multihead networks\n Inception blocks\nThe topolo"}
{"text": "gy of a network defines a hypothesis space. You may remember that in chap-\nter 1, we defined machine learning as “searching for useful representations of some\ninput data, within a predefined space of possibilities, using guidance from a feedback\nsignal.” By choosing a network topology, you constrain your space of possibilities\n(hypothesis space) to a specific series of tensor operations, mapping input data to out-\nput data. What you’ll then be searching for is a good set of values for the weight"}
{"text": " ten-\nsors involved in these tensor operations.\nLicensed to <null>\n60 CHAPTER 3 Getting started with neural networks\nPicking the right network architecture is more an art than a science; and although\nthere are some best practices and principles you can rely on, only practice can help\nyou become a proper neural-network architect. The next few chapters will both teach\nyou explicit principles for building neural networks and help you develop intuition as\nto what works or doesn’t work for specific p"}
{"text": "roblems.\n3.1.3 Loss functions and optimizers:\nkeys to configuring the learning process\nOnce the network architecture is defined, you still have to choose two more things:\n Loss function (objective function)—The quantity that will be minimized during\ntraining. It represents a measure of success for the task at hand.\n Optimizer—Determines how the network will be updated based on the loss func-\ntion. It implements a specific variant of stochastic gradient descent (SGD).\nA neural network that has "}
{"text": "multiple outputs may have multiple loss functions (one per\noutput). But the gradient-descent process must be based on a single scalar loss value;\nso, for multiloss networks, all losses are combined (via averaging) into a single scalar\nquantity.\nChoosing the right objective function for the right problem is extremely import-\nant: your network will take any shortcut it can, to minimize the loss; so if the objective\ndoesn’t fully correlate with success for the task at hand, your network will end up"}
{"text": "\ndoing things you may not have wanted. Imagine a stupid, omnipotent AI trained via\nSGD, with this poorly chosen objective function: “maximizing the average well-being\nof all humans alive.” To make its job easier, this AI might choose to kill all humans\nexcept a few and focus on the well-being of the remaining ones—because average\nwell-being isn’t affected by how many humans are left. That might not be what you\nintended! Just remember that all neural networks you build will be just as ruthless in"}
{"text": "\nlowering their loss function—so choose the objective wisely, or you’ll have to face\nunintended side effects.\nFortunately, when it comes to common problems such as classification, regression,\nand sequence prediction, there are simple guidelines you can follow to choose the\ncorrect loss. For instance, you’ll use binary crossentropy for a two-class classification\nproblem, categorical crossentropy for a many-class classification problem, mean-\nsquared error for a regression problem, connectionist t"}
{"text": "emporal classification (CTC)\nfor a sequence-learning problem, and so on. Only when you’re working on truly new\nresearch problems will you have to develop your own objective functions. In the next\nfew chapters, we’ll detail explicitly which loss functions to choose for a wide range of\ncommon tasks.\nLicensed to <null>\nIntroduction to Keras 61\n3.2 Introduction to Keras\nThroughout this book, the code examples use Keras (https://keras.io). Keras is a\ndeep-learning framework for Python that provides a"}
{"text": " convenient way to define and\ntrain almost any kind of deep-learning model. Keras was initially developed for\nresearchers, with the aim of enabling fast experimentation.\nKeras has the following key features:\n It allows the same code to run seamlessly on CPU or GPU.\n It has a user-friendly API that makes it easy to quickly prototype deep-learning\nmodels.\n It has built-in support for convolutional networks (for computer vision), recur-\nrent networks (for sequence processing), and any combinatio"}
{"text": "n of both.\n It supports arbitrary network architectures: multi-input or multi-output models,\nlayer sharing, model sharing, and so on. This means Keras is appropriate for\nbuilding essentially any deep-learning model, from a generative adversarial net-\nwork to a neural Turing machine.\nKeras is distributed under the permissive MIT license, which means it can be freely\nused in commercial projects. It’s compatible with any version of Python from 2.7 to 3.6\n(as of mid-2017).\nKeras has well over 200,0"}
{"text": "00 users, ranging from academic researchers and engi-\nneers at both startups and large companies to graduate students and hobbyists. Keras\nis used at Google, Netflix, Uber, CERN, Yelp, Square, and hundreds of startups work-\ning on a wide range of problems. Keras is also a popular framework on Kaggle, the\nmachine-learning competition website, where almost every recent deep-learning com-\npetition has been won using Keras models.\nFigure 3.2 Google web search interest for different deep-learning fra"}
{"text": "meworks over time\nLicensed to <null>\n62 CHAPTER 3 Getting started with neural networks\n3.2.1 Keras, TensorFlow, Theano, and CNTK\nKeras is a model-level library, providing high-level building blocks for developing\ndeep-learning models. It doesn’t handle low-level operations such as tensor manipula-\ntion and differentiation. Instead, it relies on a specialized, well-optimized tensor\nlibrary to do so, serving as the backend engine of Keras. Rather than choosing a single\ntensor library and tying the"}
{"text": " implementation of Keras to that library, Keras handles the\nproblem in a modular way (see figure 3.3); thus several different backend engines can\nbe plugged seamlessly into Keras. Currently, the three existing backend implementa-\ntions are the TensorFlow backend, the Theano backend, and the Microsoft Cognitive\nToolkit (CNTK) backend. In the future, it’s likely that Keras will be extended to work\nwith even more deep-learning execution engines.\nFigure 3.3 The deep-learning\nsoftware and hardware st"}
{"text": "ack\nTensorFlow, CNTK, and Theano are some of the primary platforms for deep learning\ntoday. Theano (http://deeplearning.net/software/theano) is developed by the MILA\nlab at Université de Montréal, TensorFlow (www.tensorflow.org) is developed by Google,\nand CNTK (https://github.com/Microsoft/CNTK) is developed by Microsoft. Any\npiece of code that you write with Keras can be run with any of these backends without\nhaving to change anything in the code: you can seamlessly switch between the two\nduri"}
{"text": "ng development, which often proves useful—for instance, if one of these backends\nproves to be faster for a specific task. We recommend using the TensorFlow backend as\nthe default for most of your deep-learning needs, because it’s the most widely adopted,\nscalable, and production ready.\nVia TensorFlow (or Theano, or CNTK), Keras is able to run seamlessly on both\nCPUs and GPUs. When running on CPU, TensorFlow is itself wrapping a low-level\nlibrary for tensor operations called Eigen (http://eigen.t"}
{"text": "uxfamily.org). On GPU,\nTensorFlow wraps a library of well-optimized deep-learning operations called the\nNVIDIA CUDA Deep Neural Network library (cuDNN).\n3.2.2 Developing with Keras: a quick overview\nYou’ve already seen one example of a Keras model: the MNIST example. The typical\nKeras workflow looks just like that example:\n1 Define your training data: input tensors and target tensors.\n2 Define a network of layers (or model) that maps your inputs to your targets.\nLicensed to <null>\nIntroduction t"}
{"text": "o Keras 63\n3 Configure the learning process by choosing a loss function, an optimizer, and\nsome metrics to monitor.\n4 Iterate on your training data by calling the fit() method of your model.\nThere are two ways to define a model: using the Sequential class (only for linear\nstacks of layers, which is the most common network architecture by far) or the func-\ntional API (for directed acyclic graphs of layers, which lets you build completely arbi-\ntrary architectures).\nAs a refresher, here’s a two-la"}
{"text": "yer model defined using the Sequential class (note\nthat we’re passing the expected shape of the input data to the first layer):\nfrom keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmodel.add(layers.Dense(32, activation='relu', input_shape=(784,)))\nmodel.add(layers.Dense(10, activation='softmax'))\nAnd here’s the same model defined using the functional API:\ninput_tensor = layers.Input(shape=(784,))\nx = layers.Dense(32, activation='relu')(input_tensor)\noutput_tensor = layer"}
{"text": "s.Dense(10, activation='softmax')(x)\nmodel = models.Model(inputs=input_tensor, outputs=output_tensor)\nWith the functional API, you’re manipulating the data tensors that the model pro-\ncesses and applying layers to this tensor as if they were functions.\nNOTE A detailed guide to what you can do with the functional API can be\nfound in chapter 7. Until chapter 7, we’ll only be using the Sequential class\nin our code examples.\nOnce your model architecture is defined, it doesn’t matter whether you used"}
{"text": " a\nSequential model or the functional API. All of the following steps are the same.\nThe learning process is configured in the compilation step, where you specify the\noptimizer and loss function(s) that the model should use, as well as the metrics you\nwant to monitor during training. Here’s an example with a single loss function, which\nis by far the most common case:\nfrom keras import optimizers\nmodel.compile(optimizer=optimizers.RMSprop(lr=0.001),\nloss='mse',\nmetrics=['accuracy'])\nFinally, the l"}
{"text": "earning process consists of passing Numpy arrays of input data (and the\ncorresponding target data) to the model via the fit() method, similar to what you\nwould do in Scikit-Learn and several other machine-learning libraries:\nmodel.fit(input_tensor, target_tensor, batch_size=128, epochs=10)\nLicensed to <null>\n64 CHAPTER 3 Getting started with neural networks\nOver the next few chapters, you’ll build a solid intuition about what type of network\narchitectures work for different kinds of problems, ho"}
{"text": "w to pick the right learning con-\nfiguration, and how to tweak a model until it gives the results you want to see. We’ll\nlook at three basic examples in sections 3.4, 3.5, and 3.6: a two-class classification\nexample, a many-class classification example, and a regression example.\nLicensed to <null>\nSetting up a deep-learning workstation 65\n3.3 Setting up a deep-learning workstation\nBefore you can get started developing deep-learning applications, you need to set up\nyour workstation. It’s highly r"}
{"text": "ecommended, although not strictly necessary, that you\nrun deep-learning code on a modern NVIDIA GPU. Some applications—in particular,\nimage processing with convolutional networks and sequence processing with recur-\nrent neural networks—will be excruciatingly slow on CPU, even a fast multicore CPU.\nAnd even for applications that can realistically be run on CPU, you’ll generally see\nspeed increase by a factor or 5 or 10 by using a modern GPU. If you don’t want to\ninstall a GPU on your machine, you"}
{"text": " can alternatively consider running your experi-\nments on an AWS EC2 GPU instance or on Google Cloud Platform. But note that cloud\nGPU instances can become expensive over time.\nWhether you’re running locally or in the cloud, it’s better to be using a Unix work-\nstation. Although it’s technically possible to use Keras on Windows (all three Keras\nbackends support Windows), We don’t recommend it. In the installation instructions\nin appendix A, we’ll consider an Ubuntu machine. If you’re a Windows u"}
{"text": "ser, the sim-\nplest solution to get everything running is to set up an Ubuntu dual boot on your\nmachine. It may seem like a hassle, but using Ubuntu will save you a lot of time and\ntrouble in the long run.\nNote that in order to use Keras, you need to install TensorFlow or CNTK or Theano\n(or all of them, if you want to be able to switch back and forth among the three back-\nends). In this book, we’ll focus on TensorFlow, with some light instructions relative to\nTheano. We won’t cover CNTK.\n3.3.1 J"}
{"text": "upyter notebooks: the preferred way\nto run deep-learning experiments\nJupyter notebooks are a great way to run deep-learning experiments—in particular,\nthe many code examples in this book. They’re widely used in the data-science and\nmachine-learning communities. A notebook is a file generated by the Jupyter Notebook\napp (https://jupyter.org), which you can edit in your browser. It mixes the ability to\nexecute Python code with rich text-editing capabilities for annotating what you’re\ndoing. A note"}
{"text": "book also allows you to break up long experiments into smaller pieces\nthat can be executed independently, which makes development interactive and means\nyou don’t have to rerun all of your previous code if something goes wrong late in an\nexperiment.\nWe recommend using Jupyter notebooks to get started with Keras, although that\nisn’t a requirement: you can also run standalone Python scripts or run code from within\nan IDE such as PyCharm. All the code examples in this book are available as open sour"}
{"text": "ce\nnotebooks; you can download them from the book’s website at www.manning\n.com/books/deep-learning-with-python.\nLicensed to <null>\n66 CHAPTER 3 Getting started with neural networks\n3.3.2 Getting Keras running: two options\nTo get started in practice, we recommend one of the following two options:\n Use the official EC2 Deep Learning AMI (https://aws.amazon.com/amazon-\nai/amis), and run Keras experiments as Jupyter notebooks on EC2. Do this if\nyou don’t already have a GPU on your local machine. A"}
{"text": "ppendix B provides a\nstep-by-step guide.\n Install everything from scratch on a local Unix workstation. You can then run\neither local Jupyter notebooks or a regular Python codebase. Do this if you\nalready have a high-end NVIDIA GPU. Appendix A provides an Ubuntu-specific,\nstep-by-step guide.\nLet’s take a closer look at some of the compromises involved in picking one option\nover the other.\n3.3.3 Running deep-learning jobs in the cloud: pros and cons\nIf you don’t already have a GPU that you can us"}
{"text": "e for deep learning (a recent, high-end\nNVIDIA GPU), then running deep-learning experiments in the cloud is a simple, low-\ncost way for you to get started without having to buy any additional hardware. If you’re\nusing Jupyter notebooks, the experience of running in the cloud is no different from\nrunning locally. As of mid-2017, the cloud offering that makes it easiest to get started\nwith deep learning is definitely AWS EC2. Appendix B provides a step-by-step guide to\nrunning Jupyter notebooks on"}
{"text": " a EC2 GPU instance.\nBut if you’re a heavy user of deep learning, this setup isn’t sustainable in the long\nterm—or even for more than a few weeks. EC2 instances are expensive: the instance\ntype recommended in appendix B (the p2.xlarge instance, which won’t provide you\nwith much power) costs $0.90 per hour as of mid-2017. Meanwhile, a solid consumer-\nclass GPU will cost you somewhere between $1,000 and $1,500—a price that has been\nfairly stable over time, even as the specs of these GPUs keep impr"}
{"text": "oving. If you’re serious\nabout deep learning, you should set up a local workstation with one or more GPUs.\nIn short, EC2 is a great way to get started. You could follow the code examples in\nthis book entirely on an EC2 GPU instance. But if you’re going to be a power user of\ndeep learning, get your own GPUs.\n3.3.4 What is the best GPU for deep learning?\nIf you’re going to buy a GPU, which one should you choose? The first thing to note is\nthat it must be an NVIDIA GPU. NVIDIA is the only graphics "}
{"text": "computing company that\nhas invested heavily in deep learning so far, and modern deep-learning frameworks\ncan only run on NVIDIA cards.\nAs of mid-2017, we recommend the NVIDIA TITAN Xp as the best card on the mar-\nket for deep learning. For lower budgets, you may want to consider the GTX 1060. If\nyou’re reading these pages in 2018 or later, take the time to look online for fresher\nrecommendations, because new models come out every year.\nLicensed to <null>\nSetting up a deep-learning workstation 67"}
{"text": "\nFrom this section onward, we’ll assume that you have access to a machine with\nKeras and its dependencies installed—preferably with GPU support. Make sure you\nfinish this step before you proceed. Go through the step-by-step guides in the appen-\ndixes, and look online if you need further help. There is no shortage of tutorials on\nhow to install Keras and common deep-learning dependencies.\nWe can now dive into practical Keras examples.\nLicensed to <null>\n68 CHAPTER 3 Getting started with neural ne"}
{"text": "tworks\n3.4 Classifying movie reviews:\na binary classification example\nTwo-class classification, or binary classification, may be the most widely applied kind\nof machine-learning problem. In this example, you’ll learn to classify movie reviews as\npositive or negative, based on the text content of the reviews.\n3.4.1 The IMDB dataset\nYou’ll work with the IMDB dataset: a set of 50,000 highly polarized reviews from the\nInternet Movie Database. They’re split into 25,000 reviews for training and 25,000"}
{"text": "\nreviews for testing, each set consisting of 50% negative and 50% positive reviews.\nWhy use separate training and test sets? Because you should never test a machine-\nlearning model on the same data that you used to train it! Just because a model per-\nforms well on its training data doesn’t mean it will perform well on data it has never\nseen; and what you care about is your model’s performance on new data (because you\nalready know the labels of your training data—obviously you don’t need your mod"}
{"text": "el\nto predict those). For instance, it’s possible that your model could end up merely mem-\norizing a mapping between your training samples and their targets, which would be\nuseless for the task of predicting targets for data the model has never seen before.\nWe’ll go over this point in much more detail in the next chapter.\nJust like the MNIST dataset, the IMDB dataset comes packaged with Keras. It has\nalready been preprocessed: the reviews (sequences of words) have been turned into\nsequences of i"}
{"text": "ntegers, where each integer stands for a specific word in a dictionary.\nThe following code will load the dataset (when you run it the first time, about\n80MB of data will be downloaded to your machine).\nListing3.1 Loading the IMDB dataset\nfrom keras.datasets import imdb\n(train_data, train_labels), (test_data, test_labels) = imdb.load_data(\nnum_words=10000)\nThe argument num_words=10000 means you’ll only keep the top 10,000 most fre-\nquently occurring words in the training data. Rare words will be "}
{"text": "discarded. This allows\nyou to work with vector data of manageable size.\nThe variables train_data and test_data are lists of reviews; each review is a list of\nword indices (encoding a sequence of words). train_labels and test_labels are\nlists of 0s and 1s, where 0 stands for negative and 1 stands for positive:\n>>> train_data[0]\n[1, 14, 22, 16, ... 178, 32]\n>>> train_labels[0]\n1\nLicensed to <null>\nClassifying movie reviews: a binary classification example 69\nBecause you’re restricting yourself to "}
{"text": "the top 10,000 most frequent words, no word\nindex will exceed 10,000:\n>>> max([max(sequence) for sequence in train_data])\n9999\nFor kicks, here’s how you can quickly decode one of these reviews back to English\nwords:\nword_index is a dictionary mapping\nword_index = imdb.get_word_index() words to an integer index.\nreverse_word_index = dict(\n[(value, key) for (key, value) in word_index.items()])\ndecoded_review = ' '.join(\n[reverse_word_index.get(i - 3, '?') for i in train_data[0]])\nReverses it, mapp"}
{"text": "ing\nDecodes the review. Note that the indices\ninteger indices to words\nare offset by 3 because 0, 1, and 2 are\nreserved indices for “padding,” “start of\nsequence,” and “unknown.”\n3.4.2 Preparing the data\nYou can’t feed lists of integers into a neural network. You have to turn your lists into\ntensors. There are two ways to do that:\n Pad your lists so that they all have the same length, turn them into an integer\ntensor of shape (samples, word_indices), and then use as the first layer in\nyour netw"}
{"text": "ork a layer capable of handling such integer tensors (the Embedding\nlayer, which we’ll cover in detail later in the book).\n One-hot encode your lists to turn them into vectors of 0s and 1s. This would\nmean, for instance, turning the sequence [3, 5] into a 10,000-dimensional vec-\ntor that would be all 0s except for indices 3 and 5, which would be 1s. Then you\ncould use as the first layer in your network a Dense layer, capable of handling\nfloating-point vector data.\nLet’s go with the latter solut"}
{"text": "ion to vectorize the data, which you’ll do manually for\nmaximum clarity.\nListing3.2 Encoding the integer sequences into a binary matrix\nimport numpy as np\nCreates an all-zero matrix\ndef vectorize_sequences(sequences, dimension=10000): of shape (len(sequences),\nresults = np.zeros((len(sequences), dimension)) dimension)\nfor i, sequence in enumerate(sequences):\nresults[i, sequence] = 1.\nSets specific indices\nreturn results\nof results[i] to 1s\nx_train = vectorize_sequences(train_data) Vectorized tra"}
{"text": "ining data\nx_test = vectorize_sequences(test_data) Vectorized test data\nLicensed to <null>\n70 CHAPTER 3 Getting started with neural networks\nHere’s what the samples look like now:\n>>> x_train[0]\narray([ 0., 1., 1., ..., 0., 0., 0.])\nYou should also vectorize your labels, which is straightforward:\ny_train = np.asarray(train_labels).astype('float32')\ny_test = np.asarray(test_labels).astype('float32')\nNow the data is ready to be fed into a neural network.\n3.4.3 Building your network\nThe input data "}
{"text": "is vectors, and the labels are scalars (1s and 0s): this is the easiest setup\nyou’ll ever encounter. A type of network that performs well on such a problem is\nasimple stack of fully connected (Dense) layers with relu activations: Dense(16,\nactivation='relu').\nThe argument being passed to each Dense layer (16) is the number of hidden\nunits of the layer. A hidden unit is a dimension in the representation space of the layer.\nYou may remember from chapter 2 that each such Dense layer with a relu act"}
{"text": "ivation\nimplements the following chain of tensor operations:\noutput = relu(dot(W, input) + b)\nHaving 16 hidden units means the weight matrix W will have shape (input_dimension,\n16): the dot product with W will project the input data onto a 16-dimensional represen-\ntation space (and then you’ll add the bias vector b and apply the relu operation). You\ncan intuitively understand the dimensionality of your representation space as “how\nmuch freedom you’re allowing the network to have when learning in"}
{"text": "ternal represen-\ntations.” Having more hidden units (a higher-dimensional representation space)\nallows your network to learn more-complex representations, but it makes the network\nmore computationally expensive and may lead to learning unwanted patterns (pat-\nterns that will improve performance on the training data but not on the test data).\nThere are two key architecture decisions to be made about such a stack of Dense layers:\n How many layers to use\n How many hidden units to choose for each "}
{"text": "layer\nIn chapter 4, you’ll learn formal principles to guide you in making these choices. For\nthe time being, you’ll have to trust me with the following architecture choice:\n Two intermediate layers with 16 hidden units each\n A third layer that will output the scalar prediction regarding the sentiment of\nthe current review\nThe intermediate layers will use relu as their activation function, and the final layer\nwill use a sigmoid activation so as to output a probability (a score between 0 and 1,\n"}
{"text": "Licensed to <null>\nClassifying movie reviews: a binary classification example 71\nindicating how likely the sample is to have the target “1”: how likely the review is to be\npositive). A relu (rectified linear unit) is a function meant to zero out negative values\n(see figure 3.4), whereas a sigmoid “squashes” arbitrary values into the [0, 1] interval\n(see figure 3.5), outputting something that can be interpreted as a probability.\nFigure 3.4 The rectified linear unit function\nFigure 3.5 The sigmoid"}
{"text": " function\nLicensed to <null>\n72 CHAPTER 3 Getting started with neural networks\nOutput\n(probability)\nDense (units=1)\nDense (units=16)\nDense (units=16)\nSequential\nInput\n(vectorized text) Figure 3.6 The three-layer network\nFigure 3.6 shows what the network looks like. And here’s the Keras implementation,\nsimilar to the MNIST example you saw previously.\nListing3.3 The model definition\nfrom keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmodel.add(layers.Dense(16, activation="}
{"text": "'relu', input_shape=(10000,)))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nWhat are activation functions, and why are they necessary?\nWithout an activation function like relu (also called a non-linearity), the Dense layer\nwould consist of two linear operations—a dot product and an addition:\noutput = dot(W, input) + b\nSo the layer could only learn linear transformations (affine transformations) of the\ninput data: the hypothesis space of the laye"}
{"text": "r would be the set of all possible linear\ntransformations of the input data into a 16-dimensional space. Such a hypothesis\nspace is too restricted and wouldn’t benefit from multiple layers of representations,\nbecause a deep stack of linear layers would still implement a linear operation: adding\nmore layers wouldn’t extend the hypothesis space.\nIn order to get access to a much richer hypothesis space that would benefit from\ndeep representations, you need a non-linearity, or activation function. r"}
{"text": "elu is the\nmost popular activation function in deep learning, but there are many other candi-\ndates, which all come with similarly strange names: prelu, elu, and so on.\nFinally, you need to choose a loss function and an optimizer. Because you’re facing a\nbinary classification problem and the output of your network is a probability (you end\nyour network with a single-unit layer with a sigmoid activation), it’s best to use the\nLicensed to <null>\nClassifying movie reviews: a binary classification e"}
{"text": "xample 73\nbinary_crossentropy loss. It isn’t the only viable choice: you could use, for instance,\nmean_squared_error. But crossentropy is usually the best choice when you’re dealing\nwith models that output probabilities. Crossentropy is a quantity from the field of Infor-\nmation Theory that measures the distance between probability distributions or, in this\ncase, between the ground-truth distribution and your predictions.\nHere’s the step where you configure the model with the rmsprop optimizer a"}
{"text": "nd\nthe binary_crossentropy loss function. Note that you’ll also monitor accuracy\nduring training.\nListing3.4 Compiling the model\nmodel.compile(optimizer='rmsprop',\nloss='binary_crossentropy',\nmetrics=['accuracy'])\nYou’re passing your optimizer, loss function, and metrics as strings, which is possible\nbecause rmsprop, binary_crossentropy, and accuracy are packaged as part of Keras.\nSometimes you may want to configure the parameters of your optimizer or pass a cus-\ntom loss function or metric func"}
{"text": "tion. The former can be done by passing an optimizer\nclass instance as the optimizer argument, as shown in listing 3.5; the latter can be\ndone by passing function objects as the loss and/or metrics arguments, as shown in\nlisting 3.6.\nListing3.5 Configuring the optimizer\nfrom keras import optimizers\nmodel.compile(optimizer=optimizers.RMSprop(lr=0.001),\nloss='binary_crossentropy',\nmetrics=['accuracy'])\nListing3.6 Using custom losses and metrics\nfrom keras import losses\nfrom keras import metrics\nmo"}
{"text": "del.compile(optimizer=optimizers.RMSprop(lr=0.001),\nloss=losses.binary_crossentropy,\nmetrics=[metrics.binary_accuracy])\n3.4.4 Validating your approach\nIn order to monitor during training the accuracy of the model on data it has never\nseen before, you’ll create a validation set by setting apart 10,000 samples from the\noriginal training data.\nListing3.7 Setting aside a validation set\nx_val = x_train[:10000]\npartial_x_train = x_train[10000:]\nLicensed to <null>\n74 CHAPTER 3 Getting started with neur"}
{"text": "al networks\ny_val = y_train[:10000]\npartial_y_train = y_train[10000:]\nYou’ll now train the model for 20 epochs (20 iterations over all samples in the\nx_train and y_train tensors), in mini-batches of 512 samples. At the same time,\nyou’ll monitor loss and accuracy on the 10,000 samples that you set apart. You do so by\npassing the validation data as the validation_data argument.\nListing3.8 Training your model\nmodel.compile(optimizer='rmsprop',\nloss='binary_crossentropy',\nmetrics=['acc'])\nhistory = "}
{"text": "model.fit(partial_x_train,\npartial_y_train,\nepochs=20,\nbatch_size=512,\nvalidation_data=(x_val, y_val))\nOn CPU, this will take less than 2 seconds per epoch—training is over in 20 seconds.\nAt the end of every epoch, there is a slight pause as the model computes its loss and\naccuracy on the 10,000 samples of the validation data.\nNote that the call to model.fit() returns a History object. This object has a mem-\nber history, which is a dictionary containing data about everything that happened\nduring"}
{"text": " training. Let’s look at it:\n>>> history_dict = history.history\n>>> history_dict.keys()\n[u'acc', u'loss', u'val_acc', u'val_loss']\nThe dictionary contains four entries: one per metric that was being monitored during\ntraining and during validation. In the following two listing, let’s use Matplotlib to plot\nthe training and validation loss side by side (see figure 3.7), as well as the training and\nvalidation accuracy (see figure 3.8). Note that your own results may vary slightly due to\na different"}
{"text": " random initialization of your network.\nListing3.9 Plotting the training and validation loss\nimport matplotlib.pyplot as plt\nhistory_dict = history.history\nloss_values = history_dict['loss']\nval_loss_values = history_dict['val_loss']\nepochs = range(1, len(acc) + 1)\n“bo” is for\nplt.plot(epochs, loss_values, 'bo', label='Training loss') “blue dot.”\nplt.plot(epochs, val_loss_values, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs') “b” is for “solid\nblue l"}
{"text": "ine.”\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\nLicensed to <null>\nClassifying movie reviews: a binary classification example 75\nFigure 3.7 Training and validation loss\nListing3.10 Plotting the training and validation accuracy\nplt.clf() Clears the figure\nacc_values = history_dict['acc']\nval_acc_values = history_dict['val_acc']\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs'"}
{"text": ")\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\nFigure 3.8 Training and validation accuracy\nLicensed to <null>\n76 CHAPTER 3 Getting started with neural networks\nAs you can see, the training loss decreases with every epoch, and the training accuracy\nincreases with every epoch. That’s what you would expect when running gradient-\ndescent optimization—the quantity you’re trying to minimize should be less with\nevery iteration. But that isn’t the case for the validation loss and accuracy: they seem to\npe"}
{"text": "ak at the fourth epoch. This is an example of what we warned against earlier: a\nmodel that performs better on the training data isn’t necessarily a model that will do\nbetter on data it has never seen before. In precise terms, what you’re seeing is overfit-\nting: after the second epoch, you’re overoptimizing on the training data, and you end\nup learning representations that are specific to the training data and don’t generalize\nto data outside of the training set.\nIn this case, to prevent overfit"}
{"text": "ting, you could stop training after three epochs. In\ngeneral, you can use a range of techniques to mitigate overfitting, which we’ll cover in\nchapter 4.\nLet’s train a new network from scratch for four epochs and then evaluate it on the\ntest data.\nListing3.11 Retraining a model from scratch\nmodel = models.Sequential()\nmodel.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(op"}
{"text": "timizer='rmsprop',\nloss='binary_crossentropy',\nmetrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=4, batch_size=512)\nresults = model.evaluate(x_test, y_test)\nThe final results are as follows:\n>>> results\n[0.2929924130630493, 0.88327999999999995]\nThis fairly naive approach achieves an accuracy of 88%. With state-of-the-art\napproaches, you should be able to get close to 95%.\n3.4.5 Using a trained network to generate predictions on new data\nAfter having trained a network, you’ll want to use i"}
{"text": "t in a practical setting. You can gen-\nerate the likelihood of reviews being positive by using the predict method:\n>>> model.predict(x_test)\narray([[ 0.98006207]\n[ 0.99758697]\n[ 0.99975556]\n...,\n[ 0.82167041]\n[ 0.02885115]\n[ 0.65371346]], dtype=float32)\nLicensed to <null>\nClassifying movie reviews: a binary classification example 77\nAs you can see, the network is confident for some samples (0.99 or more, or 0.01 or\nless) but less confident for others (0.6, 0.4).\n3.4.6 Further experiments\nThe fol"}
{"text": "lowing experiments will help convince you that the architecture choices you’ve\nmade are all fairly reasonable, although there’s still room for improvement:\n You used two hidden layers. Try using one or three hidden layers, and see how\ndoing so affects validation and test accuracy.\n Try using layers with more hidden units or fewer hidden units: 32 units, 64units,\nand so on.\n Try using the mse loss function instead of binary_crossentropy.\n Try using the tanh activation (an activation that was "}
{"text": "popular in the early days of\nneural networks) instead of relu.\n3.4.7 Wrapping up\nHere’s what you should take away from this example:\n You usually need to do quite a bit of preprocessing on your raw data in order to\nbe able to feed it—as tensors—into a neural network. Sequences of words can\nbe encoded as binary vectors, but there are other encoding options, too.\n Stacks of Dense layers with relu activations can solve a wide range of problems\n(including sentiment classification), and you’ll like"}
{"text": "ly use them frequently.\n In a binary classification problem (two output classes), your network should\nend with a Dense layer with one unit and a sigmoid activation: the output of\nyour network should be a scalar between 0 and 1, encoding a probability.\n With such a scalar sigmoid output on a binary classification problem, the loss\nfunction you should use is binary_crossentropy.\n The rmsprop optimizer is generally a good enough choice, whatever your prob-\nlem. That’s one less thing for you to w"}
{"text": "orry about.\n As they get better on their training data, neural networks eventually start over-\nfitting and end up obtaining increasingly worse results on data they’ve never\nseen before. Be sure to always monitor performance on data that is outside of\nthe training set.\nLicensed to <null>\n78 CHAPTER 3 Getting started with neural networks\n3.5 Classifying newswires:\na multiclass classification example\nIn the previous section, you saw how to classify vector inputs into two mutually exclu-\nsive class"}
{"text": "es using a densely connected neural network. But what happens when you\nhave more than two classes?\nIn this section, you’ll build a network to classify Reuters newswires into 46 mutually\nexclusive topics. Because you have many classes, this problem is an instance of multi-\nclass classification; and because each data point should be classified into only one cate-\ngory, the problem is more specifically an instance of single-label, multiclass classification.\nIf each data point could belong to multip"}
{"text": "le categories (in this case, topics), you’d be\nfacing a multilabel, multiclass classification problem.\n3.5.1 The Reuters dataset\nYou’ll work with the Reuters dataset, a set of short newswires and their topics, published\nby Reuters in 1986. It’s a simple, widely used toy dataset for text classification. There\nare 46 different topics; some topics are more represented than others, but each topic\nhas at least 10 examples in the training set.\nLike IMDB and MNIST, the Reuters dataset comes packaged as"}
{"text": " part of Keras. Let’s\ntake a look.\nListing3.12 Loading the Reuters dataset\nfrom keras.datasets import reuters\n(train_data, train_labels), (test_data, test_labels) = reuters.load_data(\nnum_words=10000)\nAs with the IMDB dataset, the argument num_words=10000 restricts the data to the\n10,000 most frequently occurring words found in the data.\nYou have 8,982 training examples and 2,246 test examples:\n>>> len(train_data)\n8982\n>>> len(test_data)\n2246\nAs with the IMDB reviews, each example is a list of i"}
{"text": "ntegers (word indices):\n>>> train_data[10]\n[1, 245, 273, 207, 156, 53, 74, 160, 26, 14, 46, 296, 26, 39, 74, 2979,\n3554, 14, 46, 4689, 4329, 86, 61, 3499, 4795, 14, 61, 451, 4329, 17, 12]\nHere’s how you can decode it back to words, in case you’re curious.\nListing3.13 Decoding newswires back to text\nword_index = reuters.get_word_index()\nreverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\ndecoded_newswire = ' '.join([reverse_word_index.get(i - 3, '?') for i in\ntrain_da"}
{"text": "ta[0]])\nNote that the indices are offset by 3 because 0, 1, and 2 are reserved\nindices for “padding,” “start of sequence,” and “unknown.”\nLicensed to <null>\nClassifying newswires: a multiclass classification example 79\nThe label associated with an example is an integer between 0 and 45—a topic index:\n>>> train_labels[10]\n3\n3.5.2 Preparing the data\nYou can vectorize the data with the exact same code as in the previous example.\nListing3.14 Encoding the data\nimport numpy as np\ndef vectorize_sequenc"}
{"text": "es(sequences, dimension=10000):\nresults = np.zeros((len(sequences), dimension))\nfor i, sequence in enumerate(sequences):\nresults[i, sequence] = 1.\nreturn results\nVectorized training data\nx_train = vectorize_sequences(train_data)\nx_test = vectorize_sequences(test_data) Vectorized test data\nTo vectorize the labels, there are two possibilities: you can cast the label list as an inte-\nger tensor, or you can use one-hot encoding. One-hot encoding is a widely used for-\nmat for categorical data, also c"}
{"text": "alled categorical encoding. For a more detailed\nexplanation of one-hot encoding, see section 6.1. In this case, one-hot encoding of\nthe labels consists of embedding each label as an all-zero vector with a 1 in the place of\nthe label index. Here’s an example:\ndef to_one_hot(labels, dimension=46):\nresults = np.zeros((len(labels), dimension))\nfor i, label in enumerate(labels):\nresults[i, label] = 1.\nreturn results\nVectorized training labels\none_hot_train_labels = to_one_hot(train_labels)\none_hot_te"}
{"text": "st_labels = to_one_hot(test_labels) Vectorized test labels\nNote that there is a built-in way to do this in Keras, which you’ve already seen in action\nin the MNIST example:\nfrom keras.utils.np_utils import to_categorical\none_hot_train_labels = to_categorical(train_labels)\none_hot_test_labels = to_categorical(test_labels)\n3.5.3 Building your network\nThis topic-classification problem looks similar to the previous movie-review classifica-\ntion problem: in both cases, you’re trying to classify short "}
{"text": "snippets of text. But there is\na new constraint here: the number of output classes has gone from 2 to 46. The\ndimensionality of the output space is much larger.\nIn a stack of Dense layers like that you’ve been using, each layer can only access infor-\nmation present in the output of the previous layer. If one layer drops some information\nLicensed to <null>\n80 CHAPTER 3 Getting started with neural networks\nrelevant to the classification problem, this information can never be recovered by later\nlay"}
{"text": "ers: each layer can potentially become an information bottleneck. In the previous\nexample, you used 16-dimensional intermediate layers, but a 16-dimensional space may\nbe too limited to learn to separate 46 different classes: such small layers may act as infor-\nmation bottlenecks, permanently dropping relevant information.\nFor this reason you’ll use larger layers. Let’s go with 64 units.\nListing3.15 Model definition\nfrom keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmod"}
{"text": "el.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(46, activation='softmax'))\nThere are two other things you should note about this architecture:\n You end the network with a Dense layer of size 46. This means for each input\nsample, the network will output a 46-dimensional vector. Each entry in this vec-\ntor (each dimension) will encode a different output class.\n The last layer uses a softmax activation. You sa"}
{"text": "w this pattern in the MNIST\nexample. It means the network will output a probability distribution over the 46\ndifferent output classes—for every input sample, the network will produce a 46-\ndimensional output vector, where output[i] is the probability that the sample\nbelongs to class i. The 46 scores will sum to 1.\nThe best loss function to use in this case is categorical_crossentropy. It measures\nthe distance between two probability distributions: here, between the probability dis-\ntribution out"}
{"text": "put by the network and the true distribution of the labels. By minimizing\nthe distance between these two distributions, you train the network to output some-\nthing as close as possible to the true labels.\nListing3.16 Compiling the model\nmodel.compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\n3.5.4 Validating your approach\nLet’s set apart 1,000 samples in the training data to use as a validation set.\nListing3.17 Setting aside a validation set\nx_val = x_train[:100"}
{"text": "0]\npartial_x_train = x_train[1000:]\ny_val = one_hot_train_labels[:1000]\npartial_y_train = one_hot_train_labels[1000:]\nLicensed to <null>\nClassifying newswires: a multiclass classification example 81\nNow, let’s train the network for 20 epochs.\nListing3.18 Training the model\nhistory = model.fit(partial_x_train,\npartial_y_train,\nepochs=20,\nbatch_size=512,\nvalidation_data=(x_val, y_val))\nAnd finally, let’s display its loss and accuracy curves (see figures 3.9 and 3.10).\nListing3.19 Plotting the trai"}
{"text": "ning and validation loss\nimport matplotlib.pyplot as plt\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\nListing3.20 Plotting the training and validation accuracy\nplt.clf() Clears the figure\nacc = history.history['acc']\nval_acc = "}
{"text": "history.history['val_acc']\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\nFigure 3.9 Training and validation loss\nLicensed to <null>\n82 CHAPTER 3 Getting started with neural networks\nFigure 3.10 Training and\nvalidation accuracy\nThe network begins to overfit after nine epochs. Let’s train a new network from\nscratch for nine epochs "}
{"text": "and then evaluate it on the test set.\nListing3.21 Retraining a model from scratch\nmodel = models.Sequential()\nmodel.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(46, activation='softmax'))\nmodel.compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\nmodel.fit(partial_x_train,\npartial_y_train,\nepochs=9,\nbatch_size=512,\nvalidation_data=(x_val, y_val))\nresults = model.evaluate(x_test,"}
{"text": " one_hot_test_labels)\nHere are the final results:\n>>> results\n[0.9565213431445807, 0.79697239536954589]\nThis approach reaches an accuracy of ~80%. With a balanced binary classification\nproblem, the accuracy reached by a purely random classifier would be 50%. But in\nthis case it’s closer to 19%, so the results seem pretty good, at least when compared to\na random baseline:\n>>> import copy\n>>> test_labels_copy = copy.copy(test_labels)\n>>> np.random.shuffle(test_labels_copy)\n>>> hits_array = np.arra"}
{"text": "y(test_labels) == np.array(test_labels_copy)\n>>> float(np.sum(hits_array)) / len(test_labels)\n0.18655387355298308\nLicensed to <null>\nClassifying newswires: a multiclass classification example 83\n3.5.5 Generating predictions on new data\nYou can verify that the predict method of the model instance returns a probability\ndistribution over all 46 topics. Let’s generate topic predictions for all of the test data.\nListing3.22 Generating predictions for new data\npredictions = model.predict(x_test)\nEach "}
{"text": "entry in predictions is a vector of length 46:\n>>> predictions[0].shape\n(46,)\nThe coefficients in this vector sum to 1:\n>>> np.sum(predictions[0])\n1.0\nThe largest entry is the predicted class—the class with the highest probability:\n>>> np.argmax(predictions[0])\n4\n3.5.6 A different way to handle the labels and the loss\nWe mentioned earlier that another way to encode the labels would be to cast them as\nan integer tensor, like this:\ny_train = np.array(train_labels)\ny_test = np.array(test_labels)\nTh"}
{"text": "e only thing this approach would change is the choice of the loss function. The loss\nfunction used in listing 3.21, categorical_crossentropy, expects the labels to follow\na categorical encoding. With integer labels, you should use sparse_categorical_\ncrossentropy:\nmodel.compile(optimizer='rmsprop',\nloss='sparse_categorical_crossentropy',\nmetrics=['acc'])\nThis new loss function is still mathematically the same as categorical_crossentropy;\nit just has a different interface.\n3.5.7 The importance of"}
{"text": " having sufficiently large intermediate layers\nWe mentioned earlier that because the final outputs are 46-dimensional, you should\navoid intermediate layers with many fewer than 46 hidden units. Now let’s see what\nhappens when you introduce an information bottleneck by having intermediate layers\nthat are significantly less than 46-dimensional: for example, 4-dimensional.\nLicensed to <null>\n84 CHAPTER 3 Getting started with neural networks\nListing3.23 A model with an information bottleneck\nmodel ="}
{"text": " models.Sequential()\nmodel.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(4, activation='relu'))\nmodel.add(layers.Dense(46, activation='softmax'))\nmodel.compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\nmodel.fit(partial_x_train,\npartial_y_train,\nepochs=20,\nbatch_size=128,\nvalidation_data=(x_val, y_val))\nThe network now peaks at ~71% validation accuracy, an 8% absolute drop. This drop\nis mostly due to the fact that you’re t"}
{"text": "rying to compress a lot of information (enough\ninformation to recover the separation hyperplanes of 46 classes) into an intermediate\nspace that is too low-dimensional. The network is able to cram most of the necessary\ninformation into these eight-dimensional representations, but not all of it.\n3.5.8 Further experiments\n Try using larger or smaller layers: 32 units, 128 units, and so on.\n You used two hidden layers. Now try using a single hidden layer, or three hid-\nden layers.\n3.5.9 Wrapping u"}
{"text": "p\nHere’s what you should take away from this example:\n If you’re trying to classify data points among N classes, your network should end\nwith a Dense layer of size N.\n In a single-label, multiclass classification problem, your network should end\nwith a softmax activation so that it will output a probability distribution over the\nN output classes.\n Categorical crossentropy is almost always the loss function you should use for\nsuch problems. It minimizes the distance between the probability dis"}
{"text": "tributions\noutput by the network and the true distribution of the targets.\n There are two ways to handle labels in multiclass classification:\n– Encoding the labels via categorical encoding (also known as one-hot encod-\ning) and using categorical_crossentropy as a loss function\n– Encoding the labels as integers and using the sparse_categorical_crossentropy\nloss function\n If you need to classify data into a large number of categories, you should avoid\ncreating information bottlenecks in your net"}
{"text": "work due to intermediate layers\nthat are too small.\nLicensed to <null>\nPredicting house prices: a regression example 85\n3.6 Predicting house prices: a regression example\nThe two previous examples were considered classification problems, where the goal\nwas to predict a single discrete label of an input data point. Another common type of\nmachine-learning problem is regression, which consists of predicting a continuous\nvalue instead of a discrete label: for instance, predicting the temperature tomo"}
{"text": "rrow,\ngiven meteorological data; or predicting the time that a software project will take to\ncomplete, given its specifications.\nNOTE Don’t confuse regression and the algorithm logistic regression. Con-\nfusingly, logistic regression isn’t a regression algorithm—it’s a classification\nalgorithm.\n3.6.1 The Boston Housing Price dataset\nYou’ll attempt to predict the median price of homes in a given Boston suburb in the\nmid-1970s, given data points about the suburb at the time, such as the crime rate,"}
{"text": " the\nlocal property tax rate, and so on. The dataset you’ll use has an interesting difference\nfrom the two previous examples. It has relatively few data points: only 506, split\nbetween 404 training samples and 102 test samples. And each feature in the input data\n(for example, the crime rate) has a different scale. For instance, some values are pro-\nportions, which take values between 0 and 1; others take values between 1 and 12, oth-\ners between 0 and 100, and so on.\nListing3.24 Loading the Bost"}
{"text": "on housing dataset\nfrom keras.datasets import boston_housing\n(train_data, train_targets), (test_data, test_targets) =\n➥boston_housing.load_data()\nLet’s look at the data:\n>>> train_data.shape\n(404, 13)\n>>> test_data.shape\n(102, 13)\nAs you can see, you have 404 training samples and 102 test samples, each with 13\nnumerical features, such as per capita crime rate, average number of rooms per dwell-\ning, accessibility to highways, and so on.\nThe targets are the median values of owner-occupied homes, "}
{"text": "in thousands of\ndollars:\n>>> train_targets\n[ 15.2, 42.3, 50. ... 19.4, 19.4, 29.1]\nThe prices are typically between $10,000 and $50,000. If that sounds cheap, remem-\nber that this was the mid-1970s, and these prices aren’t adjusted for inflation.\nLicensed to <null>\n86 CHAPTER 3 Getting started with neural networks\n3.6.2 Preparing the data\nIt would be problematic to feed into a neural network values that all take wildly differ-\nent ranges. The network might be able to automatically adapt to such "}
{"text": "heterogeneous\ndata, but it would definitely make learning more difficult. A widespread best practice\nto deal with such data is to do feature-wise normalization: for each feature in the input\ndata (a column in the input data matrix), you subtract the mean of the feature and\ndivide by the standard deviation, so that the feature is centered around 0 and has a\nunit standard deviation. This is easily done in Numpy.\nListing3.25 Normalizing the data\nmean = train_data.mean(axis=0)\ntrain_data -= mean\nstd"}
{"text": " = train_data.std(axis=0)\ntrain_data /= std\ntest_data -= mean\ntest_data /= std\nNote that the quantities used for normalizing the test data are computed using the\ntraining data. You should never use in your workflow any quantity computed on the\ntest data, even for something as simple as data normalization.\n3.6.3 Building your network\nBecause so few samples are available, you’ll use a very small network with two hidden\nlayers, each with 64 units. In general, the less training data you have, the wo"}
{"text": "rse overfit-\nting will be, and using a small network is one way to mitigate overfitting.\nListing3.26 Model definition\nfrom keras import models\nBecause you’ll need to instantiate\nfrom keras import layers\nthe same model multiple times, you\ndef build_model(): use a function to construct it.\nmodel = models.Sequential()\nmodel.add(layers.Dense(64, activation='relu',\ninput_shape=(train_data.shape[1],)))\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer='r"}
{"text": "msprop', loss='mse', metrics=['mae'])\nreturn model\nThe network ends with a single unit and no activation (it will be a linear layer). This is\na typical setup for scalar regression (a regression where you’re trying to predict a single\ncontinuous value). Applying an activation function would constrain the range the out-\nput can take; for instance, if you applied a sigmoid activation function to the last layer,\nthe network could only learn to predict values between 0 and 1. Here, because the last\nl"}
{"text": "ayer is purely linear, the network is free to learn to predict values in any range.\nLicensed to <null>\nPredicting house prices: a regression example 87\nNote that you compile the network with the mse loss function—mean squared error,\nthe square of the difference between the predictions and the targets. This is a widely\nused loss function for regression problems.\nYou’re also monitoring a new metric during training: mean absolute error (MAE). It’s\nthe absolute value of the difference between the pr"}
{"text": "edictions and the targets. For\ninstance, an MAE of 0.5 on this problem would mean your predictions are off by $500\non average.\n3.6.4 Validating your approach using K-fold validation\nTo evaluate your network while you keep adjusting its parameters (such as the number\nof epochs used for training), you could split the data into a training set and a valida-\ntion set, as you did in the previous examples. But because you have so few data points,\nthe validation set would end up being very small (for in"}
{"text": "stance, about 100 examples).\nAs a consequence, the validation scores might change a lot depending on which data\npoints you chose to use for validation and which you chose for training: the validation\nscores might have a high variance with regard to the validation split. This would pre-\nvent you from reliably evaluating your model.\nThe best practice in such situations is to use K-fold cross-validation (see figure 3.11).\nIt consists of splitting the available data into K partitions (typically K = "}
{"text": "4 or 5), instanti-\nating K identical models, and training each one on K – 1 partitions while evaluating on\nthe remaining partition. The validation score for the model used is then the average of\nthe K validation scores obtained. In terms of code, this is straightforward.\nData split into 3 partitions\nValidation\nFold 1 Validation Training Training\nscore #1\nValidation Final score:\nFold 2 Validation Validation Training\nscore #2 average\nValidation\nFold 3 Validation Training Validation\nscore #3\nFigure"}
{"text": " 3.11 3-fold cross-validation\nListing3.27 K-fold validation\nimport numpy as np\nk = 4\nnum_val_samples = len(train_data) // k\nnum_epochs = 100\nall_scores = []\nLicensed to <null>\n88 CHAPTER 3 Getting started with neural networks\nPrepares the validation data: Prepares the training data:\ndata from partition #k data from all other partitions\nfor i in range(k):\nprint('processing fold #', i)\nval_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\nval_targets = train_targets[i * num_val_sam"}
{"text": "ples: (i + 1) * num_val_samples]\npartial_train_data = np.concatenate(\n[train_data[:i * num_val_samples],\ntrain_data[(i + 1) * num_val_samples:]], Builds the Keras model\naxis=0) (already compiled)\npartial_train_targets = np.concatenate(\n[train_targets[:i * num_val_samples], Trains the model\ntrain_targets[(i + 1) * num_val_samples:]], (in silent mode,\naxis=0) verbose = 0)\nmodel = build_model()\nmodel.fit(partial_train_data, partial_train_targets,\nepochs=num_epochs, batch_size=1, verbose=0)\nval_mse,"}
{"text": " val_mae = model.evaluate(val_data, val_targets, verbose=0)\nall_scores.append(val_mae)\nEvaluates the model\non the validation data\nRunning this with num_epochs = 100 yields the following results:\n>>> all_scores\n[2.588258957792037, 3.1289568449719116, 3.1856116051248984, 3.0763342615401386]\n>>> np.mean(all_scores)\n2.9947904173572462\nThe different runs do indeed show rather different validation scores, from 2.6 to 3.2.\nThe average (3.0) is a much more reliable metric than any single score—that’s th"}
{"text": "e\nentire point of K-fold cross-validation. In this case, you’re off by $3,000 on average,\nwhich is significant considering that the prices range from $10,000 to $50,000.\nLet’s try training the network a bit longer: 500 epochs. To keep a record of how\nwell the model does at each epoch, you’ll modify the training loop to save the per-\nepoch validation score log.\nListing3.28 Saving the validation logs at each fold\nnum_epochs = 500\nPrepares the validation data:\nall_mae_histories = []\ndata from parti"}
{"text": "tion #k\nfor i in range(k):\nprint('processing fold #', i)\nval_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\nval_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\npartial_train_data = np.concatenate(\nPrepares the training\n[train_data[:i * num_val_samples],\ndata: data from all\ntrain_data[(i + 1) * num_val_samples:]],\nother partitions\naxis=0)\nLicensed to <null>\nPredicting house prices: a regression example 89\npartial_train_targets = np.concatenate(\n[train_ta"}
{"text": "rgets[:i * num_val_samples], Builds the Keras model\ntrain_targets[(i + 1) * num_val_samples:]], (already compiled)\naxis=0)\nmodel = build_model()\nhistory = model.fit(partial_train_data, partial_train_targets,\nvalidation_data=(val_data, val_targets),\nepochs=num_epochs, batch_size=1, verbose=0)\nmae_history = history.history['val_mean_absolute_error']\nall_mae_histories.append(mae_history) Trains the model\n(in silent mode, verbose=0)\nYou can then compute the average of the per-epoch MAE scores for al"}
{"text": "l folds.\nListing3.29 Building the history of successive mean K-fold validation scores\naverage_mae_history = [\nnp.mean([x[i] for x in all_mae_histories]) for i in range(num_epochs)]\nLet’s plot this; see figure 3.12.\nListing3.30 Plotting validation scores\nimport matplotlib.pyplot as plt\nplt.plot(range(1, len(average_mae_history) + 1), average_mae_history)\nplt.xlabel('Epochs')\nplt.ylabel('Validation MAE')\nplt.show()\nFigure 3.12 Validation\nMAE by epoch\nIt may be a little difficult to see the plot, d"}
{"text": "ue to scaling issues and relatively high vari-\nance. Let’s do the following:\n Omit the first 10 data points, which are on a different scale than the rest of the curve.\n Replace each point with an exponential moving average of the previous points,\nto obtain a smooth curve.\nLicensed to <null>\n90 CHAPTER 3 Getting started with neural networks\nThe result is shown in figure 3.13.\nListing3.31 Plotting validation scores, excluding the first 10 data points\ndef smooth_curve(points, factor=0.9):\nsmoothe"}
{"text": "d_points = []\nfor point in points:\nif smoothed_points:\nprevious = smoothed_points[-1]\nsmoothed_points.append(previous * factor + point * (1 - factor))\nelse:\nsmoothed_points.append(point)\nreturn smoothed_points\nsmooth_mae_history = smooth_curve(average_mae_history[10:])\nplt.plot(range(1, len(smooth_mae_history) + 1), smooth_mae_history)\nplt.xlabel('Epochs')\nplt.ylabel('Validation MAE')\nplt.show()\nFigure 3.13 Validation MAE\nby epoch, excluding the first\n10 data points\nAccording to this plot, valid"}
{"text": "ation MAE stops improving significantly after 80 epochs.\nPast that point, you start overfitting.\nOnce you’re finished tuning other parameters of the model (in addition to the\nnumber of epochs, you could also adjust the size of the hidden layers), you can train a\nfinal production model on all of the training data, with the best parameters, and then\nlook at its performance on the test data.\nListing3.32 Training the final model\nGets a fresh, compiled model\nmodel = build_model() Trains it on the ent"}
{"text": "irety of the data\nmodel.fit(train_data, train_targets,\nepochs=80, batch_size=16, verbose=0)\ntest_mse_score, test_mae_score = model.evaluate(test_data, test_targets)\nLicensed to <null>\nPredicting house prices: a regression example 91\nHere’s the final result:\n>>> test_mae_score\n2.5532484335057877\nYou’re still off by about $2,550.\n3.6.5 Wrapping up\nHere’s what you should take away from this example:\n Regression is done using different loss functions than what we used for classifi-\ncation. Mean squ"}
{"text": "ared error (MSE) is a loss function commonly used for regres-\nsion.\n Similarly, evaluation metrics to be used for regression differ from those used for\nclassification; naturally, the concept of accuracy doesn’t apply for regression. A\ncommon regression metric is mean absolute error (MAE).\n When features in the input data have values in different ranges, each feature\nshould be scaled independently as a preprocessing step.\n When there is little data available, using K-fold validation is a great"}
{"text": " way to reli-\nably evaluate a model.\n When little training data is available, it’s preferable to use a small network with\nfew hidden layers (typically only one or two), in order to avoid severe overfitting.\nLicensed to <null>\n92 CHAPTER 3 Getting started with neural networks\nChapter summary\n You’re now able to handle the most common kinds of machine-learning\ntasks on vector data: binary classification, multiclass classification, and sca-\nlar regression. The “Wrapping up” sections earlier in th"}
{"text": "e chapter summa-\nrize the important points you’ve learned regarding these types of tasks.\n You’ll usually need to preprocess raw data before feeding it into a neural\nnetwork.\n When your data has features with different ranges, scale each feature\nindependently as part of preprocessing.\n As training progresses, neural networks eventually begin to overfit and\nobtain worse results on never-before-seen data.\n If you don’t have much training data, use a small network with only one or\ntwo hidden la"}
{"text": "yers, to avoid severe overfitting.\n If your data is divided into many categories, you may cause information\nbottlenecks if you make the intermediate layers too small.\n Regression uses different loss functions and different evaluation metrics\nthan classification.\n When you’re working with little data, K-fold validation can help reliably\nevaluate your model.\nLicensed to <null>\nFundamentals of\nmachine learning\nThis chapter covers\n Forms of machine learning beyond classification\nand regression\n"}
{"text": " Formal evaluation procedures for machine-\nlearning models\n Preparing data for deep learning\n Feature engineering\n Tackling overfitting\n The universal workflow for approaching machine-\nlearning problems\nAfter the three practical examples in chapter 3, you should be starting to feel famil-\niar with how to approach classification and regression problems using neural net-\nworks, and you’ve witnessed the central problem of machine learning: overfitting.\nThis chapter will formalize some of your n"}
{"text": "ew intuition into a solid conceptual\nframework for attacking and solving deep-learning problems. We’ll consolidate all\nof these concepts—model evaluation, data preprocessing and feature engineering,\nand tackling overfitting—into a detailed seven-step workflow for tackling any\nmachine-learning task.\n93\nLicensed to <null>\n94 CHAPTER 4 Fundamentals of machine learning\n4.1 Four branches of machine learning\nIn our previous examples, you’ve become familiar with three specific types of\nmachine-learning"}
{"text": " problems: binary classification, multiclass classification, and scalar\nregression. All three are instances of supervised learning, where the goal is to learn the\nrelationship between training inputs and training targets.\nSupervised learning is just the tip of the iceberg—machine learning is a vast field\nwith a complex subfield taxonomy. Machine-learning algorithms generally fall into\nfour broad categories, described in the following sections.\n4.1.1 Supervised learning\nThis is by far the most co"}
{"text": "mmon case. It consists of learning to map input data to\nknown targets (also called annotations), given a set of examples (often annotated by\nhumans). All four examples you’ve encountered in this book so far were canonical\nexamples of supervised learning. Generally, almost all applications of deep learning\nthat are in the spotlight these days belong in this category, such as optical character\nrecognition, speech recognition, image classification, and language translation.\nAlthough supervised lear"}
{"text": "ning mostly consists of classification and regression, there\nare more exotic variants as well, including the following (with examples):\n Sequence generation—Given a picture, predict a caption describing it. Sequence\ngeneration can sometimes be reformulated as a series of classification problems\n(such as repeatedly predicting a word or token in a sequence).\n Syntax tree prediction—Given a sentence, predict its decomposition into a syntax\ntree.\n Object detection—Given a picture, draw a bounding"}
{"text": " box around certain objects\ninside the picture. This can also be expressed as a classification problem (given\nmany candidate bounding boxes, classify the contents of each one) or as a joint\nclassification and regression problem, where the bounding-box coordinates are\npredicted via vector regression.\n Image segmentation—Given a picture, draw a pixel-level mask on a specific object.\n4.1.2 Unsupervised learning\nThis branch of machine learning consists of finding interesting transformations of the\n"}
{"text": "input data without the help of any targets, for the purposes of data visualization, data\ncompression, or data denoising, or to better understand the correlations present in\nthe data at hand. Unsupervised learning is the bread and butter of data analytics, and\nit’s often a necessary step in better understanding a dataset before attempting to solve\na supervised-learning problem. Dimensionality reduction and clustering are well-known\ncategories of unsupervised learning.\n4.1.3 Self-supervised learni"}
{"text": "ng\nThis is a specific instance of supervised learning, but it’s different enough that it\ndeserves its own category. Self-supervised learning is supervised learning without\nLicensed to <null>\nFour branches of machine learning 95\nhuman-annotated labels—you can think of it as supervised learning without any\nhumans in the loop. There are still labels involved (because the learning has to be\nsupervised by something), but they’re generated from the input data, typically using a\nheuristic algorithm.\nFo"}
{"text": "r instance, autoencoders are a well-known instance of self-supervised learning,\nwhere the generated targets are the input, unmodified. In the same way, trying to pre-\ndict the next frame in a video, given past frames, or the next word in a text, given previ-\nous words, are instances of self-supervised learning (temporally supervised learning, in this\ncase: supervision comes from future input data). Note that the distinction between\nsupervised, self-supervised, and unsupervised learning can be bl"}
{"text": "urry sometimes—these\ncategories are more of a continuum without solid borders. Self-supervised learning can\nbe reinterpreted as either supervised or unsupervised learning, depending on whether\nyou pay attention to the learning mechanism or to the context of its application.\nNOTE In this book, we’ll focus specifically on supervised learning, because\nit’s by far the dominant form of deep learning today, with a wide range of\nindustry applications. We’ll also take a briefer look at self-supervised l"}
{"text": "earning\nin later chapters.\n4.1.4 Reinforcement learning\nLong overlooked, this branch of machine learning recently started to get a lot of\nattention after Google DeepMind successfully applied it to learning to play Atari\ngames (and, later, learning to play Go at the highest level). In reinforcement learning,\nan agent receives information about its environment and learns to choose actions that\nwill maximize some reward. For instance, a neural network that “looks” at a video-\ngame screen and output"}
{"text": "s game actions in order to maximize its score can be trained\nvia reinforcement learning.\nCurrently, reinforcement learning is mostly a research area and hasn’t yet had sig-\nnificant practical successes beyond games. In time, however, we expect to see rein-\nforcement learning take over an increasingly large range of real-world applications:\nself-driving cars, robotics, resource management, education, and so on. It’s an idea\nwhose time has come, or will come soon.\nClassification and regression glo"}
{"text": "ssary\nClassification and regression involve many specialized terms. You’ve come across\nsome of them in earlier examples, and you’ll see more of them in future chapters.\nThey have precise, machine-learning-specific definitions, and you should be familiar\nwith them:\n Sample or input—One data point that goes into your model.\n Prediction or output—What comes out of your model.\n Target—The truth. What your model should ideally have predicted, according\nto an external source of data.\nLicensed to <n"}
{"text": "ull>\n96 CHAPTER 4 Fundamentals of machine learning\n(continued)\n Prediction error or loss value—A measure of the distance between your\nmodel’s prediction and the target.\n Classes—A set of possible labels to choose from in a classification problem.\nFor example, when classifying cat and dog pictures, “dog” and “cat” are the\ntwo classes.\n Label—A specific instance of a class annotation in a classification problem.\nFor instance, if picture #1234 is annotated as containing the class “dog,”\nthen “do"}
{"text": "g” is a label of picture #1234.\n Ground-truth or annotations—All targets for a dataset, typically collected by\nhumans.\n Binary classification—A classification task where each input sample should\nbe categorized into two exclusive categories.\n Multiclass classification—A classification task where each input sample\nshould be categorized into more than two categories: for instance, classifying\nhandwritten digits.\n Multilabel classification—A classification task where each input sample can\nbe ass"}
{"text": "igned multiple labels. For instance, a given image may contain both a\ncat and a dog and should be annotated both with the “cat” label and the\n“dog” label. The number of labels per image is usually variable.\n Scalar regression—A task where the target is a continuous scalar value. Pre-\ndicting house prices is a good example: the different target prices form a con-\ntinuous space.\n Vector regression—A task where the target is a set of continuous values: for\nexample, a continuous vector. If you’re "}
{"text": "doing regression against multiple val-\nues (such as the coordinates of a bounding box in an image), then you’re\ndoing vector regression.\n Mini-batch or batch—A small set of samples (typically between 8 and 128)\nthat are processed simultaneously by the model. The number of samples is\noften a power of 2, to facilitate memory allocation on GPU. When training, a\nmini-batch is used to compute a single gradient-descent update applied to\nthe weights of the model.\nLicensed to <null>\nEvaluating machine-"}
{"text": "learning models 97\n4.2 Evaluating machine-learning models\nIn the three examples presented in chapter 3, we split the data into a training set, a\nvalidation set, and a test set. The reason not to evaluate the models on the same data\nthey were trained on quickly became evident: after just a few epochs, all three models\nbegan to overfit. That is, their performance on never-before-seen data started stalling\n(or worsening) compared to their performance on the training data—which always\nimproves as tr"}
{"text": "aining progresses.\nIn machine learning, the goal is to achieve models that generalize—that perform\nwell on never-before-seen data—and overfitting is the central obstacle. You can only\ncontrol that which you can observe, so it’s crucial to be able to reliably measure the\ngeneralization power of your model. The following sections look at strategies for miti-\ngating overfitting and maximizing generalization. In this section, we’ll focus on how\nto measure generalization: how to evaluate machine-lear"}
{"text": "ning models.\n4.2.1 Training, validation, and test sets\nEvaluating a model always boils down to splitting the available data into three sets:\ntraining, validation, and test. You train on the training data and evaluate your model\non the validation data. Once your model is ready for prime time, you test it one final\ntime on the test data.\nYou may ask, why not have two sets: a training set and a test set? You’d train on the\ntraining data and evaluate on the test data. Much simpler!\nThe reason is tha"}
{"text": "t developing a model always involves tuning its configuration: for\nexample, choosing the number of layers or the size of the layers (called the hyper-\nparameters of the model, to distinguish them from the parameters, which are the net-\nwork’s weights). You do this tuning by using as a feedback signal the performance of\nthe model on the validation data. In essence, this tuning is a form of learning: a search\nfor a good configuration in some parameter space. As a result, tuning the configura-\ntion"}
{"text": " of the model based on its performance on the validation set can quickly result in\noverfitting to the validation set, even though your model is never directly trained on it.\nCentral to this phenomenon is the notion of information leaks. Every time you tune\na hyperparameter of your model based on the model’s performance on the validation\nset, some information about the validation data leaks into the model. If you do this\nonly once, for one parameter, then very few bits of information will leak, a"}
{"text": "nd your val-\nidation set will remain reliable to evaluate the model. But if you repeat this many\ntimes—running one experiment, evaluating on the validation set, and modifying your\nmodel as a result—then you’ll leak an increasingly significant amount of information\nabout the validation set into the model.\nAt the end of the day, you’ll end up with a model that performs artificially well on\nthe validation data, because that’s what you optimized it for. You care about perfor-\nmance on completely new"}
{"text": " data, not the validation data, so you need to use a com-\npletely different, never-before-seen dataset to evaluate the model: the test dataset. Your\nmodel shouldn’t have had access to any information about the test set, even indirectly.\nLicensed to <null>\n98 CHAPTER 4 Fundamentals of machine learning\nIf anything about the model has been tuned based on test set performance, then your\nmeasure of generalization will be flawed.\nSplitting your data into training, validation, and test sets may seem st"}
{"text": "raightforward,\nbut there are a few advanced ways to do it that can come in handy when little data is\navailable. Let’s review three classic evaluation recipes: simple hold-out validation, K-\nfold validation, and iterated K-fold validation with shuffling.\nSIMPLE HOLD-OUT VALIDATION\nSet apart some fraction of your data as your test set. Train on the remaining data, and\nevaluate on the test set. As you saw in the previous sections, in order to prevent infor-\nmation leaks, you shouldn’t tune your mod"}
{"text": "el based on the test set, and therefore you\nshould also reserve a validation set.\nSchematically, hold-out validation looks like figure 4.1. The following listing shows\na simple implementation.\nTotal available labeled data\nHeld-out\nTraining set validation Figure 4.1 Simple hold-\nset out validation split\nTrain on this Evaluate\non this\nListing4.1 Hold-out validation\nnum_validation_samples = 10000\nShuffling the data is\nnp.random.shuffle(data) usually appropriate.\nDefines the\nvalidation_data = data[:"}
{"text": "num_validation_samples] validation set\ndata = data[num_validation_samples:]\nDefines the training set\ntraining_data = data[:]\nmodel = get_model() Trains a model on the training\nmodel.train(training_data) data, and evaluates it on the\nvalidation_score = model.evaluate(validation_data) validation data\n# At this point you can tune your model,\n# retrain it, evaluate it, tune it again...\nmodel = get_model() Once you’ve tuned your\nmodel.train(np.concatenate([training_data, hyperparameters, it’s common "}
{"text": "to\nvalidation_data])) train your final model from scratch\ntest_score = model.evaluate(test_data) on all non-test data available.\nLicensed to <null>\nEvaluating machine-learning models 99\nThis is the simplest evaluation protocol, and it suffers from one flaw: if little data is\navailable, then your validation and test sets may contain too few samples to be statisti-\ncally representative of the data at hand. This is easy to recognize: if different random\nshuffling rounds of the data before splitting"}
{"text": " end up yielding very different measures\nof model performance, then you’re having this issue. K-fold validation and iterated\nK-fold validation are two ways to address this, as discussed next.\nK-FOLD VALIDATION\nWith this approach, you split your data into K partitions of equal size. For each parti-\ntion i, train a model on the remaining K – 1 partitions, and evaluate it on partition i.\nYour final score is then the averages of the K scores obtained. This method is helpful\nwhen the performance of y"}
{"text": "our model shows significant variance based on your train-\ntest split. Like hold-out validation, this method doesn’t exempt you from using a dis-\ntinct validation set for model calibration.\nSchematically, K-fold cross-validation looks like figure 4.2. Listing 4.2 shows a simple\nimplementation.\nData split into 3 partitions\nValidation\nFold 1 Validation Training Training\nscore #1\nValidation Final score:\nFold 2 Validation Validation Training\nscore #2 average\nValidation\nFold 3 Validation Training Vali"}
{"text": "dation\nscore #3\nFigure 4.2 Three-fold validation\nListing4.2 K-fold cross-validation\nk = 4\nnum_validation_samples = len(data) // k\nnp.random.shuffle(data)\nSelects the validation-\nvalidation_scores = [] data partition\nfor fold in range(k):\nvalidation_data = data[num_validation_samples * fold:\nnum_validation_samples * (fold + 1)]\ntraining_data = data[:num_validation_samples * fold] +\ndata[num_validation_samples * (fold + 1):]\nUses the remainder of the data\nmodel = get_model() as training data. Note"}
{"text": " that the\nmodel.train(training_data) + operator is list concatenation,\nvalidation_score = model.evaluate(validation_data) not summation.\nvalidation_scores.append(validation_score)\nCreates a brand-new instance\nof the model (untrained)\nLicensed to <null>\n100 CHAPTER 4 Fundamentals of machine learning\nvalidation_score = np.average(validation_scores)\nValidation score:\naverage of the\nmodel = get_model()\nTrains the final validation scores\nmodel.train(data)\nmodel on all non- of the k folds\ntest_score ="}
{"text": " model.evaluate(test_data) test data available\nITERATED K-FOLD VALIDATION WITH SHUFFLING\nThis one is for situations in which you have relatively little data available and you need\nto evaluate your model as precisely as possible. I’ve found it to be extremely helpful in\nKaggle competitions. It consists of applying K-fold validation multiple times, shuffling\nthe data every time before splitting it K ways. The final score is the average of the\nscores obtained at each run of K-fold validation. Note "}
{"text": "that you end up training and\nevaluating P × K models (where P is the number of iterations you use), which can very\nexpensive.\n4.2.2 Things to keep in mind\nKeep an eye out for the following when you’re choosing an evaluation protocol:\n Data representativeness—You want both your training set and test set to be repre-\nsentative of the data at hand. For instance, if you’re trying to classify images of\ndigits, and you’re starting from an array of samples where the samples are\nordered by their class,"}
{"text": " taking the first 80% of the array as your training set and\nthe remaining 20% as your test set will result in your training set containing\nonly classes 0–7, whereas your test set contains only classes 8–9. This seems like\na ridiculous mistake, but it’s surprisingly common. For this reason, you usually\nshould randomly shuffle your data before splitting it into training and test sets.\n The arrow of time—If you’re trying to predict the future given the past (for exam-\nple, tomorrow’s weather, stoc"}
{"text": "k movements, and so on), you should not ran-\ndomly shuffle your data before splitting it, because doing so will create a\ntemporal leak: your model will effectively be trained on data from the future. In\nsuch situations, you should always make sure all data in your test set is posterior\nto the data in the training set.\n Redundancy in your data—If some data points in your data appear twice (fairly\ncommon with real-world data), then shuffling the data and splitting it into a\ntraining set and a val"}
{"text": "idation set will result in redundancy between the training\nand validation sets. In effect, you’ll be testing on part of your training data,\nwhich is the worst thing you can do! Make sure your training set and validation\nset are disjoint.\nLicensed to <null>\nData preprocessing, feature engineering, and feature learning 101\n4.3 Data preprocessing, feature engineering,\nand feature learning\nIn addition to model evaluation, an important question we must tackle before we dive\ndeeper into model developm"}
{"text": "ent is the following: how do you prepare the input data\nand targets before feeding them into a neural network? Many data-preprocessing and\nfeature-engineering techniques are domain specific (for example, specific to text data\nor image data); we’ll cover those in the following chapters as we encounter them in\npractical examples. For now, we’ll review the basics that are common to all data\ndomains.\n4.3.1 Data preprocessing for neural networks\nData preprocessing aims at making the raw data at hand "}
{"text": "more amenable to neural\nnetworks. This includes vectorization, normalization, handling missing values, and\nfeature extraction.\nVECTORIZATION\nAll inputs and targets in a neural network must be tensors of floating-point data (or, in\nspecific cases, tensors of integers). Whatever data you need to process—sound,\nimages, text—you must first turn into tensors, a step called data vectorization. For\ninstance, in the two previous text-classification examples, we started from text repre-\nsented as lists o"}
{"text": "f integers (standing for sequences of words), and we used one-hot\nencoding to turn them into a tensor of float32 data. In the examples of classifying\ndigits and predicting house prices, the data already came in vectorized form, so you\nwere able to skip this step.\nVALUE NORMALIZATION\nIn the digit-classification example, you started from image data encoded as integers in\nthe 0–255 range, encoding grayscale values. Before you fed this data into your net-\nwork, you had to cast it to float32 and divi"}
{"text": "de by 255 so you’d end up with floating-\npoint values in the 0–1 range. Similarly, when predicting house prices, you started\nfrom features that took a variety of ranges—some features had small floating-point val-\nues, others had fairly large integer values. Before you fed this data into your network,\nyou had to normalize each feature independently so that it had a standard deviation\nof 1 and a mean of 0.\nIn general, it isn’t safe to feed into a neural network data that takes relatively large val"}
{"text": "-\nues (for example, multidigit integers, which are much larger than the initial values taken\nby the weights of a network) or data that is heterogeneous (for example, data where one\nfeature is in the range 0–1 and another is in the range 100–200). Doing so can trigger\nlarge gradient updates that will prevent the network from converging. To make learning\neasier for your network, your data should have the following characteristics:\n Take small values—Typically, most values should be in the 0–1 ran"}
{"text": "ge.\n Be homogenous—That is, all features should take values in roughly the same\nrange.\nLicensed to <null>\n102 CHAPTER 4 Fundamentals of machine learning\nAdditionally, the following stricter normalization practice is common and can help,\nalthough it isn’t always necessary (for example, you didn’t do this in the digit-classification\nexample):\n Normalize each feature independently to have a mean of 0.\n Normalize each feature independently to have a standard deviation of 1.\nThis is easy to do wit"}
{"text": "h Numpy arrays:\nx -= x.mean(axis=0)\nAssuming x is a 2D data matrix\nx /= x.std(axis=0)\nof shape (samples, features)\nHANDLING MISSING VALUES\nYou may sometimes have missing values in your data. For instance, in the house-price\nexample, the first feature (the column of index 0 in the data) was the per capita crime\nrate. What if this feature wasn’t available for all samples? You’d then have missing val-\nues in the training or test data.\nIn general, with neural networks, it’s safe to input missing val"}
{"text": "ues as 0, with the con-\ndition that 0 isn’t already a meaningful value. The network will learn from exposure to\nthe data that the value 0 means missing data and will start ignoring the value.\nNote that if you’re expecting missing values in the test data, but the network was\ntrained on data without any missing values, the network won’t have learned to ignore\nmissing values! In this situation, you should artificially generate training samples with\nmissing entries: copy some training samples severa"}
{"text": "l times, and drop some of the fea-\ntures that you expect are likely to be missing in the test data.\n4.3.2 Feature engineering\nFeature engineering is the process of using your own knowledge about the data and about\nthe machine-learning algorithm at hand (in this case, a neural network) to make the\nalgorithm work better by applying\nhardcoded (nonlearned) transfor-\nmations to the data before it goes\nRaw data:\ninto the model. In many cases, it isn’t pixel grid\nreasonable to expect a machine-\nlearnin"}
{"text": "g model to be able to learn\nfrom completely arbitrary data. The Better {x1: 0.7, {x1: 0.0,\ndata needs to be presented to the features: y1: 0.7} y2: 1.0}\nclock hands’ {x2: 0.5, {x2: -0.38,\nmodel in a way that will make the coordinates y2: 0.0} 2: 0.32}\nmodel’s job easier.\nLet’s look at an intuitive example.\nEven better theta1: 45 theta1: 90\nSuppose you’re trying to develop a features: theta2: 0 theta2: 140\nmodel that can take as input an angles of\nclock hands\nimage of a clock and can output the\nt"}
{"text": "ime of day (see figure 4.3). Figure 4.3 Feature engineering for reading the time on\na clock\nLicensed to <null>\nData preprocessing, feature engineering, and feature learning 103\nIf you choose to use the raw pixels of the image as input data, then you have a difficult\nmachine-learning problem on your hands. You’ll need a convolutional neural net-\nwork to solve it, and you’ll have to expend quite a bit of computational resources to\ntrain the network.\nBut if you already understand the problem at a h"}
{"text": "igh level (you understand how\nhumans read time on a clock face), then you can come up with much better input fea-\ntures for a machine-learning algorithm: for instance, it’s easy to write a five-line\nPython script to follow the black pixels of the clock hands and output the (x, y) coor-\ndinates of the tip of each hand. Then a simple machine-learning algorithm can learn\nto associate these coordinates with the appropriate time of day.\nYou can go even further: do a coordinate change, and express the"}
{"text": " (x, y) coordi-\nnates as polar coordinates with regard to the center of the image. Your input will\nbecome the angle theta of each clock hand. At this point, your features are making\nthe problem so easy that no machine learning is required; a simple rounding opera-\ntion and dictionary lookup are enough to recover the approximate time of day.\nThat’s the essence of feature engineering: making a problem easier by expressing\nit in a simpler way. It usually requires understanding the problem in depth."}
{"text": "\nBefore deep learning, feature engineering used to be critical, because classical\nshallow algorithms didn’t have hypothesis spaces rich enough to learn useful features\nby themselves. The way you presented the data to the algorithm was essential to its suc-\ncess. For instance, before convolutional neural networks became successful on the\nMNIST digit-classification problem, solutions were typically based on hardcoded fea-\ntures such as the number of loops in a digit image, the height of each digit"}
{"text": " in an\nimage, a histogram of pixel values, and so on.\nFortunately, modern deep learning removes the need for most feature engineer-\ning, because neural networks are capable of automatically extracting useful features\nfrom raw data. Does this mean you don’t have to worry about feature engineering as\nlong as you’re using deep neural networks? No, for two reasons:\n Good features still allow you to solve problems more elegantly while using fewer\nresources. For instance, it would be ridiculous to so"}
{"text": "lve the problem of reading a\nclock face using a convolutional neural network.\n Good features let you solve a problem with far less data. The ability of deep-\nlearning models to learn features on their own relies on having lots of training\ndata available; if you have only a few samples, then the information value in\ntheir features becomes critical.\nLicensed to <null>\n104 CHAPTER 4 Fundamentals of machine learning\n4.4 Overfitting and underfitting\nIn all three examples in the previous chapter—pred"}
{"text": "icting movie reviews, topic classifi-\ncation, and house-price regression—the performance of the model on the held-out\nvalidation data always peaked after a few epochs and then began to degrade: the\nmodel quickly started to overfit to the training data. Overfitting happens in every\nmachine-learning problem. Learning how to deal with overfitting is essential to mas-\ntering machine learning.\nThe fundamental issue in machine learning is the tension between optimization\nand generalization. Optimizati"}
{"text": "on refers to the process of adjusting a model to get the\nbest performance possible on the training data (the learning in machine learning),\nwhereas generalization refers to how well the trained model performs on data it has\nnever seen before. The goal of the game is to get good generalization, of course, but\nyou don’t control generalization; you can only adjust the model based on its training\ndata.\nAt the beginning of training, optimization and generalization are correlated: the\nlower the loss o"}
{"text": "n training data, the lower the loss on test data. While this is happening,\nyour model is said to be underfit: there is still progress to be made; the network hasn’t\nyet modeled all relevant patterns in the training data. But after a certain number of\niterations on the training data, generalization stops improving, and validation metrics\nstall and then begin to degrade: the model is starting to overfit. That is, it’s beginning\nto learn patterns that are specific to the training data but that are "}
{"text": "misleading or irrele-\nvant when it comes to new data.\nTo prevent a model from learning misleading or irrelevant patterns found in the\ntraining data, the best solution is to get more training data. A model trained on more data\nwill naturally generalize better. When that isn’t possible, the next-best solution is to\nmodulate the quantity of information that your model is allowed to store or to add\nconstraints on what information it’s allowed to store. If a network can only afford to\nmemorize a smal"}
{"text": "l number of patterns, the optimization process will force it to focus\non the most prominent patterns, which have a better chance of generalizing well.\nThe processing of fighting overfitting this way is called regularization. Let’s review\nsome of the most common regularization techniques and apply them in practice to\nimprove the movie-classification model from section 3.4.\n4.4.1 Reducing the network’s size\nThe simplest way to prevent overfitting is to reduce the size of the model: the number\nof l"}
{"text": "earnable parameters in the model (which is determined by the number of layers\nand the number of units per layer). In deep learning, the number of learnable param-\neters in a model is often referred to as the model’s capacity. Intuitively, a model with\nmore parameters has more memorization capacity and therefore can easily learn a per-\nfect dictionary-like mapping between training samples and their targets—a mapping\nwithout any generalization power. For instance, a model with 500,000 binary param"}
{"text": "e-\nters could easily be made to learn the class of every digit in the MNIST training set:\nLicensed to <null>\nOverfitting and underfitting 105\nwe’d need only 10 binary parameters for each of the 50,000 digits. But such a model\nwould be useless for classifying new digit samples. Always keep this in mind: deep-\nlearning models tend to be good at fitting to the training data, but the real challenge\nis generalization, not fitting.\nOn the other hand, if the network has limited memorization resources, "}
{"text": "it won’t be\nable to learn this mapping as easily; thus, in order to minimize its loss, it will have to\nresort to learning compressed representations that have predictive power regarding\nthe targets—precisely the type of representations we’re interested in. At the same\ntime, keep in mind that you should use models that have enough parameters that they\ndon’t underfit: your model shouldn’t be starved for memorization resources. There is\na compromise to be found between too much capacity and not eno"}
{"text": "ugh capacity.\nUnfortunately, there is no magical formula to determine the right number of lay-\ners or the right size for each layer. You must evaluate an array of different architec-\ntures (on your validation set, not on your test set, of course) in order to find the\ncorrect model size for your data. The general workflow to find an appropriate model\nsize is to start with relatively few layers and parameters, and increase the size of the lay-\ners or add new layers until you see diminishing return"}
{"text": "s with regard to validation loss.\nLet’s try this on the movie-review classification network. The original network is\nshown next.\nListing4.3 Original model\nfrom keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmodel.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nNow let’s try to replace it with this smaller network.\nListing4.4 Version of the model with lower capa"}
{"text": "city\nmodel = models.Sequential()\nmodel.add(layers.Dense(4, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(4, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nFigure 4.4 shows a comparison of the validation losses of the original network and the\nsmaller network. The dots are the validation loss values of the smaller network, and\nthe crosses are the initial network (remember, a lower validation loss signals a better\nmodel).\nLicensed to <null>\n106 CHAPTER 4 Fun"}
{"text": "damentals of machine learning\nFigure 4.4 Effect of model\ncapacity on validation loss: trying\na smaller model\nAs you can see, the smaller network starts overfitting later than the reference network\n(after six epochs rather than four), and its performance degrades more slowly once it\nstarts overfitting.\nNow, for kicks, let’s add to this benchmark a network that has much more capac-\nity—far more than the problem warrants.\nListing4.5 Version of the model with higher capacity\nmodel = models.Sequentia"}
{"text": "l()\nmodel.add(layers.Dense(512, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nFigure 4.5 shows how the bigger network fares compared to the reference network.\nThe dots are the validation loss values of the bigger network, and the crosses are the\ninitial network.\nFigure 4.5 Effect of model\ncapacity on validation loss:\ntrying a bigger model\nLicensed to <null>\nOverfitting and underfitting 107\nThe bigger net"}
{"text": "work starts overfitting almost immediately, after just one epoch, and it\noverfits much more severely. Its validation loss is also noisier.\nMeanwhile, figure 4.6 shows the training losses for the two networks. As you can\nsee, the bigger network gets its training loss near zero very quickly. The more capacity\nthe network has, the more quickly it can model the training data (resulting in a low\ntraining loss), but the more susceptible it is to overfitting (resulting in a large differ-\nence between t"}
{"text": "he training and validation loss).\nFigure 4.6 Effect of model\ncapacity on training loss:\ntrying a bigger model\n4.4.2 Adding weight regularization\nYou may be familiar with the principle of Occam’s razor: given two explanations for\nsomething, the explanation most likely to be correct is the simplest one—the one that\nmakes fewer assumptions. This idea also applies to the models learned by neural net-\nworks: given some training data and a network architecture, multiple sets of weight\nvalues (multiple"}
{"text": " models) could explain the data. Simpler models are less likely to over-\nfit than complex ones.\nA simple model in this context is a model where the distribution of parameter values\nhas less entropy (or a model with fewer parameters, as you saw in the previous sec-\ntion). Thus a common way to mitigate overfitting is to put constraints on the complex-\nity of a network by forcing its weights to take only small values, which makes the\ndistribution of weight values more regular. This is called weight"}
{"text": " regularization, and it’s\ndone by adding to the loss function of the network a cost associated with having large\nweights. This cost comes in two flavors:\n L1 regularization—The cost added is proportional to the absolute value of the\nweight coefficients (the L1 norm of the weights).\n L2 regularization—The cost added is proportional to the square of the value of the\nweight coefficients (the L2 norm of the weights). L2 regularization is also called\nweight decay in the context of neural networks. "}
{"text": "Don’t let the different name con-\nfuse you: weight decay is mathematically the same as L2 regularization.\nLicensed to <null>\n108 CHAPTER 4 Fundamentals of machine learning\nIn Keras, weight regularization is added by passing weight regularizer instances to layers\nas keyword arguments. Let’s add L2 weight regularization to the movie-review classifi-\ncation network.\nListing4.6 Adding L2 weight regularization to the model\nfrom keras import regularizers\nmodel = models.Sequential()\nmodel.add(layers.De"}
{"text": "nse(16, kernel_regularizer=regularizers.l2(0.001),\nactivation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(16, kernel_regularizer=regularizers.l2(0.001),\nactivation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nl2(0.001) means every coefficient in the weight matrix of the layer will add 0.001 *\nweight_coefficient_value to the total loss of the network. Note that because this\npenalty is only added at training time, the loss for this network will be much higher at\ntraining tha"}
{"text": "n at test time.\nFigure 4.7 shows the impact of the L2 regularization penalty. As you can see, the\nmodel with L2 regularization (dots) has become much more resistant to overfitting\nthan the reference model (crosses), even though both models have the same number\nof parameters.\nFigure 4.7 Effect of L2 weight\nregularization on validation loss\nAs an alternative to L2 regularization, you can use one of the following Keras weight\nregularizers.\nListing4.7 Different weight regularizers available in Keras"}
{"text": "\nfrom keras import regularizers\nregularizers.l1(0.001) L1 regularization\nSimultaneous L1 and\nregularizers.l1_l2(l1=0.001, l2=0.001) L2 regularization\nLicensed to <null>\nOverfitting and underfitting 109\n4.4.3 Adding dropout\nDropout is one of the most effective and most commonly used regularization tech-\nniques for neural networks, developed by Geoff Hinton and his students at the Uni-\nversity of Toronto. Dropout, applied to a layer, consists of randomly dropping out\n(setting to zero) a number of "}
{"text": "output features of the layer during training. Let’s say a\ngiven layer would normally return a vector [0.2, 0.5, 1.3, 0.8, 1.1] for a given input\nsample during training. After applying dropout, this vector will have a few zero entries\ndistributed at random: for example, [0, 0.5, 1.3, 0, 1.1]. The dropout rate is the fraction\nof the features that are zeroed out; it’s usually set between 0.2 and 0.5. At test time, no\nunits are dropped out; instead, the layer’s output values are scaled down by a fac"}
{"text": "tor\nequal to the dropout rate, to balance for the fact that more units are active than at\ntraining time.\nConsider a Numpy matrix containing the output of a layer, layer_output, of\nshape (batch_size, features). At training time, we zero out at random a fraction of\nthe values in the matrix:\nlayer_output *= np.random.randint(0, high=2, size=layer_output.shape)\nAt training time, drops out 50%\nof the units in the output\nAt test time, we scale down the output by the dropout rate. Here, we scale by 0.5"}
{"text": "\n(because we previously dropped half the units):\nlayer_output *= 0.5 At test time\nNote that this process can be implemented by doing both operations at training time\nand leaving the output unchanged at test time, which is often the way it’s imple-\nmented in practice (see figure 4.8):\nlayer_output *= np.random.randint(0, high=2, size=layer_output.shape)\nlayer_output /= 0.5\nNote that we’re scaling up rather At training time\nscaling down in this case.\n0.3 0.2 1.5 0.0 0.0 0.2 1.5 0.0\n50%\n0.6 0.1 0.0"}
{"text": " 0.3 dropout 0.6 0.1 0.0 0.3 Figure 4.8 Dropout applied to an\n* 2 activation matrix at training time,\n0.2 1.9 0.3 1.2 0.0 1.9 0.3 0.0 with rescaling happening during\ntraining. At test time, the activation\n0.7 0.5 1.0 0.0 0.7 0.0 0.0 0.0\nmatrix is unchanged.\nThis technique may seem strange and arbitrary. Why would this help reduce overfit-\nting? Hinton says he was inspired by, among other things, a fraud-prevention mecha-\nnism used by banks. In his own words, “I went to my bank. The tellers kept "}
{"text": "changing\nand I asked one of them why. He said he didn’t know but they got moved around a lot.\nLicensed to <null>\n110 CHAPTER 4 Fundamentals of machine learning\nI figured it must be because it would require cooperation between employees to suc-\ncessfully defraud the bank. This made me realize that randomly removing a different\nsubset of neurons on each example would prevent conspiracies and thus reduce over-\nfitting.”1 The core idea is that introducing noise in the output values of a layer can\nbr"}
{"text": "eak up happenstance patterns that aren’t significant (what Hinton refers to as con-\nspiracies), which the network will start memorizing if no noise is present.\nIn Keras, you can introduce dropout in a network via the Dropout layer, which is\napplied to the output of the layer right before it:\nmodel.add(layers.Dropout(0.5))\nLet’s add two Dropout layers in the IMDB network to see how well they do at reducing\noverfitting.\nListing4.8 Adding dropout to the IMDB network\nmodel = models.Sequential()\nmode"}
{"text": "l.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nFigure 4.9 shows a plot of the results. Again, this is a clear improvement over the refer-\nence network.\nFigure 4.9 Effect of dropout\non validation loss\nTo recap, these are the most common ways to prevent overfitting in neural networks:\n Get more training data.\n Reduce the c"}
{"text": "apacity of the network.\n Add weight regularization.\n Add dropout.\n1 See the Reddit thread “AMA: We are the Google Brain team. We’d love to answer your questions about\nmachine learning,” http://mng.bz/XrsS.\nLicensed to <null>\nThe universal workflow of machine learning 111\n4.5 The universal workflow of machine learning\nIn this section, we’ll present a universal blueprint that you can use to attack and solve\nany machine-learning problem. The blueprint ties together the concepts you’ve\nlearned abo"}
{"text": "ut in this chapter: problem definition, evaluation, feature engineering,\nand fighting overfitting.\n4.5.1 Defining the problem and assembling a dataset\nFirst, you must define the problem at hand:\n What will your input data be? What are you trying to predict? You can only learn\nto predict something if you have available training data: for example, you can\nonly learn to classify the sentiment of movie reviews if you have both movie\nreviews and sentiment annotations available. As such, data availab"}
{"text": "ility is usually\nthe limiting factor at this stage (unless you have the means to pay people to col-\nlect data for you).\n What type of problem are you facing? Is it binary classification? Multiclass classi-\nfication? Scalar regression? Vector regression? Multiclass, multilabel classifica-\ntion? Something else, like clustering, generation, or reinforcement learning?\nIdentifying the problem type will guide your choice of model architecture, loss\nfunction, and so on.\nYou can’t move to the next stag"}
{"text": "e until you know what your inputs and outputs are, and\nwhat data you’ll use. Be aware of the hypotheses you make at this stage:\n You hypothesize that your outputs can be predicted given your inputs.\n You hypothesize that your available data is sufficiently informative to learn the\nrelationship between inputs and outputs.\nUntil you have a working model, these are merely hypotheses, waiting to be validated\nor invalidated. Not all problems can be solved; just because you’ve assembled exam-\nples o"}
{"text": "f inputs X and targets Y doesn’t mean X contains enough information to predict\nY. For instance, if you’re trying to predict the movements of a stock on the stock mar-\nket given its recent price history, you’re unlikely to succeed, because price history\ndoesn’t contain much predictive information.\nOne class of unsolvable problems you should be aware of is nonstationary problems.\nSuppose you’re trying to build a recommendation engine for clothing, you’re training\nit on one month of data (August), "}
{"text": "and you want to start generating recommendations\nin the winter. One big issue is that the kinds of clothes people buy change from season\nto season: clothes buying is a nonstationary phenomenon over the scale of a few\nmonths. What you’re trying to model changes over time. In this case, the right move is\nto constantly retrain your model on data from the recent past, or gather data at a\ntimescale where the problem is stationary. For a cyclical problem like clothes buying, a\nfew years’ worth of data"}
{"text": " will suffice to capture seasonal variation—but remember to\nmake the time of the year an input of your model!\nLicensed to <null>\n112 CHAPTER 4 Fundamentals of machine learning\nKeep in mind that machine learning can only be used to memorize patterns that\nare present in your training data. You can only recognize what you’ve seen before.\nUsing machine learning trained on past data to predict the future is making the\nassumption that the future will behave like the past. That often isn’t the case.\n4."}
{"text": "5.2 Choosing a measure of success\nTo control something, you need to be able to observe it. To achieve success, you must\ndefine what you mean by success—accuracy? Precision and recall? Customer-retention\nrate? Your metric for success will guide the choice of a loss function: what your model\nwill optimize. It should directly align with your higher-level goals, such as the success\nof your business.\nFor balanced-classification problems, where every class is equally likely, accuracy and\narea under th"}
{"text": "e receiver operating characteristic curve (ROC AUC) are common metrics. For\nclass-imbalanced problems, you can use precision and recall. For ranking problems or\nmultilabel classification, you can use mean average precision. And it isn’t uncommon\nto have to define your own custom metric by which to measure success. To get a sense\nof the diversity of machine-learning success metrics and how they relate to different\nproblem domains, it’s helpful to browse the data science competitions on Kaggle\n(ht"}
{"text": "tps://kaggle.com); they showcase a wide range of problems and evaluation metrics.\n4.5.3 Deciding on an evaluation protocol\nOnce you know what you’re aiming for, you must establish how you’ll measure your\ncurrent progress. We’ve previously reviewed three common evaluation protocols:\n Maintaining a hold-out validation set—The way to go when you have plenty of\ndata\n Doing K-fold cross-validation—The right choice when you have too few samples\nfor hold-out validation to be reliable\n Doing iterated"}
{"text": " K-fold validation—For performing highly accurate model evalua-\ntion when little data is available\nJust pick one of these. In most cases, the first will work well enough.\n4.5.4 Preparing your data\nOnce you know what you’re training on, what you’re optimizing for, and how to evalu-\nate your approach, you’re almost ready to begin training models. But first, you should\nformat your data in a way that can be fed into a machine-learning model—here, we’ll\nassume a deep neural network:\n As you saw prev"}
{"text": "iously, your data should be formatted as tensors.\n The values taken by these tensors should usually be scaled to small values: for\nexample, in the [-1, 1] range or [0, 1] range.\nLicensed to <null>\nThe universal workflow of machine learning 113\n If different features take values in different ranges (heterogeneous data), then\nthe data should be normalized.\n You may want to do some feature engineering, especially for small-data problems.\nOnce your tensors of input data and target data are ready,"}
{"text": " you can begin to train models.\n4.5.5 Developing a model that does better than a baseline\nYour goal at this stage is to achieve statistical power: that is, to develop a small model\nthat is capable of beating a dumb baseline. In the MNIST digit-classification example,\nanything that achieves an accuracy greater than 0.1 can be said to have statistical\npower; in the IMDB example, it’s anything with an accuracy greater than 0.5.\nNote that it’s not always possible to achieve statistical power. If you"}
{"text": " can’t beat a ran-\ndom baseline after trying multiple reasonable architectures, it may be that the answer\nto the question you’re asking isn’t present in the input data. Remember that you make\ntwo hypotheses:\n You hypothesize that your outputs can be predicted given your inputs.\n You hypothesize that the available data is sufficiently informative to learn the\nrelationship between inputs and outputs.\nIt may well be that these hypotheses are false, in which case you must go back to the\ndrawing bo"}
{"text": "ard.\nAssuming that things go well, you need to make three key choices to build your\nfirst working model:\n Last-layer activation—This establishes useful constraints on the network’s out-\nput. For instance, the IMDB classification example used sigmoid in the last\nlayer; the regression example didn’t use any last-layer activation; and so on.\n Loss function—This should match the type of problem you’re trying to solve. For\ninstance, the IMDB example used binary_crossentropy, the regression exam-\npl"}
{"text": "e used mse, and so on.\n Optimization configuration—What optimizer will you use? What will its learning\nrate be? In most cases, it’s safe to go with rmsprop and its default learning rate.\nRegarding the choice of a loss function, note that it isn’t always possible to directly\noptimize for the metric that measures success on a problem. Sometimes there is no\neasy way to turn a metric into a loss function; loss functions, after all, need to be com-\nputable given only a mini-batch of data (ideally, a"}
{"text": " loss function should be computable\nfor as little as a single data point) and must be differentiable (otherwise, you can’t use\nbackpropagation to train your network). For instance, the widely used classification\nmetric ROC AUC can’t be directly optimized. Hence, in classification tasks, it’s com-\nmon to optimize for a proxy metric of ROC AUC, such as crossentropy. In general, you\ncan hope that the lower the crossentropy gets, the higher the ROC AUC will be.\nTable 4.1 can help you choose a last-l"}
{"text": "ayer activation and a loss function for a few\ncommon problem types.\nLicensed to <null>\n114 CHAPTER 4 Fundamentals of machine learning\nTab le 4.1 Choosing the right last-layer activation and loss function for your model\nProblem type Last-layer activation Loss function\nBinary classification sigmoid binary_crossentropy\nMulticlass, single-label classification softmax categorical_crossentropy\nMulticlass, multilabel classification sigmoid binary_crossentropy\nRegression to arbitrary values None mse\nReg"}
{"text": "ression to values between 0 and 1 sigmoid mse or binary_crossentropy\n4.5.6 Scaling up: developing a model that overfits\nOnce you’ve obtained a model that has statistical power, the question becomes, is your\nmodel sufficiently powerful? Does it have enough layers and parameters to properly\nmodel the problem at hand? For instance, a network with a single hidden layer with\ntwo units would have statistical power on MNIST but wouldn’t be sufficient to solve the\nproblem well. Remember that the univers"}
{"text": "al tension in machine learning is between\noptimization and generalization; the ideal model is one that stands right at the border\nbetween underfitting and overfitting; between undercapacity and overcapacity. To fig-\nure out where this border lies, first you must cross it.\nTo figure out how big a model you’ll need, you must develop a model that overfits.\nThis is fairly easy:\n1 Add layers.\n2 Make the layers bigger.\n3 Train for more epochs.\nAlways monitor the training loss and validation loss, as w"}
{"text": "ell as the training and valida-\ntion values for any metrics you care about. When you see that the model’s perfor-\nmance on the validation data begins to degrade, you’ve achieved overfitting.\nThe next stage is to start regularizing and tuning the model, to get as close as pos-\nsible to the ideal model that neither underfits nor overfits.\n4.5.7 Regularizing your model and tuning your hyperparameters\nThis step will take the most time: you’ll repeatedly modify your model, train it, evalu-\nate on you"}
{"text": "r validation data (not the test data, at this point), modify it again, and\nrepeat, until the model is as good as it can get. These are some things you should try:\n Add dropout.\n Try different architectures: add or remove layers.\n Add L1 and/or L2 regularization.\nLicensed to <null>\nThe universal workflow of machine learning 115\n Try different hyperparameters (such as the number of units per layer or the\nlearning rate of the optimizer) to find the optimal configuration.\n Optionally, iterate o"}
{"text": "n feature engineering: add new features, or remove fea-\ntures that don’t seem to be informative.\nBe mindful of the following: every time you use feedback from your validation process\nto tune your model, you leak information about the validation process into the model.\nRepeated just a few times, this is innocuous; but done systematically over many itera-\ntions, it will eventually cause your model to overfit to the validation process (even\nthough no model is directly trained on any of the validati"}
{"text": "on data). This makes the\nevaluation process less reliable.\nOnce you’ve developed a satisfactory model configuration, you can train your final\nproduction model on all the available data (training and validation) and evaluate it\none last time on the test set. If it turns out that performance on the test set is signifi-\ncantly worse than the performance measured on the validation data, this may mean\neither that your validation procedure wasn’t reliable after all, or that you began over-\nfitting to "}
{"text": "the validation data while tuning the parameters of the model. In this case,\nyou may want to switch to a more reliable evaluation protocol (such as iterated K-fold\nvalidation).\nLicensed to <null>\n116 CHAPTER 4 Fundamentals of machine learning\nChapter summary\n Define the problem at hand and the data on which you’ll train. Collect\nthis data, or annotate it with labels if need be.\n Choose how you’ll measure success on your problem. Which metrics will\nyou monitor on your validation data?\n Determin"}
{"text": "e your evaluation protocol: hold-out validation? K-fold valida-\ntion? Which portion of the data should you use for validation?\n Develop a first model that does better than a basic baseline: a model with\nstatistical power.\n Develop a model that overfits.\n Regularize your model and tune its hyperparameters, based on perfor-\nmance on the validation data. A lot of machine-learning research tends to\nfocus only on this step—but keep the big picture in mind.\nLicensed to <null>\nPart 2\nDeep learning i"}
{"text": "n practice\nC\nhapters 5–9 will help you gain practical intuition about how to solve real-\nworld problems using deep learning, and will familiarize you with essential deep-\nlearning best practices. Most of the code examples in the book are concentrated\nin this second half.\nLicensed to <null>\nLicensed to <null>\nDeep learning\nfor computer vision\nThis chapter covers\n Understanding convolutional neural networks\n(convnets)\n Using data augmentation to mitigate overfitting\n Using a pretrained convnet "}
{"text": "to do feature\nextraction\n Fine-tuning a pretrained convnet\n Visualizing what convnets learn and how they\nmake classification decisions\nThis chapter introduces convolutional neural networks, also known as convnets, a\ntype of deep-learning model almost universally used in computer vision applica-\ntions. You’ll learn to apply convnets to image-classification problems—in particular\nthose involving small training datasets, which are the most common use case if you\naren’t a large tech company.\n119\nL"}
{"text": "icensed to <null>\n120 CHAPTER 5 Deep learning for computer vision\n5.1 Introduction to convnets\nWe’re about to dive into the theory of what convnets are and why they have been so\nsuccessful at computer vision tasks. But first, let’s take a practical look at a simple conv-\nnet example. It uses a convnet to classify MNIST digits, a task we performed in chapter\n2 using a densely connected network (our test accuracy then was 97.8%). Even though\nthe convnet will be basic, its accuracy will blow out of"}
{"text": " the water that of the densely\nconnected model from chapter 2.\nThe following lines of code show you what a basic convnet looks like. It’s a stack of\nConv2D and MaxPooling2D layers. You’ll see in a minute exactly what they do.\nListing5.1 Instantiating a small convnet\nfrom keras import layers\nfrom keras import models\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3),"}
{"text": " activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nImportantly, a convnet takes as input tensors of shape (image_height, image_width,\nimage_channels) (not including the batch dimension). In this case, we’ll configure\nthe convnet to process inputs of size (28, 28, 1), which is the format of MNIST\nimages. We’ll do this by passing the argument input_shape=(28, 28, 1) to the first\nlayer.\nLet’s display the architecture of the convnet so"}
{"text": " far:\n>>> model.summary()\n________________________________________________________________\nLayer (type) Output Shape Param #\n================================================================\nconv2d_1 (Conv2D) (None, 26, 26, 32) 320\n________________________________________________________________\nmaxpooling2d_1 (MaxPooling2D) (None, 13, 13, 32) 0\n________________________________________________________________\nconv2d_2 (Conv2D) (None, 11, 11, 64) 18496\n_____________________________________________"}
{"text": "___________________\nmaxpooling2d_2 (MaxPooling2D) (None, 5, 5, 64) 0\n________________________________________________________________\nconv2d_3 (Conv2D) (None, 3, 3, 64) 36928\n================================================================\nTotal params: 55,744\nTrainable params: 55,744\nNon-trainable params: 0\nYou can see that the output of every Conv2D and MaxPooling2D layer is a 3D tensor of\nshape (height, width, channels). The width and height dimensions tend to shrink\nLicensed to <null>\nIntrod"}
{"text": "uction to convnets 121\nas you go deeper in the network. The number of channels is controlled by the first\nargument passed to the Conv2D layers (32 or 64).\nThe next step is to feed the last output tensor (of shape (3, 3, 64)) into a densely\nconnected classifier network like those you’re already familiar with: a stack of Dense\nlayers. These classifiers process vectors, which are 1D, whereas the current output is a\n3D tensor. First we have to flatten the 3D outputs to 1D, and then add a few Dense l"}
{"text": "ay-\ners on top.\nListing5.2 Adding a classifier on top of the convnet\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\nWe’ll do 10-way classification, using a final layer with 10 outputs and a softmax activa-\ntion. Here’s what the network looks like now:\n>>> model.summary()\nLayer (type) Output Shape Param #\n================================================================\nconv2d_1 (Conv2D) (None, 26, 26, 32) 320\n__________"}
{"text": "______________________________________________________\nmaxpooling2d_1 (MaxPooling2D) (None, 13, 13, 32) 0\n________________________________________________________________\nconv2d_2 (Conv2D) (None, 11, 11, 64) 18496\n________________________________________________________________\nmaxpooling2d_2 (MaxPooling2D) (None, 5, 5, 64) 0\n________________________________________________________________\nconv2d_3 (Conv2D) (None, 3, 3, 64) 36928\n________________________________________________________________\nf"}
{"text": "latten_1 (Flatten) (None, 576) 0\n________________________________________________________________\ndense_1 (Dense) (None, 64) 36928\n________________________________________________________________\ndense_2 (Dense) (None, 10) 650\n================================================================\nTotal params: 93,322\nTrainable params: 93,322\nNon-trainable params: 0\nAs you can see, the (3, 3, 64) outputs are flattened into vectors of shape (576,)\nbefore going through two Dense layers.\nNow, let’s train "}
{"text": "the convnet on the MNIST digits. We’ll reuse a lot of the code from\nthe MNIST example in chapter 2.\nListing5.3 Training the convnet on MNIST images\nfrom keras.datasets import mnist\nfrom keras.utils import to_categorical\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\nLicensed to <null>\n122 CHAPTER 5 Deep learning for computer vision\ntrain_images = train_images.reshape((60000, 28, 28, 1))\ntrain_images = train_images.astype('float32') / 255\ntest_images = test_images.re"}
{"text": "shape((10000, 28, 28, 1))\ntest_images = test_images.astype('float32') / 255\ntrain_labels = to_categorical(train_labels)\ntest_labels = to_categorical(test_labels)\nmodel.compile(optimizer='rmsprop',\nloss='categorical_crossentropy',\nmetrics=['accuracy'])\nmodel.fit(train_images, train_labels, epochs=5, batch_size=64)\nLet’s evaluate the model on the test data:\n>>> test_loss, test_acc = model.evaluate(test_images, test_labels)\n>>> test_acc\n0.99080000000000001\nWhereas the densely connected network from"}
{"text": " chapter 2 had a test accuracy of 97.8%,\nthe basic convnet has a test accuracy of 99.3%: we decreased the error rate by 68%\n(relative). Not bad!\nBut why does this simple convnet work so well, compared to a densely connected\nmodel? To answer this, let’s dive into what the Conv2D and MaxPooling2D layers do.\n5.1.1 The convolution operation\nThe fundamental difference between a densely connected layer and a convolution\nlayer is this: Dense layers learn global patterns in their input feature space (fo"}
{"text": "r exam-\nple, for a MNIST digit, patterns involving all pixels), whereas convolution layers learn\nlocal patterns (see figure 5.1): in the case of images, patterns found in small 2D win-\ndows of the inputs. In the previous example, these windows were all 3 × 3.\nFigure 5.1 Images can be broken\ninto local patterns such as edges,\ntextures, and so on.\nLicensed to <null>\nIntroduction to convnets 123\nThis key characteristic gives convnets two interesting properties:\n The patterns they learn are transla"}
{"text": "tion invariant. After learning a certain pattern in\nthe lower-right corner of a picture, a convnet can recognize it anywhere: for\nexample, in the upper-left corner. A densely connected network would have to\nlearn the pattern anew if it appeared at a new location. This makes convnets\ndata efficient when processing images (because the visual world is fundamentally\ntranslation invariant): they need fewer training samples to learn representations\nthat have generalization power.\n They can learn spat"}
{"text": "ial hierarchies of patterns (see figure 5.2). A first convolution layer\nwill learn small local patterns such as edges, a second convolution layer will\nlearn larger patterns made of the features of the first layers, and so on. This\nallows convnets to efficiently learn increasingly complex and abstract visual con-\ncepts (because the visual world is fundamentally spatially hierarchical).\n“cat”\nFigure 5.2 The visual world forms a spatial hierarchy of visual\nmodules: hyperlocal edges combine into loc"}
{"text": "al objects such as eyes\nor ears, which combine into high-level concepts such as “cat.”\nConvolutions operate over 3D tensors, called feature maps, with two spatial axes (height\nand width) as well as a depth axis (also called the channels axis). For an RGB image, the\ndimension of the depth axis is 3, because the image has three color channels: red,\ngreen, and blue. For a black-and-white picture, like the MNIST digits, the depth is 1\n(levels of gray). The convolution operation extracts patches from"}
{"text": " its input feature\nmap and applies the same transformation to all of these patches, producing an output\nfeature map. This output feature map is still a 3D tensor: it has a width and a height. Its\ndepth can be arbitrary, because the output depth is a parameter of the layer, and the\nLicensed to <null>\n124 CHAPTER 5 Deep learning for computer vision\ndifferent channels in that depth axis no longer stand for specific colors as in RGB\ninput; rather, they stand for filters. Filters encode specific aspe"}
{"text": "cts of the input data: at a\nhigh level, a single filter could encode the concept “presence of a face in the input,”\nfor instance.\nIn the MNIST example, the first convolution layer takes a feature map of size (28,\n28, 1) and outputs a feature map of size (26, 26, 32): it computes 32 filters over its\ninput. Each of these 32 output channels contains a 26 × 26 grid of values, which is a\nresponse map of the filter over the input, indicating the response of that filter pattern at\ndifferent locations i"}
{"text": "n the input (see figure 5.3). That is what the term feature map\nmeans: every dimension in the depth axis is a feature (or filter), and the 2D tensor\noutput[:, :, n] is the 2D spatial map of the response of this filter over the input.\nResponse map,\nquantifying the presence\nof the filter’s pattern at\nOriginal input different locations\nSingle filter\nFigure 5.3 The concept of a\nresponse map: a 2D map of the\npresence of a pattern at different\nlocations in an input\nConvolutions are defined by two key "}
{"text": "parameters:\n Size of the patches extracted from the inputs—These are typically 3 × 3 or 5 × 5. In the\nexample, they were 3 × 3, which is a common choice.\n Depth of the output feature map—The number of filters computed by the convolu-\ntion. The example started with a depth of 32 and ended with a depth of 64.\nIn Keras Conv2D layers, these parameters are the first arguments passed to the layer:\nConv2D(output_depth, (window_height, window_width)).\nA convolution works by sliding these windows of si"}
{"text": "ze 3 × 3 or 5 × 5 over the 3D input\nfeature map, stopping at every possible location, and extracting the 3D patch of sur-\nrounding features (shape (window_height, window_width, input_depth)). Each\nsuch 3D patch is then transformed (via a tensor product with the same learned weight\nmatrix, called the convolution kernel) into a 1D vector of shape (output_depth,). All of\nthese vectors are then spatially reassembled into a 3D output map of shape (height,\nwidth, output_depth). Every spatial location "}
{"text": "in the output feature map corresponds\nto the same location in the input feature map (for example, the lower-right corner of\nthe output contains information about the lower-right corner of the input). For\ninstance, with 3 × 3 windows, the vector output[i, j, :] comes from the 3D patch\ninput[i-1:i+1, j-1:j+1, :]. The full process is detailed in figure 5.4.\nLicensed to <null>\nIntroduction to convnets 125\nWidth Height\nInput Input feature map\ndepth\n3 × 3 input patches\nDot product\nwith kernel\nOutput\nT"}
{"text": "ransformed patches\ndepth\nOutput Output feature map\ndepth\nFigure 5.4 How convolution works\nNote that the output width and height may differ from the input width and height.\nThey may differ for two reasons:\n Border effects, which can be countered by padding the input feature map\n The use of strides, which I’ll define in a second\nLet’s take a deeper look at these notions.\nUNDERSTANDING BORDER EFFECTS AND PADDING\nConsider a 5 × 5 feature map (25 tiles total). There are only 9 tiles around which yo"}
{"text": "u\ncan center a 3 × 3 window, forming a 3 × 3 grid (see figure 5.5). Hence, the output fea-\nture map will be 3 × 3. It shrinks a little: by exactly two tiles alongside each dimension,\nin this case. You can see this border effect in action in the earlier example: you start\nwith 28 × 28 inputs, which become 26 × 26 after the first convolution layer.\nLicensed to <null>\n126 CHAPTER 5 Deep learning for computer vision\nFigure 5.5 Valid locations of 3 × 3 patches in a 5 × 5 input feature map\nIf you want"}
{"text": " to get an output feature map with the same spatial dimensions as the\ninput, you can use padding. Padding consists of adding an appropriate number of rows\nand columns on each side of the input feature map so as to make it possible to fit cen-\nter convolution windows around every input tile. For a 3 × 3 window, you add one col-\numn on the right, one column on the left, one row at the top, and one row at the\nbottom. For a 5 × 5 window, you add two rows (see figure 5.6).\netc.\nFigure 5.6 Padding a 5"}
{"text": " × 5 input in order to be able to extract 25 3 × 3 patches\nIn Conv2D layers, padding is configurable via the padding argument, which takes two\nvalues: \"valid\", which means no padding (only valid window locations will be used);\nand \"same\", which means “pad in such a way as to have an output with the same width\nand height as the input.” The padding argument defaults to \"valid\".\nLicensed to <null>\nIntroduction to convnets 127\nUNDERSTANDING CONVOLUTION STRIDES\nThe other factor that can influence out"}
{"text": "put size is the notion of strides. The description\nof convolution so far has assumed that the center tiles of the convolution windows are\nall contiguous. But the distance between two successive windows is a parameter of the\nconvolution, called its stride, which defaults to 1. It’s possible to have strided convolu-\ntions: convolutions with a stride higher than 1. In figure 5.7, you can see the patches\nextracted by a 3 × 3 convolution with stride 2 over a 5 × 5 input (without padding).\n1 2\n1 2\n3 4"}
{"text": "\n3 4\nFigure 5.7 3 × 3 convolution patches with 2 × 2 strides\nUsing stride 2 means the width and height of the feature map are downsampled by a\nfactor of 2 (in addition to any changes induced by border effects). Strided convolu-\ntions are rarely used in practice, although they can come in handy for some types of\nmodels; it’s good to be familiar with the concept.\nTo downsample feature maps, instead of strides, we tend to use the max-pooling\noperation, which you saw in action in the first convnet e"}
{"text": "xample. Let’s look at it in\nmore depth.\n5.1.2 The max-pooling operation\nIn the convnet example, you may have noticed that the size of the feature maps is\nhalved after every MaxPooling2D layer. For instance, before the first MaxPooling2D lay-\ners, the feature map is 26 × 26, but the max-pooling operation halves it to 13 × 13.\nThat’s the role of max pooling: to aggressively downsample feature maps, much like\nstrided convolutions.\nMax pooling consists of extracting windows from the input feature ma"}
{"text": "ps and out-\nputting the max value of each channel. It’s conceptually similar to convolution, except\nthat instead of transforming local patches via a learned linear transformation (the con-\nvolution kernel), they’re transformed via a hardcoded max tensor operation. A big dif-\nference from convolution is that max pooling is usually done with 2 × 2 windows and\nLicensed to <null>\n128 CHAPTER 5 Deep learning for computer vision\nstride 2, in order to downsample the feature maps by a factor of 2. On th"}
{"text": "e other hand,\nconvolution is typically done with 3 × 3 windows and no stride (stride 1).\nWhy downsample feature maps this way? Why not remove the max-pooling layers\nand keep fairly large feature maps all the way up? Let’s look at this option. The convo-\nlutional base of the model would then look like this:\nmodel_no_max_pool = models.Sequential()\nmodel_no_max_pool.add(layers.Conv2D(32, (3, 3), activation='relu',\ninput_shape=(28, 28, 1)))\nmodel_no_max_pool.add(layers.Conv2D(64, (3, 3), activation="}
{"text": "'relu'))\nmodel_no_max_pool.add(layers.Conv2D(64, (3, 3), activation='relu'))\nHere’s a summary of the model:\n>>> model_no_max_pool.summary()\nLayer (type) Output Shape Param #\n================================================================\nconv2d_4 (Conv2D) (None, 26, 26, 32) 320\n________________________________________________________________\nconv2d_5 (Conv2D) (None, 24, 24, 64) 18496\n________________________________________________________________\nconv2d_6 (Conv2D) (None, 22, 22, 64) 36928\n===="}
{"text": "============================================================\nTotal params: 55,744\nTrainable params: 55,744\nNon-trainable params: 0\nWhat’s wrong with this setup? Two things:\n It isn’t conducive to learning a spatial hierarchy of features. The 3 × 3 windows\nin the third layer will only contain information coming from 7 × 7 windows in\nthe initial input. The high-level patterns learned by the convnet will still be very\nsmall with regard to the initial input, which may not be enough to learn to clas"}
{"text": "-\nsify digits (try recognizing a digit by only looking at it through windows that are\n7 × 7 pixels!). We need the features from the last convolution layer to contain\ninformation about the totality of the input.\n The final feature map has 22 × 22 × 64 = 30,976 total coefficients per sample.\nThis is huge. If you were to flatten it to stick a Dense layer of size 512 on top,\nthat layer would have 15.8 million parameters. This is far too large for such a\nsmall model and would result in intense overf"}
{"text": "itting.\nIn short, the reason to use downsampling is to reduce the number of feature-map\ncoefficients to process, as well as to induce spatial-filter hierarchies by making succes-\nsive convolution layers look at increasingly large windows (in terms of the fraction of\nthe original input they cover).\nNote that max pooling isn’t the only way you can achieve such downsampling. As\nyou already know, you can also use strides in the prior convolution layer. And you can\nLicensed to <null>\nIntroduction to "}
{"text": "convnets 129\nuse average pooling instead of max pooling, where each local input patch is trans-\nformed by taking the average value of each channel over the patch, rather than the\nmax. But max pooling tends to work better than these alternative solutions. In a nut-\nshell, the reason is that features tend to encode the spatial presence of some pattern\nor concept over the different tiles of the feature map (hence, the term feature map),\nand it’s more informative to look at the maximal presence of d"}
{"text": "ifferent features than at\ntheir average presence. So the most reasonable subsampling strategy is to first produce\ndense maps of features (via unstrided convolutions) and then look at the maximal\nactivation of the features over small patches, rather than looking at sparser windows of\nthe inputs (via strided convolutions) or averaging input patches, which could cause\nyou to miss or dilute feature-presence information.\nAt this point, you should understand the basics of convnets—feature maps, convo-"}
{"text": "\nlution, and max pooling—and you know how to build a small convnet to solve a toy\nproblem such as MNIST digits classification. Now let’s move on to more useful, practi-\ncal applications.\nLicensed to <null>\n130 CHAPTER 5 Deep learning for computer vision\n5.2 Training a convnet from scratch on a small dataset\nHaving to train an image-classification model using very little data is a common situ-\nation, which you’ll likely encounter in practice if you ever do computer vision in a\nprofessional contex"}
{"text": "t. A “few” samples can mean anywhere from a few hundred to a\nfew tens of thousands of images. As a practical example, we’ll focus on classifying\nimages as dogs or cats, in a dataset containing 4,000 pictures of cats and dogs (2,000\ncats, 2,000 dogs). We’ll use 2,000 pictures for training—1,000 for validation, and\n1,000 for testing.\nIn this section, we’ll review one basic strategy to tackle this problem: training a new\nmodel from scratch using what little data you have. You’ll start by naively tr"}
{"text": "aining a\nsmall convnet on the 2,000 training samples, without any regularization, to set a base-\nline for what can be achieved. This will get you to a classification accuracy of 71%. At\nthat point, the main issue will be overfitting. Then we’ll introduce data augmentation, a\npowerful technique for mitigating overfitting in computer vision. By using data aug-\nmentation, you’ll improve the network to reach an accuracy of 82%.\nIn the next section, we’ll review two more essential techniques for appl"}
{"text": "ying deep\nlearning to small datasets: feature extraction with a pretrained network (which will get you\nto an accuracy of 90% to 96%) and fine-tuning a pretrained network (this will get you to a\nfinal accuracy of 97%). Together, these three strategies—training a small model from\nscratch, doing feature extraction using a pretrained model, and fine-tuning a pre-\ntrained model—will constitute your future toolbox for tackling the problem of per-\nforming image classification with small datasets.\n5.2.1"}
{"text": " The relevance of deep learning for small-data problems\nYou’ll sometimes hear that deep learning only works when lots of data is available.\nThis is valid in part: one fundamental characteristic of deep learning is that it can find\ninteresting features in the training data on its own, without any need for manual fea-\nture engineering, and this can only be achieved when lots of training examples are\navailable. This is especially true for problems where the input samples are very high-\ndimensional,"}
{"text": " like images.\nBut what constitutes lots of samples is relative—relative to the size and depth of the\nnetwork you’re trying to train, for starters. It isn’t possible to train a convnet to solve a\ncomplex problem with just a few tens of samples, but a few hundred can potentially\nsuffice if the model is small and well regularized and the task is simple. Because conv-\nnets learn local, translation-invariant features, they’re highly data efficient on percep-\ntual problems. Training a convnet from scr"}
{"text": "atch on a very small image dataset will still\nyield reasonable results despite a relative lack of data, without the need for any custom\nfeature engineering. You’ll see this in action in this section.\nWhat’s more, deep-learning models are by nature highly repurposable: you can\ntake, say, an image-classification or speech-to-text model trained on a large-scale dataset\nand reuse it on a significantly different problem with only minor changes. Specifically,\nLicensed to <null>\nTraining a convnet from"}
{"text": " scratch on a small dataset 131\nin the case of computer vision, many pretrained models (usually trained on the Image-\nNet dataset) are now publicly available for download and can be used to bootstrap pow-\nerful vision models out of very little data. That’s what you’ll do in the next section. Let’s\nstart by getting your hands on the data.\n5.2.2 Downloading the data\nThe Dogs vs. Cats dataset that you’ll use isn’t packaged with Keras. It was made avail-\nable by Kaggle as part of a computer-vision c"}
{"text": "ompetition in late 2013, back when\nconvnets weren’t mainstream. You can download the original dataset from www.kaggle\n.com/c/dogs-vs-cats/data (you’ll need to create a Kaggle account if you don’t already\nhave one—don’t worry, the process is painless).\nThe pictures are medium-resolution color JPEGs. Figure 5.8 shows some examples.\nFigure 5.8 Samples from the Dogs vs. Cats dataset. Sizes weren’t modified: the samples are\nheterogeneous in size, appearance, and so on.\nUnsurprisingly, the dogs-versus"}
{"text": "-cats Kaggle competition in 2013 was won by entrants\nwho used convnets. The best entries achieved up to 95% accuracy. In this example,\nyou’ll get fairly close to this accuracy (in the next section), even though you’ll train\nyour models on less than 10% of the data that was available to the competitors.\nThis dataset contains 25,000 images of dogs and cats (12,500 from each class) and\nis 543 MB (compressed). After downloading and uncompressing it, you’ll create a new\ndataset containing three subse"}
{"text": "ts: a training set with 1,000 samples of each class, a vali-\ndation set with 500 samples of each class, and a test set with 500 samples of each class.\nLicensed to <null>\n132 CHAPTER 5 Deep learning for computer vision\nFollowing is the code to do this.\nListing5.4 Copying images to training, validation, and test directories\nPath to the directory where the Directory where you’ll store\noriginal dataset was uncompressed your smaller dataset\nimport os, shutil\noriginal_dataset_dir = '/Users/fchollet/Do"}
{"text": "wnloads/kaggle_original_data'\nbase_dir = '/Users/fchollet/Downloads/cats_and_dogs_small'\nos.mkdir(base_dir)\ntrain_dir = os.path.join(base_dir, 'train')\nDirectories for\nos.mkdir(train_dir)\nthe training,\nvalidation_dir = os.path.join(base_dir, 'validation')\nvalidation, and\nos.mkdir(validation_dir)\ntest splits\ntest_dir = os.path.join(base_dir, 'test')\nos.mkdir(test_dir)\ntrain_cats_dir = os.path.join(train_dir, 'cats') Directory with\nos.mkdir(train_cats_dir) training cat pictures\ntrain_dogs_dir = os"}
{"text": ".path.join(train_dir, 'dogs') Directory with\nos.mkdir(train_dogs_dir) training dog pictures\nvalidation_cats_dir = os.path.join(validation_dir, 'cats') Directory with\nos.mkdir(validation_cats_dir) validation cat pictures\nvalidation_dogs_dir = os.path.join(validation_dir, 'dogs') Directory with\nos.mkdir(validation_dogs_dir) validation dog pictures\ntest_cats_dir = os.path.join(test_dir, 'cats')\nDirectory with test cat pictures\nos.mkdir(test_cats_dir)\ntest_dogs_dir = os.path.join(test_dir, 'dogs')\nD"}
{"text": "irectory with test dog pictures\nos.mkdir(test_dogs_dir)\nfnames = ['cat.{}.jpg'.format(i) for i in range(1000)]\nfor fname in fnames: Copies the first\n1,000 cat images\nsrc = os.path.join(original_dataset_dir, fname)\nto train_cats_dir\ndst = os.path.join(train_cats_dir, fname)\nshutil.copyfile(src, dst)\nfnames = ['cat.{}.jpg'.format(i) for i in range(1000, 1500)]\nfor fname in fnames: Copies the next 500\nsrc = os.path.join(original_dataset_dir, fname) cat images to\ndst = os.path.join(validation_cats_d"}
{"text": "ir, fname) validation_cats_dir\nshutil.copyfile(src, dst)\nfnames = ['cat.{}.jpg'.format(i) for i in range(1500, 2000)]\nfor fname in fnames: Copies the next 500\nsrc = os.path.join(original_dataset_dir, fname) cat images to\ndst = os.path.join(test_cats_dir, fname) test_cats_dir\nshutil.copyfile(src, dst)\nLicensed to <null>\nTraining a convnet from scratch on a small dataset 133\nfnames = ['dog.{}.jpg'.format(i) for i in range(1000)]\nfor fname in fnames: Copies the first\nsrc = os.path.join(original_dat"}
{"text": "aset_dir, fname) 1,000 dog images\ndst = os.path.join(train_dogs_dir, fname) to train_dogs_dir\nshutil.copyfile(src, dst)\nfnames = ['dog.{}.jpg'.format(i) for i in range(1000, 1500)]\nfor fname in fnames: Copies the next 500\nsrc = os.path.join(original_dataset_dir, fname) dog images to\ndst = os.path.join(validation_dogs_dir, fname) validation_dogs_dir\nshutil.copyfile(src, dst)\nfnames = ['dog.{}.jpg'.format(i) for i in range(1500, 2000)]\nfor fname in fnames: Copies the next 500\nsrc = os.path.join(or"}
{"text": "iginal_dataset_dir, fname) dog images to\ndst = os.path.join(test_dogs_dir, fname) test_dogs_dir\nshutil.copyfile(src, dst)\nAs a sanity check, let’s count how many pictures are in each training split (train/vali-\ndation/test):\n>>> print('total training cat images:', len(os.listdir(train_cats_dir)))\ntotal training cat images: 1000\n>>> print('total training dog images:', len(os.listdir(train_dogs_dir)))\ntotal training dog images: 1000\n>>> print('total validation cat images:', len(os.listdir(validati"}
{"text": "on_cats_dir)))\ntotal validation cat images: 500\n>>> print('total validation dog images:', len(os.listdir(validation_dogs_dir)))\ntotal validation dog images: 500\n>>> print('total test cat images:', len(os.listdir(test_cats_dir)))\ntotal test cat images: 500\n>>> print('total test dog images:', len(os.listdir(test_dogs_dir)))\ntotal test dog images: 500\nSo you do indeed have 2,000 training images, 1,000 validation images, and 1,000 test\nimages. Each split contains the same number of samples from each"}
{"text": " class: this is a bal-\nanced binary-classification problem, which means classification accuracy will be an\nappropriate measure of success.\n5.2.3 Building your network\nYou built a small convnet for MNIST in the previous example, so you should be famil-\niar with such convnets. You’ll reuse the same general structure: the convnet will be a\nstack of alternated Conv2D (with relu activation) and MaxPooling2D layers.\nBut because you’re dealing with bigger images and a more complex problem, you’ll\nmake "}
{"text": "your network larger, accordingly: it will have one more Conv2D + MaxPooling2D\nstage. This serves both to augment the capacity of the network and to further reduce\nthe size of the feature maps so they aren’t overly large when you reach the Flatten\nlayer. Here, because you start from inputs of size 150 × 150 (a somewhat arbitrary\nchoice), you end up with feature maps of size 7 × 7 just before the Flatten layer.\nLicensed to <null>\n134 CHAPTER 5 Deep learning for computer vision\nNOTE The depth of th"}
{"text": "e feature maps progressively increases in the network\n(from 32 to 128), whereas the size of the feature maps decreases (from 148 ×\n148 to 7 × 7). This is a pattern you’ll see in almost all convnets.\nBecause you’re attacking a binary-classification problem, you’ll end the network with a\nsingle unit (a Dense layer of size 1) and a sigmoid activation. This unit will encode the\nprobability that the network is looking at one class or the other.\nListing5.5 Instantiating a small convnet for dogs vs. ca"}
{"text": "ts classification\nfrom keras import layers\nfrom keras import models\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',\ninput_shape=(150, 150, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, "}
{"text": "2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nLet’s look at how the dimensions of the feature maps change with every successive\nlayer:\n>>> model.summary()\nLayer (type) Output Shape Param #\n================================================================\nconv2d_1 (Conv2D) (None, 148, 148, 32) 896\n________________________________________________________________\nmaxpooling2d_1 (MaxPooling2D) (None, 74, 74, 32) 0\n___"}
{"text": "_____________________________________________________________\nconv2d_2 (Conv2D) (None, 72, 72, 64) 18496\n________________________________________________________________\nmaxpooling2d_2 (MaxPooling2D) (None, 36, 36, 64) 0\n________________________________________________________________\nconv2d_3 (Conv2D) (None, 34, 34, 128) 73856\n________________________________________________________________\nmaxpooling2d_3 (MaxPooling2D) (None, 17, 17, 128) 0\n_____________________________________________________"}
{"text": "___________\nconv2d_4 (Conv2D) (None, 15, 15, 128) 147584\n________________________________________________________________\nmaxpooling2d_4 (MaxPooling2D) (None, 7, 7, 128) 0\n________________________________________________________________\nflatten_1 (Flatten) (None, 6272) 0\n________________________________________________________________\ndense_1 (Dense) (None, 512) 3211776\n________________________________________________________________\nLicensed to <null>\nTraining a convnet from scratch on a small "}
{"text": "dataset 135\ndense_2 (Dense) (None, 1) 513\n================================================================\nTotal params: 3,453,121\nTrainable params: 3,453,121\nNon-trainable params: 0\nFor the compilation step, you’ll go with the RMSprop optimizer, as usual. Because you\nended the network with a single sigmoid unit, you’ll use binary crossentropy as the\nloss (as a reminder, check out table 4.1 for a cheatsheet on what loss function to use in\nvarious situations).\nListing5.6 Configuring the model for"}
{"text": " training\nfrom keras import optimizers\nmodel.compile(loss='binary_crossentropy',\noptimizer=optimizers.RMSprop(lr=1e-4),\nmetrics=['acc'])\n5.2.4 Data preprocessing\nAs you know by now, data should be formatted into appropriately preprocessed floating-\npoint tensors before being fed into the network. Currently, the data sits on a drive as\nJPEG files, so the steps for getting it into the network are roughly as follows:\n1 Read the picture files.\n2 Decode the JPEG content to RGB grids of pixels.\n3 Conv"}
{"text": "ert these into floating-point tensors.\n4 Rescale the pixel values (between 0 and 255) to the [0, 1] interval (as you know,\nneural networks prefer to deal with small input values).\nIt may seem a bit daunting, but fortunately Keras has utilities to take care of these\nsteps automatically. Keras has a module with image-processing helper tools, located at\nkeras.preprocessing.image. In particular, it contains the class ImageDataGenerator,\nwhich lets you quickly set up Python generators that can automa"}
{"text": "tically turn image files\non disk into batches of preprocessed tensors. This is what you’ll use here.\nListing5.7 Using ImageDataGenerator to read images from directories\nfrom keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(rescale=1./255) Rescales all images by 1/255\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntrain_generator = train_datagen.flow_from_directory(\ntrain_dir,\ntarget_size=(150, 150) Resizes all images to 150 × 150\nTarget\nbatch_size=20,\ndir"}
{"text": "ectory\nclass_mode='binary')\nBecause you use\nvalidation_generator = test_datagen.flow_from_directory( binary_crossentropy\nvalidation_dir, loss, you need binary\nlabels.\nLicensed to <null>\n136 CHAPTER 5 Deep learning for computer vision\ntarget_size=(150, 150),\nbatch_size=20,\nclass_mode='binary')\nUnderstanding Python generators\nA Python generator is an object that acts as an iterator: it’s an object you can use\nwith the for … in operator. Generators are built using the yield operator.\nHere is an exa"}
{"text": "mple of a generator that yields integers:\ndef generator():\ni = 0\nwhile True:\ni += 1\nyield i\nfor item in generator():\nprint(item)\nif item > 4:\nbreak\nIt prints this:\n1\n2\n3\n4\n5\nLet’s look at the output of one of these generators: it yields batches of 150 × 150 RGB\nimages (shape (20, 150, 150, 3)) and binary labels (shape (20,)). There are 20 sam-\nples in each batch (the batch size). Note that the generator yields these batches indef-\ninitely: it loops endlessly over the images in the target folder."}
{"text": " For this reason, you need\nto break the iteration loop at some point:\n>>> for data_batch, labels_batch in train_generator:\n>>> print('data batch shape:', data_batch.shape)\n>>> print('labels batch shape:', labels_batch.shape)\n>>> break\ndata batch shape: (20, 150, 150, 3)\nlabels batch shape: (20,)\nLet’s fit the model to the data using the generator. You do so using the fit_generator\nmethod, the equivalent of fit for data generators like this one. It expects as its first\nargument a Python generator"}
{"text": " that will yield batches of inputs and targets indefinitely,\nlike this one does. Because the data is being generated endlessly, the Keras model\nneeds to know how many samples to draw from the generator before declaring an\nepoch over. This is the role of the steps_per_epoch argument: after having drawn\nsteps_per_epoch batches from the generator—that is, after having run for\nLicensed to <null>\nTraining a convnet from scratch on a small dataset 137\nsteps_per_epoch gradient descent steps—the fitting"}
{"text": " process will go to the next\nepoch. In this case, batches are 20 samples, so it will take 100 batches until you see\nyour target of 2,000 samples.\nWhen using fit_generator, you can pass a validation_data argument, much as\nwith the fit method. It’s important to note that this argument is allowed to be a data\ngenerator, but it could also be a tuple of Numpy arrays. If you pass a generator as\nvalidation_data, then this generator is expected to yield batches of validation data\nendlessly; thus you sho"}
{"text": "uld also specify the validation_steps argument, which tells\nthe process how many batches to draw from the validation generator for evaluation.\nListing5.8 Fitting the model using a batch generator\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=100,\nepochs=30,\nvalidation_data=validation_generator,\nvalidation_steps=50)\nIt’s good practice to always save your models after training.\nListing5.9 Saving the model\nmodel.save('cats_and_dogs_small_1.h5')\nLet’s plot the loss and accuracy of "}
{"text": "the model over the training and validation data\nduring training (see figures 5.9 and 5.10).\nListing5.10 Displaying curves of loss and accuracy during training\nimport matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation a"}
{"text": "ccuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()\nLicensed to <null>\n138 CHAPTER 5 Deep learning for computer vision\nFigure 5.9 Training and\nvalidation accuracy\nFigure 5.10 Training and\nvalidation loss\nThese plots are characteristic of overfitting. The training accuracy increases linearly\nover time, until it reaches nearly 100%, whereas "}
{"text": "the validation accuracy stalls at 70–72%.\nThe validation loss reaches its minimum after only five epochs and then stalls, whereas\nthe training loss keeps decreasing linearly until it reaches nearly 0.\nBecause you have relatively few training samples (2,000), overfitting will be your\nnumber-one concern. You already know about a number of techniques that can help\nmitigate overfitting, such as dropout and weight decay (L2 regularization). We’re now\ngoing to work with a new one, specific to computer"}
{"text": " vision and used almost universally\nwhen processing images with deep-learning models: data augmentation.\n5.2.5 Using data augmentation\nOverfitting is caused by having too few samples to learn from, rendering you unable\nto train a model that can generalize to new data. Given infinite data, your model\nLicensed to <null>\nTraining a convnet from scratch on a small dataset 139\nwould be exposed to every possible aspect of the data distribution at hand: you would\nnever overfit. Data augmentation takes "}
{"text": "the approach of generating more training data\nfrom existing training samples, by augmenting the samples via a number of random\ntransformations that yield believable-looking images. The goal is that at training time,\nyour model will never see the exact same picture twice. This helps expose the model\nto more aspects of the data and generalize better.\nIn Keras, this can be done by configuring a number of random transformations to\nbe performed on the images read by the ImageDataGenerator instance. L"}
{"text": "et’s get\nstarted with an example.\nListing5.11 Setting up a data augmentation configuration via ImageDataGenerator\ndatagen = ImageDataGenerator(\nrotation_range=40,\nwidth_shift_range=0.2,\nheight_shift_range=0.2,\nshear_range=0.2,\nzoom_range=0.2,\nhorizontal_flip=True,\nfill_mode='nearest')\nThese are just a few of the options available (for more, see the Keras documentation).\nLet’s quickly go over this code:\n rotation_range is a value in degrees (0–180), a range within which to ran-\ndomly rotate pict"}
{"text": "ures.\n width_shift and height_shift are ranges (as a fraction of total width or\nheight) within which to randomly translate pictures vertically or horizontally.\n shear_range is for randomly applying shearing transformations.\n zoom_range is for randomly zooming inside pictures.\n horizontal_flip is for randomly flipping half the images horizontally—rele-\nvant when there are no assumptions of horizontal asymmetry (for example,\nreal-world pictures).\n fill_mode is the strategy used for filling in"}
{"text": " newly created pixels, which can\nappear after a rotation or a width/height shift.\nLet’s look at the augmented images (see figure 5.11).\nListing5.12 Displaying some randomly augmented training images\nfrom keras.preprocessing import image\nModule with image-\nfnames = [os.path.join(train_cats_dir, fname) for preprocessing utilities\nfname in os.listdir(train_cats_dir)]\nimg_path = fnames[3] Chooses one image to augment\nimg = image.load_img(img_path, target_size=(150, 150))\nReads the image\nand resizes "}
{"text": "it\nLicensed to <null>\n140 CHAPTER 5 Deep learning for computer vision\nx = image.img_to_array(img) Converts it to a Numpy array with shape (150, 150, 3)\nx = x.reshape((1,) + x.shape) Reshapes it to (1, 150, 150, 3)\ni = 0\nfor batch in datagen.flow(x, batch_size=1): Generates batches of\nrandomly transformed\nplt.figure(i)\nimages. Loops indefinitely,\nimgplot = plt.imshow(image.array_to_img(batch[0]))\nso you need to break the\ni += 1\nloop at some point!\nif i % 4 == 0:\nbreak\nplt.show()\nFigure 5.11 Gener"}
{"text": "ation of cat pictures via random data augmentation\nIf you train a new network using this data-augmentation configuration, the network\nwill never see the same input twice. But the inputs it sees are still heavily intercor-\nrelated, because they come from a small number of original images—you can’t pro-\nduce new information, you can only remix existing information. As such, this may not\nbe enough to completely get rid of overfitting. To further fight overfitting, you’ll also\nadd a Dropout layer to"}
{"text": " your model, right before the densely connected classifier.\nLicensed to <null>\nTraining a convnet from scratch on a small dataset 141\nListing5.13 Defining a new convnet that includes dropout\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',\ninput_shape=(150, 150, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.a"}
{"text": "dd(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',\noptimizer=optimizers.RMSprop(lr=1e-4),\nmetrics=['acc'])\nLet’s train the network using data augmentation and dropout.\nListing5.14 Training the convnet using data-augmentation "}
{"text": "generators\ntrain_datagen = ImageDataGenerator(\nrescale=1./255,\nrotation_range=40,\nwidth_shift_range=0.2,\nheight_shift_range=0.2,\nshear_range=0.2,\nNote that the\nzoom_range=0.2,\nvalidation data\nhorizontal_flip=True,)\nshouldn’t be\ntest_datagen = ImageDataGenerator(rescale=1./255) augmented!\ntrain_generator = train_datagen.flow_from_directory(\ntrain_dir,\nTarget\ntarget_size=(150, 150), Resizes all images to 150 × 150\ndirectory\nbatch_size=32,\nclass_mode='binary')\nBecause you use\nvalidation_generator ="}
{"text": " test_datagen.flow_from_directory( binary_crossentropy\nvalidation_dir, loss, you need binary\ntarget_size=(150, 150), labels.\nbatch_size=32,\nclass_mode='binary')\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=100,\nepochs=100,\nvalidation_data=validation_generator,\nvalidation_steps=50)\nLicensed to <null>\n142 CHAPTER 5 Deep learning for computer vision\nLet’s save the model—you’ll use it in section 5.4.\nListing5.15 Saving the model\nmodel.save('cats_and_dogs_small_2.h5')\nAnd let’s plo"}
{"text": "t the results again: see figures 5.12 and 5.13. Thanks to data augmenta-\ntion and dropout, you’re no longer overfitting: the training curves are closely tracking\nthe validation curves. You now reach an accuracy of 82%, a 15% relative improvement\nover the non-regularized model.\nFigure 5.12 Training and validation\naccuracy with data augmentation\nFigure 5.13 Training and validation\nloss with data augmentation\nBy using regularization techniques even further, and by tuning the network’s parame-\nters "}
{"text": "(such as the number of filters per convolution layer, or the number of layers in\nthe network), you may be able to get an even better accuracy, likely up to 86% or 87%.\nBut it would prove difficult to go any higher just by training your own convnet from\nscratch, because you have so little data to work with. As a next step to improve your\naccuracy on this problem, you’ll have to use a pretrained model, which is the focus of\nthe next two sections.\nLicensed to <null>\nUsing a pretrained convnet 143\n5"}
{"text": ".3 Using a pretrained convnet\nA common and highly effective approach to deep learning on small image datasets is\nto use a pretrained network. A pretrained network is a saved network that was previously\ntrained on a large dataset, typically on a large-scale image-classification task. If this\noriginal dataset is large enough and general enough, then the spatial hierarchy of fea-\ntures learned by the pretrained network can effectively act as a generic model of the\nvisual world, and hence its featur"}
{"text": "es can prove useful for many different computer-\nvision problems, even though these new problems may involve completely different\nclasses than those of the original task. For instance, you might train a network on\nImageNet (where classes are mostly animals and everyday objects) and then repur-\npose this trained network for something as remote as identifying furniture items in\nimages. Such portability of learned features across different problems is a key advan-\ntage of deep learning compared to "}
{"text": "many older, shallow-learning approaches, and it\nmakes deep learning very effective for small-data problems.\nIn this case, let’s consider a large convnet trained on the ImageNet dataset\n(1.4million labeled images and 1,000 different classes). ImageNet contains many ani-\nmal classes, including different species of cats and dogs, and you can thus expect to\nperform well on the dogs-versus-cats classification problem.\nYou’ll use the VGG16 architecture, developed by Karen Simonyan and Andrew\nZisserman"}
{"text": " in 2014; it’s a simple and widely used convnet architecture for ImageNet.1\nAlthough it’s an older model, far from the current state of the art and somewhat\nheavier than many other recent models, I chose it because its architecture is similar to\nwhat you’re already familiar with and is easy to understand without introducing any\nnew concepts. This may be your first encounter with one of these cutesy model\nnames—VGG, ResNet, Inception, Inception-ResNet, Xception, and so on; you’ll get\nused to them"}
{"text": ", because they will come up frequently if you keep doing deep learning\nfor computer vision.\nThere are two ways to use a pretrained network: feature extraction and fine-tuning.\nWe’ll cover both of them. Let’s start with feature extraction.\n5.3.1 Feature extraction\nFeature extraction consists of using the representations learned by a previous network\nto extract interesting features from new samples. These features are then run through\na new classifier, which is trained from scratch.\nAs you saw pre"}
{"text": "viously, convnets used for image classification comprise two parts:\nthey start with a series of pooling and convolution layers, and they end with a densely\nconnected classifier. The first part is called the convolutional base of the model. In the\ncase of convnets, feature extraction consists of taking the convolutional base of a\n1 Karen Simonyan and Andrew Zisserman, “Very Deep Convolutional Networks for Large-Scale Image Recog-\nnition,” arXiv (2014), https://arxiv.org/abs/1409.1556.\nLicensed to"}
{"text": " <null>\n144 CHAPTER 5 Deep learning for computer vision\npreviously trained network, running the new data through it, and training a new clas-\nsifier on top of the output (see figure 5.14).\nPrediction Prediction Prediction\nTrained Trained New classifier\nclassifier classifier (randomly initialized)\nTrained Trained Trained\nconvolutional convolutional convolutional\nbase base base\n(frozen)\nInput Input Input\nFigure 5.14 Swapping classifiers while keeping the same convolutional base\nWhy only reuse the "}
{"text": "convolutional base? Could you reuse the densely connected classi-\nfier as well? In general, doing so should be avoided. The reason is that the representa-\ntions learned by the convolutional base are likely to be more generic and therefore\nmore reusable: the feature maps of a convnet are presence maps of generic concepts\nover a picture, which is likely to be useful regardless of the computer-vision problem at\nhand. But the representations learned by the classifier will necessarily be specific to "}
{"text": "the\nset of classes on which the model was trained—they will only contain information about\nthe presence probability of this or that class in the entire picture. Additionally, repre-\nsentations found in densely connected layers no longer contain any information about\nwhere objects are located in the input image: these layers get rid of the notion of space,\nwhereas the object location is still described by convolutional feature maps. For prob-\nlems where object location matters, densely connected "}
{"text": "features are largely useless.\nNote that the level of generality (and therefore reusability) of the representations\nextracted by specific convolution layers depends on the depth of the layer in the\nmodel. Layers that come earlier in the model extract local, highly generic feature\nmaps (such as visual edges, colors, and textures), whereas layers that are higher up\nextract more-abstract concepts (such as “cat ear” or “dog eye”). So if your new dataset\ndiffers a lot from the dataset on which the ori"}
{"text": "ginal model was trained, you may be bet-\nter off using only the first few layers of the model to do feature extraction, rather than\nusing the entire convolutional base.\nLicensed to <null>\nUsing a pretrained convnet 145\nIn this case, because the ImageNet class set contains multiple dog and cat classes,\nit’s likely to be beneficial to reuse the information contained in the densely connected\nlayers of the original model. But we’ll choose not to, in order to cover the more gen-\neral case where the c"}
{"text": "lass set of the new problem doesn’t overlap the class set of the\noriginal model. Let’s put this in practice by using the convolutional base of the VGG16\nnetwork, trained on ImageNet, to extract interesting features from cat and dog\nimages, and then train a dogs-versus-cats classifier on top of these features.\nThe VGG16 model, among others, comes prepackaged with Keras. You can import\nit from the keras.applications module. Here’s the list of image-classification\nmodels (all pretrained on the Imag"}
{"text": "eNet dataset) that are available as part of keras\n.applications:\n Xception\n Inception V3\n ResNet50\n VGG16\n VGG19\n MobileNet\nLet’s instantiate the VGG16 model.\nListing5.16 Instantiating the VGG16 convolutional base\nfrom keras.applications import VGG16\nconv_base = VGG16(weights='imagenet',\ninclude_top=False,\ninput_shape=(150, 150, 3))\nYou pass three arguments to the constructor:\n weights specifies the weight checkpoint from which to initialize the model.\n include_top refers to including (o"}
{"text": "r not) the densely connected classifier on\ntop of the network. By default, this densely connected classifier corresponds to\nthe 1,000 classes from ImageNet. Because you intend to use your own densely\nconnected classifier (with only two classes: cat and dog), you don’t need to\ninclude it.\n input_shape is the shape of the image tensors that you’ll feed to the network.\nThis argument is purely optional: if you don’t pass it, the network will be able to\nprocess inputs of any size.\nHere’s the detail "}
{"text": "of the architecture of the VGG16 convolutional base. It’s similar to\nthe simple convnets you’re already familiar with:\n>>> conv_base.summary()\nLayer (type) Output Shape Param #\n================================================================\ninput_1 (InputLayer) (None, 150, 150, 3) 0\nLicensed to <null>\n146 CHAPTER 5 Deep learning for computer vision\n________________________________________________________________\nblock1_conv1 (Convolution2D) (None, 150, 150, 64) 1792\n____________________________"}
{"text": "____________________________________\nblock1_conv2 (Convolution2D) (None, 150, 150, 64) 36928\n________________________________________________________________\nblock1_pool (MaxPooling2D) (None, 75, 75, 64) 0\n________________________________________________________________\nblock2_conv1 (Convolution2D) (None, 75, 75, 128) 73856\n________________________________________________________________\nblock2_conv2 (Convolution2D) (None, 75, 75, 128) 147584\n_____________________________________________________"}
{"text": "___________\nblock2_pool (MaxPooling2D) (None, 37, 37, 128) 0\n________________________________________________________________\nblock3_conv1 (Convolution2D) (None, 37, 37, 256) 295168\n________________________________________________________________\nblock3_conv2 (Convolution2D) (None, 37, 37, 256) 590080\n________________________________________________________________\nblock3_conv3 (Convolution2D) (None, 37, 37, 256) 590080\n________________________________________________________________\nblock3_pool"}
{"text": " (MaxPooling2D) (None, 18, 18, 256) 0\n________________________________________________________________\nblock4_conv1 (Convolution2D) (None, 18, 18, 512) 1180160\n________________________________________________________________\nblock4_conv2 (Convolution2D) (None, 18, 18, 512) 2359808\n________________________________________________________________\nblock4_conv3 (Convolution2D) (None, 18, 18, 512) 2359808\n________________________________________________________________\nblock4_pool (MaxPooling2D) (Non"}
{"text": "e, 9, 9, 512) 0\n________________________________________________________________\nblock5_conv1 (Convolution2D) (None, 9, 9, 512) 2359808\n________________________________________________________________\nblock5_conv2 (Convolution2D) (None, 9, 9, 512) 2359808\n________________________________________________________________\nblock5_conv3 (Convolution2D) (None, 9, 9, 512) 2359808\n________________________________________________________________\nblock5_pool (MaxPooling2D) (None, 4, 4, 512) 0\n============"}
{"text": "====================================================\nTotal params: 14,714,688\nTrainable params: 14,714,688\nNon-trainable params: 0\nThe final feature map has shape (4, 4, 512). That’s the feature on top of which you’ll\nstick a densely connected classifier.\nAt this point, there are two ways you could proceed:\n Running the convolutional base over your dataset, recording its output to a\nNumpy array on disk, and then using this data as input to a standalone, densely\nconnected classifier similar to t"}
{"text": "hose you saw in part 1 of this book. This solution\nis fast and cheap to run, because it only requires running the convolutional\nbase once for every input image, and the convolutional base is by far the most\nexpensive part of the pipeline. But for the same reason, this technique won’t\nallow you to use data augmentation.\nLicensed to <null>\nUsing a pretrained convnet 147\n Extending the model you have (conv_base) by adding Dense layers on top, and\nrunning the whole thing end to end on the input dat"}
{"text": "a. This will allow you to use\ndata augmentation, because every input image goes through the convolutional\nbase every time it’s seen by the model. But for the same reason, this technique is\nfar more expensive than the first.\nWe’ll cover both techniques. Let’s walk through the code required to set up the first\none: recording the output of conv_base on your data and using these outputs as\ninputs to a new model.\nFAST FEATURE EXTRACTION WITHOUT DATA AUGMENTATION\nYou’ll start by running instances of t"}
{"text": "he previously introduced ImageDataGenerator to\nextract images as Numpy arrays as well as their labels. You’ll extract features from\nthese images by calling the predict method of the conv_base model.\nListing5.17 Extracting features using the pretrained convolutional base\nimport os\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator\nbase_dir = '/Users/fchollet/Downloads/cats_and_dogs_small'\ntrain_dir = os.path.join(base_dir, 'train')\nvalidation_dir = os.path.join(base_dir, "}
{"text": "'validation')\ntest_dir = os.path.join(base_dir, 'test')\ndatagen = ImageDataGenerator(rescale=1./255)\nbatch_size = 20\ndef extract_features(directory, sample_count):\nfeatures = np.zeros(shape=(sample_count, 4, 4, 512))\nlabels = np.zeros(shape=(sample_count))\ngenerator = datagen.flow_from_directory(\nNote that because generators\ndirectory, yield data indefinitely in a loop,\ntarget_size=(150, 150), you must break after every\nbatch_size=batch_size, image has been seen once.\nclass_mode='binary')\ni = 0\n"}
{"text": "for inputs_batch, labels_batch in generator:\nfeatures_batch = conv_base.predict(inputs_batch)\nfeatures[i * batch_size : (i + 1) * batch_size] = features_batch\nlabels[i * batch_size : (i + 1) * batch_size] = labels_batch\ni += 1\nif i * batch_size >= sample_count:\nbreak\nreturn features, labels\ntrain_features, train_labels = extract_features(train_dir, 2000)\nvalidation_features, validation_labels = extract_features(validation_dir, 1000)\ntest_features, test_labels = extract_features(test_dir, 1000)\nT"}
{"text": "he extracted features are currently of shape (samples, 4, 4, 512). You’ll feed them\nto a densely connected classifier, so first you must flatten them to (samples, 8192):\nLicensed to <null>\n148 CHAPTER 5 Deep learning for computer vision\ntrain_features = np.reshape(train_features, (2000, 4 * 4 * 512))\nvalidation_features = np.reshape(validation_features, (1000, 4 * 4 * 512))\ntest_features = np.reshape(test_features, (1000, 4 * 4 * 512))\nAt this point, you can define your densely connected classif"}
{"text": "ier (note the use of drop-\nout for regularization) and train it on the data and labels that you just recorded.\nListing5.18 Defining and training the densely connected classifier\nfrom keras import models\nfrom keras import layers\nfrom keras import optimizers\nmodel = models.Sequential()\nmodel.add(layers.Dense(256, activation='relu', input_dim=4 * 4 * 512))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer=optimizers.RMSprop(lr=2e-5),\nloss='binar"}
{"text": "y_crossentropy',\nmetrics=['acc'])\nhistory = model.fit(train_features, train_labels,\nepochs=30,\nbatch_size=20,\nvalidation_data=(validation_features, validation_labels))\nTraining is very fast, because you only have to deal with two Dense layers—an epoch\ntakes less than one second even on CPU.\nLet’s look at the loss and accuracy curves during training (see figures 5.15 and\n5.16).\nListing5.19 Plotting the results\nimport matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = history.history["}
{"text": "'val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()\nLicensed to <null>\nUsing a pretrain"}
{"text": "ed convnet 149\nFigure 5.15 Training and validation\naccuracy for simple feature extraction\nFigure 5.16 Training and validation\nloss for simple feature extraction\nYou reach a validation accuracy of about 90%—much better than you achieved in the\nprevious section with the small model trained from scratch. But the plots also indicate\nthat you’re overfitting almost from the start—despite using dropout with a fairly large\nrate. That’s because this technique doesn’t use data augmentation, which is essen"}
{"text": "tial\nfor preventing overfitting with small image datasets.\nFEATURE EXTRACTION WITH DATA AUGMENTATION\nNow, let’s review the second technique I mentioned for doing feature extraction,\nwhich is much slower and more expensive, but which allows you to use data augmenta-\ntion during training: extending the conv_base model and running it end to end on\nthe inputs.\nNOTE This technique is so expensive that you should only attempt it if you\nhave access to a GPU—it’s absolutely intractable on CPU. If you ca"}
{"text": "n’t run your\ncode on GPU, then the previous technique is the way to go.\nLicensed to <null>\n150 CHAPTER 5 Deep learning for computer vision\nBecause models behave just like layers, you can add a model (like conv_base) to a\nSequential model just like you would add a layer.\nListing5.20 Adding a densely connected classifier on top of the convolutional base\nfrom keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.De"}
{"text": "nse(256, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nThis is what the model looks like now:\n>>> model.summary()\nLayer (type) Output Shape Param #\n================================================================\nvgg16 (Model) (None, 4, 4, 512) 14714688\n________________________________________________________________\nflatten_1 (Flatten) (None, 8192) 0\n________________________________________________________________\ndense_1 (Dense) (None, 256) 2097408\n______________________"}
{"text": "__________________________________________\ndense_2 (Dense) (None, 1) 257\n================================================================\nTotal params: 16,812,353\nTrainable params: 16,812,353\nNon-trainable params: 0\nAs you can see, the convolutional base of VGG16 has 14,714,688 parameters, which is\nvery large. The classifier you’re adding on top has 2 million parameters.\nBefore you compile and train the model, it’s very important to freeze the convolu-\ntional base. Freezing a layer or set of lay"}
{"text": "ers means preventing their weights from being\nupdated during training. If you don’t do this, then the representations that were pre-\nviously learned by the convolutional base will be modified during training. Because\nthe Dense layers on top are randomly initialized, very large weight updates would be\npropagated through the network, effectively destroying the representations previously\nlearned.\nIn Keras, you freeze a network by setting its trainable attribute to False:\n>>> print('This is the numb"}
{"text": "er of trainable weights '\n'before freezing the conv base:', len(model.trainable_weights))\nThis is the number of trainable weights before freezing the conv base: 30\n>>> conv_base.trainable = False\n>>> print('This is the number of trainable weights '\n'after freezing the conv base:', len(model.trainable_weights))\nThis is the number of trainable weights after freezing the conv base: 4\nLicensed to <null>\nUsing a pretrained convnet 151\nWith this setup, only the weights from the two Dense layers that y"}
{"text": "ou added will be\ntrained. That’s a total of four weight tensors: two per layer (the main weight matrix\nand the bias vector). Note that in order for these changes to take effect, you must first\ncompile the model. If you ever modify weight trainability after compilation, you\nshould then recompile the model, or these changes will be ignored.\nNow you can start training your model, with the same data-augmentation configu-\nration that you used in the previous example.\nListing5.21 Training the model en"}
{"text": "d to end with a frozen convolutional base\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\ntrain_datagen = ImageDataGenerator(\nrescale=1./255,\nrotation_range=40,\nwidth_shift_range=0.2,\nheight_shift_range=0.2, Note that the\nshear_range=0.2, validation data\nzoom_range=0.2, shouldn’t be\naugmented!\nhorizontal_flip=True,\nfill_mode='nearest')\ntest_datagen = ImageDataGenerator(rescale=1./255)\ntrain_generator = train_datagen.flow_from_directory(\ntrain_dir,\nTarget\ntar"}
{"text": "get_size=(150, 150), Resizes all images to 150 × 150\ndirectory\nbatch_size=20,\nclass_mode='binary')\nBecause you use\nvalidation_generator = test_datagen.flow_from_directory( binary_crossentropy\nvalidation_dir, loss, you need binary\ntarget_size=(150, 150), labels.\nbatch_size=20,\nclass_mode='binary')\nmodel.compile(loss='binary_crossentropy',\noptimizer=optimizers.RMSprop(lr=2e-5),\nmetrics=['acc'])\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=100,\nepochs=30,\nvalidation_data=validati"}
{"text": "on_generator,\nvalidation_steps=50)\nLet’s plot the results again (see figures 5.17 and 5.18). As you can see, you reach a val-\nidation accuracy of about 96%. This is much better than you achieved with the small\nconvnet trained from scratch.\nLicensed to <null>\n152 CHAPTER 5 Deep learning for computer vision\nFigure 5.17 Training and validation\naccuracy for feature extraction with\ndata augmentation\nFigure 5.18 Training and validation\nloss for feature extraction with data\naugmentation\n5.3.2 Fine-tuni"}
{"text": "ng\nAnother widely used technique for model reuse, complementary to feature\nextraction, is fine-tuning (see figure 5.19). Fine-tuning consists of unfreezing a few of\nthe top layers of a frozen model base used for feature extraction, and jointly training\nboth the newly added part of the model (in this case, the fully connected classifier)\nand these top layers. This is called fine-tuning because it slightly adjusts the more\nabstract representations of the model being reused, in order to make them m"}
{"text": "ore rele-\nvant for the problem at hand.\nLicensed to <null>\nUsing a pretrained convnet 153\nConvolution2D\nConv block 1:\nConvolution2D\nfrozen\nMaxPooling2D\nConvolution2D\nConv block 2:\nConvolution2D\nfrozen\nMaxPooling2D\nConvolution2D\nConvolution2D\nConv block 3:\nfrozen\nConvolution2D\nMaxPooling2D\nConvolution2D\nConvolution2D\nConv block 4:\nfrozen\nConvolution2D\nMaxPooling2D\nConvolution2D\nConvolution2D\nWe fine-tune\nConv block 5.\nConvolution2D\nMaxPooling2D\nFlatten\nWe fine-tune\nour own fully\nDense\nconnected\nc"}
{"text": "lassifier.\nFigure 5.19 Fine-tuning the last\nDense\nconvolutional block of the VGG16 network\nLicensed to <null>\n154 CHAPTER 5 Deep learning for computer vision\nI stated earlier that it’s necessary to freeze the convolution base of VGG16 in order to\nbe able to train a randomly initialized classifier on top. For the same reason, it’s only\npossible to fine-tune the top layers of the convolutional base once the classifier on top\nhas already been trained. If the classifier isn’t already trained, then t"}
{"text": "he error signal\npropagating through the network during training will be too large, and the represen-\ntations previously learned by the layers being fine-tuned will be destroyed. Thus the\nsteps for fine-tuning a network are as follow:\n1 Add your custom network on top of an already-trained base network.\n2 Freeze the base network.\n3 Train the part you added.\n4 Unfreeze some layers in the base network.\n5 Jointly train both these layers and the part you added.\nYou already completed the first three st"}
{"text": "eps when doing feature extraction. Let’s pro-\nceed with step 4: you’ll unfreeze your conv_base and then freeze individual layers\ninside it.\nAs a reminder, this is what your convolutional base looks like:\n>>> conv_base.summary()\nLayer (type) Output Shape Param #\n================================================================\ninput_1 (InputLayer) (None, 150, 150, 3) 0\n________________________________________________________________\nblock1_conv1 (Convolution2D) (None, 150, 150, 64) 1792\n__________"}
{"text": "______________________________________________________\nblock1_conv2 (Convolution2D) (None, 150, 150, 64) 36928\n________________________________________________________________\nblock1_pool (MaxPooling2D) (None, 75, 75, 64) 0\n________________________________________________________________\nblock2_conv1 (Convolution2D) (None, 75, 75, 128) 73856\n________________________________________________________________\nblock2_conv2 (Convolution2D) (None, 75, 75, 128) 147584\n___________________________________"}
{"text": "_____________________________\nblock2_pool (MaxPooling2D) (None, 37, 37, 128) 0\n________________________________________________________________\nblock3_conv1 (Convolution2D) (None, 37, 37, 256) 295168\n________________________________________________________________\nblock3_conv2 (Convolution2D) (None, 37, 37, 256) 590080\n________________________________________________________________\nblock3_conv3 (Convolution2D) (None, 37, 37, 256) 590080\n__________________________________________________________"}
{"text": "______\nblock3_pool (MaxPooling2D) (None, 18, 18, 256) 0\n________________________________________________________________\nblock4_conv1 (Convolution2D) (None, 18, 18, 512) 1180160\n________________________________________________________________\nblock4_conv2 (Convolution2D) (None, 18, 18, 512) 2359808\n________________________________________________________________\nblock4_conv3 (Convolution2D) (None, 18, 18, 512) 2359808\n________________________________________________________________\nblock4_pool ("}
{"text": "MaxPooling2D) (None, 9, 9, 512) 0\nLicensed to <null>\nUsing a pretrained convnet 155\n________________________________________________________________\nblock5_conv1 (Convolution2D) (None, 9, 9, 512) 2359808\n________________________________________________________________\nblock5_conv2 (Convolution2D) (None, 9, 9, 512) 2359808\n________________________________________________________________\nblock5_conv3 (Convolution2D) (None, 9, 9, 512) 2359808\n________________________________________________________"}
{"text": "________\nblock5_pool (MaxPooling2D) (None, 4, 4, 512) 0\n================================================================\nTotal params: 14714688\nYou’ll fine-tune the last three convolutional layers, which means all layers up to\nblock4_pool should be frozen, and the layers block5_conv1, block5_conv2, and\nblock5_conv3 should be trainable.\nWhy not fine-tune more layers? Why not fine-tune the entire convolutional base?\nYou could. But you need to consider the following:\n Earlier layers in the convolu"}
{"text": "tional base encode more-generic, reusable features,\nwhereas layers higher up encode more-specialized features. It’s more useful to\nfine-tune the more specialized features, because these are the ones that need to\nbe repurposed on your new problem. There would be fast-decreasing returns in\nfine-tuning lower layers.\n The more parameters you’re training, the more you’re at risk of overfitting.\nThe convolutional base has 15 million parameters, so it would be risky to\nattempt to train it on your smal"}
{"text": "l dataset.\nThus, in this situation, it’s a good strategy to fine-tune only the top two or three layers\nin the convolutional base. Let’s set this up, starting from where you left off in the pre-\nvious example.\nListing5.22 Freezing all layers up to a specific one\nconv_base.trainable = True\nset_trainable = False\nfor layer in conv_base.layers:\nif layer.name == 'block5_conv1':\nset_trainable = True\nif set_trainable:\nlayer.trainable = True\nelse:\nlayer.trainable = False\nNow you can begin fine-tuning the"}
{"text": " network. You’ll do this with the RMSProp opti-\nmizer, using a very low learning rate. The reason for using a low learning rate is that\nyou want to limit the magnitude of the modifications you make to the representations\nof the three layers you’re fine-tuning. Updates that are too large may harm these rep-\nresentations.\nLicensed to <null>\n156 CHAPTER 5 Deep learning for computer vision\nListing5.23 Fine-tuning the model\nmodel.compile(loss='binary_crossentropy',\noptimizer=optimizers.RMSprop(lr=1e-"}
{"text": "5),\nmetrics=['acc'])\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=100,\nepochs=100,\nvalidation_data=validation_generator,\nvalidation_steps=50)\nLet’s plot the results using the same plotting code as before (see figures 5.20 and 5.21).\nFigure 5.20 Training and\nvalidation accuracy for fine-tuning\nFigure 5.21 Training and\nvalidation loss for fine-tuning\nThese curves look noisy. To make them more readable, you can smooth them by\nreplacing every loss and accuracy with exponential mov"}
{"text": "ing averages of these quanti-\nties. Here’s a trivial utility function to do this (see figures 5.22 and 5.23).\nLicensed to <null>\nUsing a pretrained convnet 157\nListing5.24 Smoothing the plots\ndef smooth_curve(points, factor=0.8):\nsmoothed_points = []\nfor point in points:\nif smoothed_points:\nprevious = smoothed_points[-1]\nsmoothed_points.append(previous * factor + point * (1 - factor))\nelse:\nsmoothed_points.append(point)\nreturn smoothed_points\nplt.plot(epochs,\nsmooth_curve(acc), 'bo', label='Smoo"}
{"text": "thed training acc')\nplt.plot(epochs,\nsmooth_curve(val_acc), 'b', label='Smoothed validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs,\nsmooth_curve(loss), 'bo', label='Smoothed training loss')\nplt.plot(epochs,\nsmooth_curve(val_loss), 'b', label='Smoothed validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()\nFigure 5.22 Smoothed curves for training and validation accuracy\nfor fine-tuning\nLicensed to <null>\n158 CHAPT"}
{"text": "ER 5 Deep learning for computer vision\nFigure 5.23 Smoothed curves for training and validation loss for fine-tuning\nThe validation accuracy curve look much cleaner. You’re seeing a nice 1% absolute\nimprovement in accuracy, from about 96% to above 97%.\nNote that the loss curve doesn’t show any real improvement (in fact, it’s deteriorat-\ning). You may wonder, how could accuracy stay stable or improve if the loss isn’t\ndecreasing? The answer is simple: what you display is an average of pointwise lo"}
{"text": "ss val-\nues; but what matters for accuracy is the distribution of the loss values, not their aver-\nage, because accuracy is the result of a binary thresholding of the class probability\npredicted by the model. The model may still be improving even if this isn’t reflected\nin the average loss.\nYou can now finally evaluate this model on the test data:\ntest_generator = test_datagen.flow_from_directory(\ntest_dir,\ntarget_size=(150, 150),\nbatch_size=20,\nclass_mode='binary')\ntest_loss, test_acc = model.e"}
{"text": "valuate_generator(test_generator, steps=50)\nprint('test acc:', test_acc)\nHere you get a test accuracy of 97%. In the original Kaggle competition around this\ndataset, this would have been one of the top results. But using modern deep-learning\ntechniques, you managed to reach this result using only a small fraction of the train-\ning data available (about 10%). There is a huge difference between being able to train\non 20,000 samples compared to 2,000 samples!\nLicensed to <null>\nUsing a pretrained c"}
{"text": "onvnet 159\n5.3.3 Wrapping up\nHere’s what you should take away from the exercises in the past two sections:\n Convnets are the best type of machine-learning models for computer-vision\ntasks. It’s possible to train one from scratch even on a very small dataset, with\ndecent results.\n On a small dataset, overfitting will be the main issue. Data augmentation is a\npowerful way to fight overfitting when you’re working with image data.\n It’s easy to reuse an existing convnet on a new dataset via featu"}
{"text": "re extraction.\nThis is a valuable technique for working with small image datasets.\n As a complement to feature extraction, you can use fine-tuning, which adapts to\na new problem some of the representations previously learned by an existing\nmodel. This pushes performance a bit further.\nNow you have a solid set of tools for dealing with image-classification problems—in\nparticular with small datasets.\nLicensed to <null>\n160 CHAPTER 5 Deep learning for computer vision\n5.4 Visualizing what convnets "}
{"text": "learn\nIt’s often said that deep-learning models are “black boxes”: learning representations\nthat are difficult to extract and present in a human-readable form. Although this is\npartially true for certain types of deep-learning models, it’s definitely not true for\nconvnets. The representations learned by convnets are highly amenable to visualiza-\ntion, in large part because they’re representations of visual concepts. Since 2013, a wide\narray of techniques have been developed for visualizing and i"}
{"text": "nterpreting these repre-\nsentations. We won’t survey all of them, but we’ll cover three of the most accessible\nand useful ones:\n Visualizing intermediate convnet outputs (intermediate activations)—Useful for\nunderstanding how successive convnet layers transform their input, and for get-\nting a first idea of the meaning of individual convnet filters.\n Visualizing convnets filters—Useful for understanding precisely what visual pat-\ntern or concept each filter in a convnet is receptive to.\n Visu"}
{"text": "alizing heatmaps of class activation in an image—Useful for understanding\nwhich parts of an image were identified as belonging to a given class, thus allow-\ning you to localize objects in images.\nFor the first method—activation visualization—you’ll use the small convnet that you\ntrained from scratch on the dogs-versus-cats classification problem in section 5.2. For\nthe next two methods, you’ll use the VGG16 model introduced in section 5.3.\n5.4.1 Visualizing intermediate activations\nVisualizing i"}
{"text": "ntermediate activations consists of displaying the feature maps that are\noutput by various convolution and pooling layers in a network, given a certain input\n(the output of a layer is often called its activation, the output of the activation func-\ntion). This gives a view into how an input is decomposed into the different filters\nlearned by the network. You want to visualize feature maps with three dimensions:\nwidth, height, and depth (channels). Each channel encodes relatively independent\nfeatu"}
{"text": "res, so the proper way to visualize these feature maps is by independently plot-\nting the contents of every channel as a 2D image. Let’s start by loading the model that\nyou saved in section 5.2:\n>>> from keras.models import load_model\n>>> model = load_model('cats_and_dogs_small_2.h5')\n>>> model.summary() <1> As a reminder.\n________________________________________________________________\nLayer (type) Output Shape Param #\n================================================================\nconv2d_5 (C"}
{"text": "onv2D) (None, 148, 148, 32) 896\n________________________________________________________________\nmaxpooling2d_5 (MaxPooling2D) (None, 74, 74, 32) 0\n________________________________________________________________\nconv2d_6 (Conv2D) (None, 72, 72, 64) 18496\n________________________________________________________________\nmaxpooling2d_6 (MaxPooling2D) (None, 36, 36, 64) 0\nLicensed to <null>\nVisualizing what convnets learn 161\n________________________________________________________________\nconv2d_7"}
{"text": " (Conv2D) (None, 34, 34, 128) 73856\n________________________________________________________________\nmaxpooling2d_7 (MaxPooling2D) (None, 17, 17, 128) 0\n________________________________________________________________\nconv2d_8 (Conv2D) (None, 15, 15, 128) 147584\n________________________________________________________________\nmaxpooling2d_8 (MaxPooling2D) (None, 7, 7, 128) 0\n________________________________________________________________\nflatten_2 (Flatten) (None, 6272) 0\n______________________"}
{"text": "__________________________________________\ndropout_1 (Dropout) (None, 6272) 0\n________________________________________________________________\ndense_3 (Dense) (None, 512) 3211776\n________________________________________________________________\ndense_4 (Dense) (None, 1) 513\n================================================================\nTotal params: 3,453,121\nTrainable params: 3,453,121\nNon-trainable params: 0\nNext, you’ll get an input image—a picture of a cat, not part of the images the networ"}
{"text": "k\nwas trained on.\nListing5.25 Preprocessing a single image\nimg_path = '/Users/fchollet/Downloads/cats_and_dogs_small/test/cats/cat.1700.jpg'\nfrom keras.preprocessing import image\nPreprocesses the image\nimport numpy as np into a 4D tensor\nimg = image.load_img(img_path, target_size=(150, 150))\nimg_tensor = image.img_to_array(img)\nimg_tensor = np.expand_dims(img_tensor, axis=0)\nimg_tensor /= 255.\nRemember that the model\nwas trained on inputs that\n<1> Its shape is (1, 150, 150, 3)\nwere preprocessed "}
{"text": "this way.\nprint(img_tensor.shape)\nLet’s display the picture (see figure 5.24).\nListing5.26 Displaying the test picture\nimport matplotlib.pyplot as plt\nplt.imshow(img_tensor[0])\nplt.show()\nLicensed to <null>\n162 CHAPTER 5 Deep learning for computer vision\nFigure 5.24 The test cat picture\nIn order to extract the feature maps you want to look at, you’ll create a Keras model\nthat takes batches of images as input, and outputs the activations of all convolution and\npooling layers. To do this, you’ll u"}
{"text": "se the Keras class Model. A model is instantiated\nusing two arguments: an input tensor (or list of input tensors) and an output tensor\n(or list of output tensors). The resulting class is a Keras model, just like the Sequential\nmodels you’re familiar with, mapping the specified inputs to the specified outputs.\nWhat sets the Model class apart is that it allows for models with multiple outputs, unlike\nSequential. For more information about the Model class, see section 7.1.\nListing5.27 Instantiating"}
{"text": " a model from an input tensor and a list of output tensors\nfrom keras import models\nlayer_outputs = [layer.output for layer in model.layers[:8]]\nactivation_model = models.Model(inputs=model.input, outputs=layer_outputs)\nExtracts the outputs of Creates a model that will return these\nthe top eight layers outputs, given the model input\nWhen fed an image input, this model returns the values of the layer activations in the\noriginal model. This is the first time you’ve encountered a multi-output model"}
{"text": " in this\nbook: until now, the models you’ve seen have had exactly one input and one output.\nIn the general case, a model can have any number of inputs and outputs. This one has\none input and eight outputs: one output per layer activation.\nLicensed to <null>\nVisualizing what convnets learn 163\nListing5.28 Running the model in predict mode\nactivations = activation_model.predict(img_tensor)\nReturns a list of five\nNumpy arrays: one array\nper layer activation\nFor instance, this is the activation of t"}
{"text": "he first convolution layer for the cat image input:\n>>> first_layer_activation = activations[0]\n>>> print(first_layer_activation.shape)\n(1, 148, 148, 32)\nIt’s a 148 × 148 feature map with 32 channels. Let’s try plotting the fourth channel of\nthe activation of the first layer of the original model (see figure 5.25).\nListing5.29 Visualizing the fourth channel\nimport matplotlib.pyplot as plt\nplt.matshow(first_layer_activation[0, :, :, 4], cmap='viridis')\nFigure 5.25 Fourth channel of the activation"}
{"text": "\nof the first layer on the test cat picture\nThis channel appears to encode a diagonal edge detector. Let’s try the seventh chan-\nnel (see figure 5.26)—but note that your own channels may vary, because the specific\nfilters learned by convolution layers aren’t deterministic.\nListing5.30 Visualizing the seventh channel\nplt.matshow(first_layer_activation[0, :, :, 7], cmap='viridis')\nLicensed to <null>\n164 CHAPTER 5 Deep learning for computer vision\nFigure 5.26 Seventh channel of the activation\nof th"}
{"text": "e first layer on the test cat picture\nThis one looks like a “bright green dot” detector, useful to encode cat eyes. At this\npoint, let’s plot a complete visualization of all the activations in the network (see fig-\nure 5.27). You’ll extract and plot every channel in each of the eight activation maps,\nand you’ll stack the results in one big image tensor, with channels stacked side by side.\nListing5.31 Visualizing every channel in every intermediate activation\nlayer_names = []\nNames of the layers,"}
{"text": " so you can\nfor layer in model.layers[:8]:\nhave them as part of your plot\nlayer_names.append(layer.name)\nimages_per_row = 16 Displays the feature maps\nfor layer_name, layer_activation in zip(layer_names, activations):\nn_features = layer_activation.shape[-1]\nNumber of The feature map has shape\nfeatures in the size = layer_activation.shape[1] (1, size, size, n_features).\nfeature map\nn_cols = n_features // images_per_row\ndisplay_grid = np.zeros((size * n_cols, images_per_row * size))\nTiles the\nacti"}
{"text": "vation for col in range(n_cols): Tiles each filter into\nchannels in for row in range(images_per_row): a big horizontal grid\nthis matrix channel_image = layer_activation[0,\n:, :,\ncol * images_per_row + row]\nchannel_image -= channel_image.mean()\nPost-processes\nchannel_image /= channel_image.std()\nthe feature to\nchannel_image *= 64\nmake it visually\nchannel_image += 128\npalatable\nchannel_image = np.clip(channel_image, 0, 255).astype('uint8')\ndisplay_grid[col * size : (col + 1) * size,\nrow * size : ("}
{"text": "row + 1) * size] = channel_image\nscale = 1. / size Displays the grid\nplt.figure(figsize=(scale * display_grid.shape[1],\nscale * display_grid.shape[0]))\nplt.title(layer_name)\nplt.grid(False)\nplt.imshow(display_grid, aspect='auto', cmap='viridis')\nLicensed to <null>\nVisualizing what convnets learn 165\nFigure 5.27 Every channel of every layer activation on the test cat picture\nLicensed to <null>\n166 CHAPTER 5 Deep learning for computer vision\nThere are a few things to note here:\n The first layer a"}
{"text": "cts as a collection of various edge detectors. At that stage, the\nactivations retain almost all of the information present in the initial picture.\n As you go higher, the activations become increasingly abstract and less visually\ninterpretable. They begin to encode higher-level concepts such as “cat ear” and\n“cat eye.” Higher presentations carry increasingly less information about the\nvisual contents of the image, and increasingly more information related to the\nclass of the image.\n The sparsit"}
{"text": "y of the activations increases with the depth of the layer: in the first\nlayer, all filters are activated by the input image; but in the following layers,\nmore and more filters are blank. This means the pattern encoded by the filter\nisn’t found in the input image.\nWe have just evidenced an important universal characteristic of the representations\nlearned by deep neural networks: the features extracted by a layer become increas-\ningly abstract with the depth of the layer. The activations of highe"}
{"text": "r layers carry less\nand less information about the specific input being seen, and more and more infor-\nmation about the target (in this case, the class of the image: cat or dog). A deep neu-\nral network effectively acts as an information distillation pipeline, with raw data going in\n(in this case, RGB pictures) and being repeatedly transformed so that irrelevant infor-\nmation is filtered out (for example, the specific visual appearance of the image), and\nuseful information is magnified and refin"}
{"text": "ed (for example, the class of the image).\nThis is analogous to the way humans and animals perceive the world: after observ-\ning a scene for a few seconds, a human can remember which abstract objects were\npresent in it (bicycle, tree) but can’t remember the specific appearance of these\nobjects. In fact, if you tried to draw a generic bicycle from memory, chances are you\ncouldn’t get it even remotely right, even though you’ve seen thousands of bicycles in\nyour lifetime (see, for example, figure 5."}
{"text": "28). Try it right now: this effect is absolutely\nreal. You brain has learned to completely abstract its visual input—to transform it into\nhigh-level visual concepts while filtering out irrelevant visual details—making it tre-\nmendously difficult to remember how things around you look.\nFigure 5.28 Left: attempts\nto draw a bicycle from\nmemory. Right: what a\nschematic bicycle should\nlook like.\nLicensed to <null>\nVisualizing what convnets learn 167\n5.4.2 Visualizing convnet filters\nAnother easy way "}
{"text": "to inspect the filters learned by convnets is to display the visual pat-\ntern that each filter is meant to respond to. This can be done with gradient ascent in\ninput space: applying gradient descent to the value of the input image of a convnet so as\nto maximize the response of a specific filter, starting from a blank input image. The\nresulting input image will be one that the chosen filter is maximally responsive to.\nThe process is simple: you’ll build a loss function that maximizes the value of"}
{"text": " a\ngiven filter in a given convolution layer, and then you’ll use stochastic gradient\ndescent to adjust the values of the input image so as to maximize this activation value.\nFor instance, here’s a loss for the activation of filter 0 in the layer block3_conv1 of the\nVGG16 network, pretrained on ImageNet.\nListing5.32 Defining the loss tensor for filter visualization\nfrom keras.applications import VGG16\nfrom keras import backend as K\nmodel = VGG16(weights='imagenet',\ninclude_top=False)\nlayer_name "}
{"text": "= 'block3_conv1'\nfilter_index = 0\nlayer_output = model.get_layer(layer_name).output\nloss = K.mean(layer_output[:, :, :, filter_index])\nTo implement gradient descent, you’ll need the gradient of this loss with respect to\nthe model’s input. To do this, you’ll use the gradients function packaged with the\nbackend module of Keras.\nListing5.33 Obtaining the gradient of the loss with regard to the input\ngrads = K.gradients(loss, model.input)[0]\nThe call to gradients returns a list of\ntensors (of size 1"}
{"text": " in this case). Hence,\nyou keep only the first element—\nwhich is a tensor.\nA non-obvious trick to use to help the gradient-descent process go smoothly is to nor-\nmalize the gradient tensor by dividing it by its L2 norm (the square root of the average\nof the square of the values in the tensor). This ensures that the magnitude of the\nupdates done to the input image is always within the same range.\nListing5.34 Gradient-normalization trick\ngrads /= (K.sqrt(K.mean(K.square(grads))) + 1e-5)\nAdd 1e–5 b"}
{"text": "efore dividing\nto avoid accidentally\ndividing by 0.\nNow you need a way to compute the value of the loss tensor and the gradient tensor,\ngiven an input image. You can define a Keras backend function to do this: iterate is\nLicensed to <null>\n168 CHAPTER 5 Deep learning for computer vision\na function that takes a Numpy tensor (as a list of tensors of size 1) and returns a list of\ntwo Numpy tensors: the loss value and the gradient value.\nListing5.35 Fetching Numpy output values given Numpy input val"}
{"text": "ues\niterate = K.function([model.input], [loss, grads])\nimport numpy as np\nloss_value, grads_value = iterate([np.zeros((1, 150, 150, 3))])\nAt this point, you can define a Python loop to do stochastic gradient descent.\nListing5.36 Loss maximization via stochastic gradient descent\nStarts from a gray image\nwith some noise\ninput_img_data = np.random.random((1, 150, 150, 3)) * 20 + 128.\nstep = 1. Magnitudeofeachgradientupdate\nfor i in range(40):\nloss_value, grads_value = iterate([input_img_data]) Runs"}
{"text": " gradient\nascent for 40\ninput_img_data += grads_value * step steps\nComputes the loss value Adjusts the input image in the\nand gradient value direction that maximizes the loss\nThe resulting image tensor is a floating-point tensor of shape (1, 150, 150, 3), with\nvalues that may not be integers within [0, 255]. Hence, you need to postprocess this\ntensor to turn it into a displayable image. You do so with the following straightforward\nutility function.\nListing5.37 Utility function to convert a tenso"}
{"text": "r into a valid image\ndef deprocess_image(x):\nx -= x.mean() Normalizes the tensor:\nx /= (x.std() + 1e-5) centers on 0, ensures\nx *= 0.1 that std is 0.1\nx += 0.5\nClips to [0, 1]\nx = np.clip(x, 0, 1)\nx *= 255\nx = np.clip(x, 0, 255).astype('uint8') Converts to an RGB array\nreturn x\nNow you have all the pieces. Let’s put them together into a Python function that takes\nas input a layer name and a filter index, and returns a valid image tensor representing\nthe pattern that maximizes the activation of t"}
{"text": "he specified filter.\nLicensed to <null>\nVisualizing what convnets learn 169\nListing5.38 Function to generate filter visualizations\nBuilds a loss function that maximizes Computes the\nthe activation of the nth filter of the gradient of the\nlayer under consideration input picture with\nregard to this loss\ndef generate_pattern(layer_name, filter_index, size=150):\nlayer_output = model.get_layer(layer_name).output Normalization\nloss = K.mean(layer_output[:, :, :, filter_index]) trick: normalizes\nthe gr"}
{"text": "adient\ngrads = K.gradients(loss, model.input)[0]\ngrads /= (K.sqrt(K.mean(K.square(grads))) + 1e-5) Returns the loss\nand grads given\niterate = K.function([model.input], [loss, grads]) the input picture\ninput_img_data = np.random.random((1, size, size, 3)) * 20 + 128.\nRuns step = 1.\nStarts from a\ngradient for i in range(40): gray image with\nascent for loss_value, grads_value = iterate([input_img_data]) some noise\n40 steps input_img_data += grads_value * step\nimg = input_img_data[0]\nreturn deproces"}
{"text": "s_image(img)\nLet’s try it (see figure 5.29):\n>>> plt.imshow(generate_pattern('block3_conv1', 0))\nFigure 5.29 Pattern that the zeroth\nchannel in layer block3_conv1\nresponds to maximally\nIt seems that filter 0 in layer block3_conv1 is responsive to a polka-dot pattern. Now\nthe fun part: you can start visualizing every filter in every layer. For simplicity, you’ll\nonly look at the first 64 filters in each layer, and you’ll only look at the first layer of\neach convolution block (block1_conv1, block2"}
{"text": "_conv1, block3_conv1, block4_\nconv1, block5_conv1). You’ll arrange the outputs on an 8 × 8 grid of 64 × 64 filter pat-\nterns, with some black margins between each filter pattern (see figures 5.30–5.33).\nLicensed to <null>\n170 CHAPTER 5 Deep learning for computer vision\nListing5.39 Generating a grid of all filter response patterns in a layer\nlayer_name = 'block1_conv1'\nEmpty (black) image\nsize = 64\nto store results\nmargin = 5\nresults = np.zeros((8 * size + 7 * margin, 8 * size + 7 * margin, 3))\nf"}
{"text": "or i in range(8): Iterates over the rows of the results grid\nfor j in range(8): Iterates over the columns of the results grid\nfilter_img = generate_pattern(layer_name, i + (j * 8), size=size)\nGenerates the horizontal_start = i * size + i * margin\npattern for horizontal_end = horizontal_start + size Puts the result\nfilter i + (j * 8) vertical_start = j * size + j * margin in the square\nin layer_name vertical_end = vertical_start + size (i, j) of the\nresults grid\nresults[horizontal_start: horizont"}
{"text": "al_end,\nvertical_start: vertical_end, :] = filter_img\nplt.figure(figsize=(20, 20))\nDisplays the results grid\nplt.imshow(results)\nFigure 5.30 Filter patterns for layer block1_conv1\nLicensed to <null>\nVisualizing what convnets learn 171\nFigure 5.31 Filter patterns for layer block2_conv1\nFigure 5.32 Filter patterns for layer block3_conv1\nLicensed to <null>\n172 CHAPTER 5 Deep learning for computer vision\nFigure 5.33 Filter patterns for layer block4_conv1\nThese filter visualizations tell you a lot ab"}
{"text": "out how convnet layers see the world: each\nlayer in a convnet learns a collection of filters such that their inputs can be expressed\nas a combination of the filters. This is similar to how the Fourier transform decom-\nposes signals onto a bank of cosine functions. The filters in these convnet filter banks\nget increasingly complex and refined as you go higher in the model:\n The filters from the first layer in the model (block1_conv1) encode simple\ndirectional edges and colors (or colored edges, "}
{"text": "in some cases).\n The filters from block2_conv1 encode simple textures made from combina-\ntions of edges and colors.\n The filters in higher layers begin to resemble textures found in natural images:\nfeathers, eyes, leaves, and so on.\n5.4.3 Visualizing heatmaps of class activation\nI’ll introduce one more visualization technique: one that is useful for understanding\nwhich parts of a given image led a convnet to its final classification decision. This is\nhelpful for debugging the decision process "}
{"text": "of a convnet, particularly in the case of a\nclassification mistake. It also allows you to locate specific objects in an image.\nThis general category of techniques is called class activation map (CAM) visualization,\nand it consists of producing heatmaps of class activation over input images. A class acti-\nvation heatmap is a 2D grid of scores associated with a specific output class, computed\nfor every location in any input image, indicating how important each location is with\nLicensed to <null>\nV"}
{"text": "isualizing what convnets learn 173\nrespect to the class under consideration. For instance, given an image fed into a dogs-\nversus-cats convnet, CAM visualization allows you to generate a heatmap for the class\n“cat,” indicating how cat-like different parts of the image are, and also a heatmap for the\nclass “dog,” indicating how dog-like parts of the image are.\nThe specific implementation you’ll use is the one described in “Grad-CAM: Visual\nExplanations from Deep Networks via Gradient-based Locali"}
{"text": "zation.”2 It’s very simple:\nit consists of taking the output feature map of a convolution layer, given an input\nimage, and weighing every channel in that feature map by the gradient of the class\nwith respect to the channel. Intuitively, one way to understand this trick is that you’re\nweighting a spatial map of “how intensely the input image activates different chan-\nnels” by “how important each channel is with regard to the class,” resulting in a spatial\nmap of “how intensely the input image act"}
{"text": "ivates the class.”\nWe’ll demonstrate this technique using the pretrained VGG16 network again.\nListing5.40 Loading the VGG16 network with pretrained weights\nNote that you include the densely\nfrom keras.applications.vgg16 import VGG16\nconnected classifier on top; in all\nmodel = VGG16(weights='imagenet') previous cases, you discarded it.\nConsider the image of two African elephants shown in figure 5.34 (under a Creative\nCommons license), possibly a mother and her calf, strolling on the savanna. Let’"}
{"text": "s con-\nvert this image into something the VGG16 model can read: the model was trained on\nimages of size 224 × 244, preprocessed according to a few rules that are packaged in\nthe utility function keras.applications.vgg16.preprocess_input. So you need to\nload the image, resize it to 224 × 224, convert it to a Numpy float32 tensor, and apply\nthese preprocessing rules.\nFigure 5.34 Test picture of African elephants\n2 Ramprasaath R. Selvaraju et al., arXiv (2017), https://arxiv.org/abs/ 1610.02391.\nLi"}
{"text": "censed to <null>\n174 CHAPTER 5 Deep learning for computer vision\nListing5.41 Preprocessing an input image for VGG16\nfrom keras.preprocessing import image\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nimport numpy as np\nimg_path = '/Users/fchollet/Downloads/creative_commons_elephant.jpg'\nimg = image.load_img(img_path, target_size=(224, 224))\nx = image.img_to_array(img) float32 Numpy array of shape\n(224, 224, 3)\nx = np.expand_dims(x, axis=0)\nx = preprocess_input(x) Adds"}
{"text": " a dimension to transform the array\ninto a batch of size (1, 224, 224, 3)\nPython Imaging Library (PIL) image\nPreprocesses the batch (this does\nof size 224 × 224\nchannel-wise color normalization)\nLocal path to the target image\nYou can now run the pretrained network on the image and decode its prediction vec-\ntor back to a human-readable format:\n>>> preds = model.predict(x)\n>>> print('Predicted:', decode_predictions(preds, top=3)[0])\nPredicted:', [(u'n02504458', u'African_elephant', 0.92546833),\n("}
{"text": "u'n01871265', u'tusker', 0.070257246),\n(u'n02504013', u'Indian_elephant', 0.0042589349)]\nThe top three classes predicted for this image are as follows:\n African elephant (with 92.5% probability)\n Tusker (with 7% probability)\n Indian elephant (with 0.4% probability)\nThe network has recognized the image as containing an undetermined quantity of\nAfrican elephants. The entry in the prediction vector that was maximally activated is\nthe one corresponding to the “African elephant” class, at index 38"}
{"text": "6:\n>>> np.argmax(preds[0])\n386\nTo visualize which parts of the image are the most African elephant–like, let’s set up\nthe Grad-CAM process.\nListing5.42 Setting up the Grad-CAM algorithm\n“African elephant” entry in the\nprediction vector\nOutput feature map of\nthe block5_conv3 layer,\nafrican_e66lephant_output = model.output[:, 386]\nthe last convolutional\nlast_conv_layer = model.get_layer('block5_conv3') layer in VGG16\nLicensed to <null>\nVisualizing what convnets learn 175\nGradient of the “African V"}
{"text": "ector of shape (512,), where each entry\nelephant” class with regard to is the mean intensity of the gradient\nthe output feature map of over a specific feature-map channel\nblock5_conv3\ngrads = K.gradients(african_elephant_output, last_conv_layer.output)[0]\npooled_grads = K.mean(grads, axis=(0, 1, 2))\niterate = K.function([model.input],\n[pooled_grads, last_conv_layer.output[0]])\npooled_grads_value, conv_layer_output_value = iterate([x])\nfor i in range(512):\nconv_layer_output_value[:, :, i] *= pool"}
{"text": "ed_grads_value[i]\nheatmap = np.mean(conv_layer_output_value, axis=-1)\nThe channel-wise mean of Multiplies each\nValues of these two quantities, as\nthe resulting feature map channel in the\nNumpy arrays, given the sample image\nis the heatmap of the feature-map array\nof two elephants\nclass activation. by “how\nimportant this\nLets you access the values of the quantities channel is” with\nyou just defined: pooled_grads and the regard to the\noutput feature map of block5_conv3, given “elephant” class\na sa"}
{"text": "mple image\nFor visualization purposes, you’ll also normalize the heatmap between 0 and 1. The\nresult is shown in figure 5.35.\nListing5.43 Heatmap post-processing\nheatmap = np.maximum(heatmap, 0)\nheatmap /= np.max(heatmap)\nplt.matshow(heatmap)\n0 2 4 6 8 10 12\n0\n2\n4\n6\n8\n10\n12\nFigure 5.35 African elephant class\nactivation heatmap over the test picture\nLicensed to <null>\n176 CHAPTER 5 Deep learning for computer vision\nFinally, you’ll use OpenCV to generate an image that superimposes the original ima"}
{"text": "ge\non the heatmap you just obtained (see figure 5.36).\nListing5.44 Superimposing the heatmap with the original picture\nimport cv2 Resizes the heatmap to\nUses cv2 to load the\nbe the same size as the\nimg = cv2.imread(img_path) original image\noriginal image\nheatmap = cv2.resize(heatmap, (img.shape[1], img.shape[0]))\nheatmap = np.uint8(255 * heatmap)\nConverts the\nheatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET) heatmap to RGB\nsuperimposed_img = heatmap * 0.4 + img\ncv2.imwrite('/Users/fchollet/"}
{"text": "Downloads/elephant_cam.jpg', superimposed_img)\n0.4 here is a heatmap\nintensity factor.\nSaves the image to disk\nApplies the heatmap to the\noriginal image\nFigure 5.36 Superimposing the class activation heatmap on the original picture\nThis visualization technique answers two important questions:\n Why did the network think this image contained an African elephant?\n Where is the African elephant located in the picture?\nIn particular, it’s interesting to note that the ears of the elephant calf are s"}
{"text": "trongly acti-\nvated: this is probably how the network can tell the difference between African and\nIndian elephants.\nLicensed to <null>\nVisualizing what convnets learn 177\nChapter summary\n Convnets are the best tool for attacking visual-classification problems.\n Convnets work by learning a hierarchy of modular patterns and concepts\nto represent the visual world.\n The representations they learn are easy to inspect—convnets are the\nopposite of black boxes!\n You’re now capable of training your o"}
{"text": "wn convnet from scratch to solve an\nimage-classification problem.\n You understand how to use visual data augmentation to fight overfitting.\n You know how to use a pretrained convnet to do feature extraction and\nfine-tuning.\n You can generate visualizations of the filters learned by your convnets, as\nwell as heatmaps of class activity.\nLicensed to <null>\nDeep learning for\ntext and sequences\nThis chapter covers\n Preprocessing text data into useful\nrepresentations\n Working with recurrent neura"}
{"text": "l networks\n Using 1D convnets for sequence processing\nThis chapter explores deep-learning models that can process text (understood as\nsequences of word or sequences of characters), timeseries, and sequence data in\ngeneral. The two fundamental deep-learning algorithms for sequence processing\nare recurrent neural networks and 1D convnets, the one-dimensional version of the 2D\nconvnets that we covered in the previous chapters. We’ll discuss both of these\napproaches in this chapter.\nApplications of"}
{"text": " these algorithms include the following:\n Document classification and timeseries classification, such as identifying the\ntopic of an article or the author of a book\n Timeseries comparisons, such as estimating how closely related two docu-\nments or two stock tickers are\n178\nLicensed to <null>\n179\n Sequence-to-sequence learning, such as decoding an English sentence into\nFrench\n Sentiment analysis, such as classifying the sentiment of tweets or movie reviews\nas positive or negative\n Timeseries"}
{"text": " forecasting, such as predicting the future weather at a certain loca-\ntion, given recent weather data\nThis chapter’s examples focus on two narrow tasks: sentiment analysis on the IMDB\ndataset, a task we approached earlier in the book, and temperature forecasting. But\nthe techniques demonstrated for these two tasks are relevant to all the applications\njust listed, and many more.\nLicensed to <null>\n180 CHAPTER 6 Deep learning for text and sequences\n6.1 Working with text data\nText is one of the mo"}
{"text": "st widespread forms of sequence data. It can be understood as\neither a sequence of characters or a sequence of words, but it’s most common to work\nat the level of words. The deep-learning sequence-processing models introduced in\nthe following sections can use text to produce a basic form of natural-language under-\nstanding, sufficient for applications including document classification, sentiment\nanalysis, author identification, and even question-answering (QA) (in a constrained\ncontext). Of cour"}
{"text": "se, keep in mind throughout this chapter that none of these deep-\nlearning models truly understand text in a human sense; rather, these models can\nmap the statistical structure of written language, which is sufficient to solve many sim-\nple textual tasks. Deep learning for natural-language processing is pattern recognition\napplied to words, sentences, and paragraphs, in much the same way that computer\nvision is pattern recognition applied to pixels.\nLike all other neural networks, deep-learning "}
{"text": "models don’t take as input raw text:\nthey only work with numeric tensors. Vectorizing text is the process of transforming text\ninto numeric tensors. This can be done in multiple ways:\n Segment text into words, and transform each word into a vector.\n Segment text into characters, and transform each character into a vector.\n Extract n-grams of words or characters, and transform each n-gram into a vector.\nN-grams are overlapping groups of multiple consecutive words or characters.\nCollectively, t"}
{"text": "he different units into which you can break down text (words, charac-\nters, or n-grams) are called tokens, and breaking text into such tokens is called tokeniza-\ntion. All text-vectorization processes consist of applying some tokenization scheme and\nthen associating numeric vectors with the generated tokens. These vectors, packed\ninto sequence tensors, are fed into deep neural networks. There are multiple ways to\nassociate a vector with a token. In this section, I’ll present two major ones: one-"}
{"text": "hot\nencoding of tokens, and token embedding (typically used exclusively for words, and called\nword embedding). The remainder of this section explains these techniques and shows\nhow to use them to go from raw text to a Numpy tensor that you can send to a Keras\nnetwork.\nText\n“The cat sat on the mat.”\nTokens\n“the”, “cat”, “sat”, “on”, “the”, “mat”, “.”\nVector encoding of the tokens\n0.0 0.0 0.4 0.0 0.0 1.0 0.0\n0.5 1.0 0.5 0.2 0.5 0.5 0.0\n1.0 0.2 1.0 1.0 1.0 0.0 0.0 Figure 6.1 From text\nthe cat sat o"}
{"text": "n the mat .\nto tokens to vectors\nLicensed to <null>\nWorking with text data 181\nUnderstanding n-grams and bag-of-words\nWord n-grams are groups of N (or fewer) consecutive words that you can extract from\na sentence. The same concept may also be applied to characters instead of words.\nHere’s a simple example. Consider the sentence “The cat sat on the mat.” It may be\ndecomposed into the following set of 2-grams:\n{\"The\", \"The cat\", \"cat\", \"cat sat\", \"sat\",\n\"sat on\", \"on\", \"on the\", \"the\", \"the mat\", "}
{"text": "\"mat\"}\nIt may also be decomposed into the following set of 3-grams:\n{\"The\", \"The cat\", \"cat\", \"cat sat\", \"The cat sat\",\n\"sat\", \"sat on\", \"on\", \"cat sat on\", \"on the\", \"the\",\n\"sat on the\", \"the mat\", \"mat\", \"on the mat\"}\nSuch a set is called a bag-of-2-grams or bag-of-3-grams, respectively. The term bag\nhere refers to the fact that you’re dealing with a set of tokens rather than a list or\nsequence: the tokens have no specific order. This family of tokenization methods is\ncalled bag-of-words.\nBeca"}
{"text": "use bag-of-words isn’t an order-preserving tokenization method (the tokens gen-\nerated are understood as a set, not a sequence, and the general structure of the sen-\ntences is lost), it tends to be used in shallow language-processing models rather than\nin deep-learning models. Extracting n-grams is a form of feature engineering, and\ndeep learning does away with this kind of rigid, brittle approach, replacing it with hier-\narchical feature learning. One-dimensional convnets and recurrent neural n"}
{"text": "etworks,\nintroduced later in this chapter, are capable of learning representations for groups of\nwords and characters without being explicitly told about the existence of such groups,\nby looking at continuous word or character sequences. For this reason, we won’t\ncover n-grams any further in this book. But do keep in mind that they’re a powerful,\nunavoidable feature-engineering tool when using lightweight, shallow text-processing\nmodels such as logistic regression and random forests.\n6.1.1 One-h"}
{"text": "ot encoding of words and characters\nOne-hot encoding is the most common, most basic way to turn a token into a vector.\nYou saw it in action in the initial IMDB and Reuters examples in chapter 3 (done with\nwords, in that case). It consists of associating a unique integer index with every word\nand then turning this integer index i into a binary vector of size N (the size of the\nvocabulary); the vector is all zeros except for the ith entry, which is 1.\nOf course, one-hot encoding can be done at the"}
{"text": " character level, as well. To unam-\nbiguously drive home what one-hot encoding is and how to implement it, listings 6.1\nand 6.2 show two toy examples: one for words, the other for characters.\nLicensed to <null>\n182 CHAPTER 6 Deep learning for text and sequences\nListing6.1 Word-level one-hot encoding (toy example)\nBuilds an index of all tokens in the data\nTokenizes the samples via the split\nInitial data: one entry per sample (in method. In real life, you’d also strip\nthis example, a sample is a s"}
{"text": "entence, punctuation and special characters\nbut it could be an entire document) from the samples.\nimport numpy as np\nsamples = ['The cat sat on the mat.', 'The dog ate my homework.']\ntoken_index = {}\nfor sample in samples:\nfor word in sample.split():\nif word not in token_index:\ntoken_index[word] = len(token_index) + 1\nmax_length = 10\nresults = np.zeros(shape=(len(samples),\nmax_length,\nmax(token_index.values()) + 1))\nfor i, sample in enumerate(samples):\nfor j, word in list(enumerate(sample.split("}
{"text": ")))[:max_length]:\nindex = token_index.get(word)\nresults[i, j, index] = 1.\nThis is where you\nstore the results.\nAssigns a unique index to each\nunique word. Note that you don’t Vectorizes the samples. You’ll only\nattribute index 0 to anything. consider the first max_length\nwords in each sample.\nListing6.2 Character-level one-hot encoding (toy example)\nimport string\nsamples = ['The cat sat on the mat.', 'The dog ate my homework.']\ncharacters = string.printable\ntoken_index = dict(zip(range(1, len(ch"}
{"text": "aracters) + 1), characters))\nmax_length = 50\nresults = np.zeros((len(samples), max_length, max(token_index.keys()) + 1))\nfor i, sample in enumerate(samples):\nfor j, character in enumerate(sample):\nindex = token_index.get(character) All printable ASCII\nresults[i, j, index] = 1. characters\nNote that Keras has built-in utilities for doing one-hot encoding of text at the word level\nor character level, starting from raw text data. You should use these utilities, because\nthey take care of a number of "}
{"text": "important features such as stripping special characters\nfrom strings and only taking into account the N most common words in your dataset (a\ncommon restriction, to avoid dealing with very large input vector spaces).\nLicensed to <null>\nWorking with text data 183\nListing6.3 Using Keras for word-level one-hot encoding\nCreates a tokenizer, configured\nto only take into account the\nfrom keras.preprocessing.text import Tokenizer 1,000 most common words\nsamples = ['The cat sat on the mat.', 'The dog ate"}
{"text": " my homework.']\ntokenizer = Tokenizer(num_words=1000)\ntokenizer.fit_on_texts(samples)\nBuilds Turns strings into lists\nthe sequences = tokenizer.texts_to_sequences(samples) of integer indices\nword\nindex one_hot_results = tokenizer.texts_to_matrix(samples, mode='binary')\nword_index = tokenizer.word_index\nprint('Found %s unique tokens.' % len(word_index))\nHow you can recover\nthe word index that\nYou could also directly get the one-hot\nwas computed\nbinary representations. Vectorization\nmodes other th"}
{"text": "an one-hot encoding\nare supported by this tokenizer.\nA variant of one-hot encoding is the so-called one-hot hashing trick, which you can use\nwhen the number of unique tokens in your vocabulary is too large to handle explicitly.\nInstead of explicitly assigning an index to each word and keeping a reference of these\nindices in a dictionary, you can hash words into vectors of fixed size. This is typically\ndone with a very lightweight hashing function. The main advantage of this method is\nthat it doe"}
{"text": "s away with maintaining an explicit word index, which saves memory and\nallows online encoding of the data (you can generate token vectors right away, before\nyou’ve seen all of the available data). The one drawback of this approach is that it’s\nsusceptible to hash collisions: two different words may end up with the same hash, and\nsubsequently any machine-learning model looking at these hashes won’t be able to tell\nthe difference between these words. The likelihood of hash collisions decreases whe"}
{"text": "n\nthe dimensionality of the hashing space is much larger than the total number of\nunique tokens being hashed.\nListing6.4 Word-level one-hot encoding with hashing trick (toy example)\nsamples = ['The cat sat on the mat.', 'The dog ate my homework.']\ndimensionality = 1000\nmax_length = 10\nresults = np.zeros((len(samples), max_length, dimensionality))\nfor i, sample in enumerate(samples):\nfor j, word in list(enumerate(sample.split()))[:max_length]:\nindex = abs(hash(word)) % dimensionality\nresults[i, j"}
{"text": ", index] = 1.\nHashes the word into a\nStores the words as vectors of size 1,000. If you have close random integer index\nto 1,000 words (or more), you’ll see many hash collisions, between 0 and 1,000\nwhich will decrease the accuracy of this encoding method.\nLicensed to <null>\n184 CHAPTER 6 Deep learning for text and sequences\n6.1.2 Using word embeddings\nAnother popular and powerful way to associate a vector with a word is the use of dense\nword vectors, also called word embeddings. Whereas the vect"}
{"text": "ors obtained through one-hot\nencoding are binary, sparse (mostly made of zeros), and very high-dimensional (same\ndimensionality as the number of words in the vocabulary), word embeddings are low-\ndimensional floating-point vectors (that is, dense vectors, as opposed to sparse vec-\ntors); see figure 6.2. Unlike the word vectors obtained via one-hot encoding, word\nembeddings are learned from data. It’s common to see word embeddings that are\n256-dimensional, 512-dimensional, or 1,024-dimensional wh"}
{"text": "en dealing with very large\nvocabularies. On the other hand, one-hot encoding words generally leads to vectors\nthat are 20,000-dimensional or greater (capturing a vocabulary of 20,000 tokens, in\nthis case). So, word embeddings pack more information into far fewer dimensions.\nFigure 6.2 Whereas word representations\nobtained from one-hot encoding or hashing are\nOne-hot word vectors: Word embeddings:\nsparse, high-dimensional, and hardcoded, word\n- Sparse - Dense\nembeddings are dense, relatively low-"}
{"text": "\n- High-dimensional - Lower-dimensional\n- Hardcoded - Learned from data dimensional, and learned from data.\nThere are two ways to obtain word embeddings:\n Learn word embeddings jointly with the main task you care about (such as doc-\nument classification or sentiment prediction). In this setup, you start with ran-\ndom word vectors and then learn word vectors in the same way you learn the\nweights of a neural network.\n Load into your model word embeddings that were precomputed using a differ-\nent"}
{"text": " machine-learning task than the one you’re trying to solve. These are called\npretrained word embeddings.\nLet’s look at both.\nLicensed to <null>\nWorking with text data 185\nLEARNING WORD EMBEDDINGS WITH THE EMBEDDING LAYER\nThe simplest way to associate a dense vector with a word is to choose the vector at\nrandom. The problem with this approach is that the resulting embedding space has\nno structure: for instance, the words accurate and exact may end up with completely\ndifferent embeddings, even tho"}
{"text": "ugh they’re interchangeable in most sentences. It’s\ndifficult for a deep neural network to make sense of such a noisy, unstructured\nembedding space.\nTo get a bit more abstract, the geometric relationships between word vectors\nshould reflect the semantic relationships between these words. Word embeddings are\nmeant to map human language into a geometric space. For instance, in a reasonable\nembedding space, you would expect synonyms to be embedded into similar word vec-\ntors; and in general, you wo"}
{"text": "uld expect the geometric distance (such as L2 distance)\nbetween any two word vectors to relate to the semantic distance between the associ-\nated words (words meaning different things are embedded at points far away from\neach other, whereas related words are closer). In addition to distance, you may want\nspecific directions in the embedding space to be meaningful. To make this clearer, let’s\nlook at a concrete example.\nIn figure 6.3, four words are embedded on a 2D plane:\ncat, dog, wolf, and tige"}
{"text": "r. With the vector representations we\nchose here, some semantic relationships between these 1 Wolf\nTiger\nwords can be encoded as geometric transformations. For\ninstance, the same vector allows us to go from cat to tiger Dog\nCat\nand from dog to wolf: this vector could be interpreted as the\n“from pet to wild animal” vector. Similarly, another vector\n0 X\nlets us go from dog to cat and from wolf to tiger, which could 0 1\nbe interpreted as a “from canine to feline” vector.\nFigure 6.3 A toy example\nIn"}
{"text": " real-world word-embedding spaces, common exam- of a word-embedding space\nples of meaningful geometric transformations are “gender”\nvectors and “plural” vectors. For instance, by adding a “female” vector to the vector\n“king,” we obtain the vector “queen.” By adding a “plural” vector, we obtain “kings.”\nWord-embedding spaces typically feature thousands of such interpretable and poten-\ntially useful vectors.\nIs there some ideal word-embedding space that would perfectly map human lan-\nguage and cou"}
{"text": "ld be used for any natural-language-processing task? Possibly, but we\nhave yet to compute anything of the sort. Also, there is no such a thing as human lan-\nguage—there are many different languages, and they aren’t isomorphic, because a lan-\nguage is the reflection of a specific culture and a specific context. But more\npragmatically, what makes a good word-embedding space depends heavily on your task:\nthe perfect word-embedding space for an English-language movie-review sentiment-\nanalysis model"}
{"text": " may look different from the perfect embedding space for an English-\nlanguage legal-document-classification model, because the importance of certain\nsemantic relationships varies from task to task.\nLicensed to <null>\n186 CHAPTER 6 Deep learning for text and sequences\nIt’s thus reasonable to learn a new embedding space with every new task. Fortu-\nnately, backpropagation makes this easy, and Keras makes it even easier. It’s about\nlearning the weights of a layer: the Embedding layer.\nListing6.5 Ins"}
{"text": "tantiating an Embedding layer\nfrom keras.layers import Embedding The Embedding layer takes at least two\narguments: the number of possible tokens\nembedding_layer = Embedding(1000, 64) (here, 1,000: 1 + maximum word index)\nand the dimensionality of the embeddings\n(here, 64).\nThe Embedding layer is best understood as a dictionary that maps integer indices\n(which stand for specific words) to dense vectors. It takes integers as input, it looks up\nthese integers in an internal dictionary, and it retur"}
{"text": "ns the associated vectors. It’s effec-\ntively a dictionary lookup (see figure 6.4).\nWord index Embedding layer Corresponding word vector\nFigure 6.4 The Embedding layer\nThe Embedding layer takes as input a 2D tensor of integers, of shape (samples,\nsequence_length), where each entry is a sequence of integers. It can embed\nsequences of variable lengths: for instance, you could feed into the Embedding layer in\nthe previous example batches with shapes (32, 10) (batch of 32 sequences of length\n10) or "}
{"text": "(64, 15) (batch of 64 sequences of length 15). All sequences in a batch must\nhave the same length, though (because you need to pack them into a single tensor),\nso sequences that are shorter than others should be padded with zeros, and sequences\nthat are longer should be truncated.\nThis layer returns a 3D floating-point tensor of shape (samples, sequence_\nlength, embedding_dimensionality). Such a 3D tensor can then be processed by\nan RNN layer or a 1D convolution layer (both will be introduced in"}
{"text": " the following\nsections).\nWhen you instantiate an Embedding layer, its weights (its internal dictionary of\ntoken vectors) are initially random, just as with any other layer. During training, these\nword vectors are gradually adjusted via backpropagation, structuring the space into\nsomething the downstream model can exploit. Once fully trained, the embedding\nspace will show a lot of structure—a kind of structure specialized for the specific prob-\nlem for which you’re training your model.\nLet’s app"}
{"text": "ly this idea to the IMDB movie-review sentiment-prediction task that\nyou’re already familiar with. First, you’ll quickly prepare the data. You’ll restrict the\nmovie reviews to the top 10,000 most common words (as you did the first time you\nworked with this dataset) and cut off the reviews after only 20 words. The network will\nlearn 8-dimensional embeddings for each of the 10,000 words, turn the input integer\nLicensed to <null>\nWorking with text data 187\nsequences (2D integer tensor) into embedde"}
{"text": "d sequences (3D float tensor), flatten the\ntensor to 2D, and train a single Dense layer on top for classification.\nListing6.6 Loading the IMDB data for use with an Embedding layer\nfrom keras.datasets import imdb\nCuts off the text after this\nfrom keras import preprocessing Number of words to\nnumber of words (among\nconsider as features\nmax_features = 10000 the max_features most\nmaxlen = 20 common words)\n(x_train, y_train), (x_test, y_test) = imdb.load_data(\nnum_words=max_features) Loads the data a"}
{"text": "s lists of integers\nx_train = preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen\nx_test = preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen)\nTurns the lists of integers into\na 2D integer tensor of shape\n(samples, maxlen)\nListing6.7 Using an Embedding layer and classifier on the IMDB data\nSpecifies the maximum input length to the\nEmbedding layer so you can later flatten the\nembedded inputs. After the Embedding layer,\nthe activations have shape (samples, maxlen, 8). Flattens the "}
{"text": "3D tensor of\nembeddings into a 2D\ntensor of shape (samples,\nfrom keras.models import Sequential\nmaxlen * 8)\nfrom keras.layers import Flatten, Dense\nmodel = Sequential()\nmodel.add(Embedding(10000, 8, input_length=maxlen))\nmodel.add(Flatten()) Adds the\nclassifier on top\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\nmodel.summary()\nhistory = model.fit(x_train, y_train,\nepochs=10,\nbatch_size=32,\nvalidation_split=0.2)\nYou get"}
{"text": " to a validation accuracy of ~76%, which is pretty good considering that you’re\nonly looking at the first 20 words in every review. But note that merely flattening the\nembedded sequences and training a single Dense layer on top leads to a model that\ntreats each word in the input sequence separately, without considering inter-word\nrelationships and sentence structure (for example, this model would likely treat both\n“this movie is a bomb” and “this movie is the bomb” as being negative reviews). It"}
{"text": "’s\nmuch better to add recurrent layers or 1D convolutional layers on top of the embed-\nded sequences to learn features that take into account each sequence as a whole.\nThat’s what we’ll focus on in the next few sections.\nLicensed to <null>\n188 CHAPTER 6 Deep learning for text and sequences\nUSING PRETRAINED WORD EMBEDDINGS\nSometimes, you have so little training data available that you can’t use your data\nalone to learn an appropriate task-specific embedding of your vocabulary. What do\nyou do then"}
{"text": "?\nInstead of learning word embeddings jointly with the problem you want to solve,\nyou can load embedding vectors from a precomputed embedding space that you\nknow is highly structured and exhibits useful properties—that captures generic\naspects of language structure. The rationale behind using pretrained word embed-\ndings in natural-language processing is much the same as for using pretrained conv-\nnets in image classification: you don’t have enough data available to learn truly\npowerful features"}
{"text": " on your own, but you expect the features that you need to be fairly\ngeneric—that is, common visual features or semantic features. In this case, it makes\nsense to reuse features learned on a different problem.\nSuch word embeddings are generally computed using word-occurrence statistics\n(observations about what words co-occur in sentences or documents), using a variety of\ntechniques, some involving neural networks, others not. The idea of a dense, low-\ndimensional embedding space for words, compu"}
{"text": "ted in an unsupervised way, was ini-\ntially explored by Bengio et al. in the early 2000s,1 but it only started to take off in\nresearch and industry applications after the release of one of the most famous and suc-\ncessful word-embedding schemes: the Word2vec algorithm (https://code.google.com/\narchive/p/word2vec), developed by Tomas Mikolov at Google in 2013. Word2vec\ndimensions capture specific semantic properties, such as gender.\nThere are various precomputed databases of word embeddings that "}
{"text": "you can down-\nload and use in a Keras Embedding layer. Word2vec is one of them. Another popular\none is called Global Vectors for Word Representation (GloVe, https://nlp.stanford\n.edu/projects/glove), which was developed by Stanford researchers in 2014. This\nembedding technique is based on factorizing a matrix of word co-occurrence statis-\ntics. Its developers have made available precomputed embeddings for millions of\nEnglish tokens, obtained from Wikipedia data and Common Crawl data.\nLet’s look "}
{"text": "at how you can get started using GloVe embeddings in a Keras model.\nThe same method is valid for Word2vec embeddings or any other word-embedding\ndatabase. You’ll also use this example to refresh the text-tokenization techniques\nintroduced a few paragraphs ago: you’ll start from raw text and work your way up.\n6.1.3 Putting it all together: from raw text to word embeddings\nYou’ll use a model similar to the one we just went over: embedding sentences in\nsequences of vectors, flattening them, and tra"}
{"text": "ining a Dense layer on top. But you’ll do\nso using pretrained word embeddings; and instead of using the pretokenized IMDB\ndata packaged in Keras, you’ll start from scratch by downloading the original text data.\n1 Yoshua Bengio et al., Neural Probabilistic Language Models (Springer, 2003).\nLicensed to <null>\nWorking with text data 189\nDOWNLOADING THE IMDB DATA AS RAW TEXT\nFirst, head to http://mng.bz/0tIo and download the raw IMDB dataset. Uncompress it.\nNow, let’s collect the individual training"}
{"text": " reviews into a list of strings, one string per\nreview. You’ll also collect the review labels (positive/negative) into a labels list.\nListing6.8 Processing the labels of the raw IMDB data\nimport os\nimdb_dir = '/Users/fchollet/Downloads/aclImdb'\ntrain_dir = os.path.join(imdb_dir, 'train')\nlabels = []\ntexts = []\nfor label_type in ['neg', 'pos']:\ndir_name = os.path.join(train_dir, label_type)\nfor fname in os.listdir(dir_name):\nif fname[-4:] == '.txt':\nf = open(os.path.join(dir_name, fname))\ntexts.a"}
{"text": "ppend(f.read())\nf.close()\nif label_type == 'neg':\nlabels.append(0)\nelse:\nlabels.append(1)\nTOKENIZING THE DATA\nLet’s vectorize the text and prepare a training and validation split, using the concepts\nintroduced earlier in this section. Because pretrained word embeddings are meant to\nbe particularly useful on problems where little training data is available (otherwise,\ntask-specific embeddings are likely to outperform them), we’ll add the following twist:\nrestricting the training data to the first"}
{"text": " 200 samples. So you’ll learn to classify movie\nreviews after looking at just 200 examples.\nListing6.9 Tokenizing the text of the raw IMDB data\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nimport numpy as np\nmaxlen = 100 Cuts off reviews after 100 words\ntraining_samples = 200 Trains on 200 samples\nvalidation_samples = 10000 Validates on 10,000 samples\nmax_words = 10000\nConsiders only the top\ntokenizer = Tokenizer(num_words=max_words)\n10,00"}
{"text": "0 words in the dataset\ntokenizer.fit_on_texts(texts)\nsequences = tokenizer.texts_to_sequences(texts)\nLicensed to <null>\n190 CHAPTER 6 Deep learning for text and sequences\nword_index = tokenizer.word_index\nprint('Found %s unique tokens.' % len(word_index))\ndata = pad_sequences(sequences, maxlen=maxlen)\nlabels = np.asarray(labels)\nprint('Shape of data tensor:', data.shape)\nprint('Shape of label tensor:', labels.shape)\nindices = np.arange(data.shape[0])\nSplits the data into a training set and a\nnp."}
{"text": "random.shuffle(indices) validation set, but first shuffles the data,\ndata = data[indices] because you’re starting with data in which\nlabels = labels[indices] samples are ordered (all negative first, then\nall positive)\nx_train = data[:training_samples]\ny_train = labels[:training_samples]\nx_val = data[training_samples: training_samples + validation_samples]\ny_val = labels[training_samples: training_samples + validation_samples]\nDOWNLOADING THE GLOVE WORD EMBEDDINGS\nGo to https://nlp.stanford.edu/p"}
{"text": "rojects/glove, and download the precomputed\nembeddings from 2014 English Wikipedia. It’s an 822 MB zip file called glove.6B.zip,\ncontaining 100-dimensional embedding vectors for 400,000 words (or nonword\ntokens). Unzip it.\nPREPROCESSING THE EMBEDDINGS\nLet’s parse the unzipped file (a .txt file) to build an index that maps words (as strings)\nto their vector representation (as number vectors).\nListing6.10 Parsing the GloVe word-embeddings file\nglove_dir = '/Users/fchollet/Downloads/glove.6B'\nembed"}
{"text": "dings_index = {}\nf = open(os.path.join(glove_dir, 'glove.6B.100d.txt'))\nfor line in f:\nvalues = line.split()\nword = values[0]\ncoefs = np.asarray(values[1:], dtype='float32')\nembeddings_index[word] = coefs\nf.close()\nprint('Found %s word vectors.' % len(embeddings_index))\nNext, you’ll build an embedding matrix that you can load into an Embedding layer. It\nmust be a matrix of shape (max_words, embedding_dim), where each entry i contains\nthe embedding_dim-dimensional vector for the word of index i i"}
{"text": "n the reference word\nindex (built during tokenization). Note that index 0 isn’t supposed to stand for any\nword or token—it’s a placeholder.\nLicensed to <null>\nWorking with text data 191\nListing6.11 Preparing the GloVe word-embeddings matrix\nembedding_dim = 100\nembedding_matrix = np.zeros((max_words, embedding_dim))\nfor word, i in word_index.items():\nif i < max_words:\nembedding_vector = embeddings_index.get(word) Words not found in the\nif embedding_vector is not None: embedding index will\nembeddi"}
{"text": "ng_matrix[i] = embedding_vector be all zeros.\nDEFINING A MODEL\nYou’ll use the same model architecture as before.\nListing6.12 Model definition\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Flatten, Dense\nmodel = Sequential()\nmodel.add(Embedding(max_words, embedding_dim, input_length=maxlen))\nmodel.add(Flatten())\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()\nLOADING THE GLOVE EMBEDDINGS IN THE MODEL\nThe Embedding layer h"}
{"text": "as a single weight matrix: a 2D float matrix where each entry i is\nthe word vector meant to be associated with index i. Simple enough. Load the GloVe\nmatrix you prepared into the Embedding layer, the first layer in the model.\nListing6.13 Loading pretrained word embeddings into the Embedding layer\nmodel.layers[0].set_weights([embedding_matrix])\nmodel.layers[0].trainable = False\nAdditionally, you’ll freeze the Embedding layer (set its trainable attribute to False),\nfollowing the same rationale you"}
{"text": "’re already familiar with in the context of pretrained\nconvnet features: when parts of a model are pretrained (like your Embedding layer)\nand parts are randomly initialized (like your classifier), the pretrained parts shouldn’t\nbe updated during training, to avoid forgetting what they already know. The large gra-\ndient updates triggered by the randomly initialized layers would be disruptive to the\nalready-learned features.\nLicensed to <null>\n192 CHAPTER 6 Deep learning for text and sequences\nTRA"}
{"text": "INING AND EVALUATING THE MODEL\nCompile and train the model.\nListing6.14 Training and evaluation\nmodel.compile(optimizer='rmsprop',\nloss='binary_crossentropy',\nmetrics=['acc'])\nhistory = model.fit(x_train, y_train,\nepochs=10,\nbatch_size=32,\nvalidation_data=(x_val, y_val))\nmodel.save_weights('pre_trained_glove_model.h5')\nNow, plot the model’s performance over time (see figures 6.5 and 6.6).\nListing6.15 Plotting the results\nimport matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = hist"}
{"text": "ory.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()\nFigure 6.5 Training and"}
{"text": " validation loss\nwhen using pretrained word embeddings\nLicensed to <null>\nWorking with text data 193\nFigure 6.6 Training and\nvalidation accuracy when using\npretrained word embeddings\nThe model quickly starts overfitting, which is unsurprising given the small number of\ntraining samples. Validation accuracy has high variance for the same reason, but it\nseems to reach the high 50s.\nNote that your mileage may vary: because you have so few training samples, perfor-\nmance is heavily dependent on exact"}
{"text": "ly which 200 samples you choose—and you’re\nchoosing them at random. If this works poorly for you, try choosing a different ran-\ndom set of 200 samples, for the sake of the exercise (in real life, you don’t get to\nchoose your training data).\nYou can also train the same model without loading the pretrained word embed-\ndings and without freezing the embedding layer. In that case, you’ll learn a task-\nspecific embedding of the input tokens, which is generally more powerful than\npretrained word embed"}
{"text": "dings when lots of data is available. But in this case, you have\nonly 200 training samples. Let’s try it (see figures 6.7 and 6.8).\nListing6.16 Training the same model without pretrained word embeddings\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Flatten, Dense\nmodel = Sequential()\nmodel.add(Embedding(max_words, embedding_dim, input_length=maxlen))\nmodel.add(Flatten())\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.summary()\nmo"}
{"text": "del.compile(optimizer='rmsprop',\nloss='binary_crossentropy',\nmetrics=['acc'])\nhistory = model.fit(x_train, y_train,\nepochs=10,\nbatch_size=32,\nvalidation_data=(x_val, y_val))\nLicensed to <null>\n194 CHAPTER 6 Deep learning for text and sequences\nFigure 6.7 Training and\nvalidation loss without using\npretrained word embeddings\nFigure 6.8 Training and validation\naccuracy without using pretrained\nword embeddings\nValidation accuracy stalls in the low 50s. So in this case, pretrained word embeddings\nout"}
{"text": "perform jointly learned embeddings. If you increase the number of training sam-\nples, this will quickly stop being the case—try it as an exercise.\nFinally, let’s evaluate the model on the test data. First, you need to tokenize the test\ndata.\nListing6.17 Tokenizing the data of the test set\ntest_dir = os.path.join(imdb_dir, 'test')\nlabels = []\ntexts = []\nfor label_type in ['neg', 'pos']:\ndir_name = os.path.join(test_dir, label_type)\nfor fname in sorted(os.listdir(dir_name)):\nif fname[-4:] == '.txt"}
{"text": "':\nf = open(os.path.join(dir_name, fname))\ntexts.append(f.read())\nLicensed to <null>\nWorking with text data 195\nf.close()\nif label_type == 'neg':\nlabels.append(0)\nelse:\nlabels.append(1)\nsequences = tokenizer.texts_to_sequences(texts)\nx_test = pad_sequences(sequences, maxlen=maxlen)\ny_test = np.asarray(labels)\nNext, load and evaluate the first model.\nListing6.18 Evaluating the model on the test set\nmodel.load_weights('pre_trained_glove_model.h5')\nmodel.evaluate(x_test, y_test)\nYou get an appallin"}
{"text": "g test accuracy of 56%. Working with just a handful of training\nsamples is difficult!\n6.1.4 Wrapping up\nNow you’re able to do the following:\n Turn raw text into something a neural network can process\n Use the Embedding layer in a Keras model to learn task-specific token embed-\ndings\n Use pretrained word embeddings to get an extra boost on small natural-\nlanguage-processing problems\nLicensed to <null>\n196 CHAPTER 6 Deep learning for text and sequences\n6.2 Understanding recurrent neural network"}
{"text": "s\nA major characteristic of all neural networks you’ve seen so far, such as densely con-\nnected networks and convnets, is that they have no memory. Each input shown to\nthem is processed independently, with no state kept in between inputs. With such net-\nworks, in order to process a sequence or a temporal series of data points, you have to\nshow the entire sequence to the network at once: turn it into a single data point. For\ninstance, this is what you did in the IMDB example: an entire movie revi"}
{"text": "ew was trans-\nformed into a single large vector and processed in one go. Such networks are called\nfeedforward networks.\nIn contrast, as you’re reading the present sentence, you’re processing it word by\nword—or rather, eye saccade by eye saccade—while keeping memories of what came\nbefore; this gives you a fluid representation of the meaning conveyed by this sentence.\nBiological intelligence processes information incrementally while maintaining an\ninternal model of what it’s processing, built from"}
{"text": " past information and constantly\nupdated as new information comes in.\nA recurrent neural network (RNN) adopts the same principle, albeit in an extremely\nsimplified version: it processes sequences by iterating through the sequence elements\nand maintaining a state containing information relative\nOutput\nto what it has seen so far. In effect, an RNN is a type of\nneural network that has an internal loop (see figure 6.9).\nThe state of the RNN is reset between processing two dif- RNN\nRecurrent\nferent, "}
{"text": "independent sequences (such as two different\nconnection\nIMDB reviews), so you still consider one sequence a sin-\ngle data point: a single input to the network. What Input\nchanges is that this data point is no longer processed in a\nFigure 6.9 A recurrent\nsingle step; rather, the network internally loops over network: a network with a loop\nsequence elements.\nTo make these notions of loop and state clear, let’s implement the forward pass of a\ntoy RNN in Numpy. This RNN takes as input a sequence of "}
{"text": "vectors, which you’ll encode\nas a 2D tensor of size (timesteps, input_features). It loops over timesteps, and at\neach timestep, it considers its current state at t and the input at t (of shape (input_\nfeatures,), and combines them to obtain the output at t. You’ll then set the state for\nthe next step to be this previous output. For the first timestep, the previous output\nisn’t defined; hence, there is no current state. So, you’ll initialize the state as an all-\nzero vector called the initial sta"}
{"text": "te of the network.\nIn pseudocode, this is the RNN.\nListing6.19 Pseudocode RNN\nstate_t = 0 The state at t\nfor input_t in input_sequence: Iterates over sequence elements\noutput_t = f(input_t, state_t)\nstate_t = output_t The previous output becomes the state for the next iteration.\nLicensed to <null>\nUnderstanding recurrent neural networks 197\nYou can even flesh out the function f: the transformation of the input and state into an\noutput will be parameterized by two matrices, W and U, and a bias ve"}
{"text": "ctor. It’s similar to\nthe transformation operated by a densely connected layer in a feedforward network.\nListing6.20 More detailed pseudocode for the RNN\nstate_t = 0\nfor input_t in input_sequence:\noutput_t = activation(dot(W, input_t) + dot(U, state_t) + b)\nstate_t = output_t\nTo make these notions absolutely unambiguous, let’s write a naive Numpy implemen-\ntation of the forward pass of the simple RNN.\nListing6.21 Numpy implementation of a simple RNN\nNumber of timesteps in\nDimensionality of the\nt"}
{"text": "he input sequence\ninput feature space\nimport numpy as np Input data: random\nDimensionality of the noise for the sake of\ntimesteps = 100\noutput feature space the example\ninput_features = 32\noutput_features = 64\nInitial state: an\ninputs = np.random.random((timesteps, input_features))\nall-zero vector\nstate_t = np.zeros((output_features,))\nW = np.random.random((output_features, input_features))\nCreates random\nU = np.random.random((output_features, output_features))\nweight matrices\nb = np.random.rand"}
{"text": "om((output_features,))\ninput_t is a vector of\nsuccessive_outputs = [] shape (input_features,).\nfor input_t in inputs:\noutput_t = np.tanh(np.dot(W, input_t) + np.dot(U, state_t) + b)\nsuccessive_outputs.append(output_t)\nstate_t = output_t\nfinal_output_sequence = np.concatenate(successive_outputs, axis=0)\nThe final output is a 2D tensor of\nStores this output in a list\nshape (timesteps, output_features).\nCombines the input with the current\nstate (the previous output) to obtain Updates the state of t"}
{"text": "he\nthe current output network for the next timestep\nEasy enough: in summary, an RNN is a for loop that reuses quantities computed\nduring the previous iteration of the loop, nothing more. Of course, there are many\ndifferent RNNs fitting this definition that you could build—this example is one of the\nsimplest RNN formulations. RNNs are characterized by their step function, such as the\nfollowing function in this case (see figure 6.10):\noutput_t = np.tanh(np.dot(W, input_t) + np.dot(U, state_t) + b)"}
{"text": "\nLicensed to <null>\n198 CHAPTER 6 Deep learning for text and sequences\noutput t-1 output t output t+1\noutput_t =\nactivation(\n... W•input_t + ...\nState t U•state_t + State t+1\nbo)\ninput t-1 input t input t+1\nFigure 6.10 A simple RNN, unrolled over time\nNOTE In this example, the final output is a 2D tensor of shape (timesteps,\noutput_features), where each timestep is the output of the loop at time t.\nEach timestep t in the output tensor contains information about timesteps 0\nto t in the input sequ"}
{"text": "ence—about the entire past. For this reason, in many\ncases, you don’t need this full sequence of outputs; you just need the last out-\nput (output_t at the end of the loop), because it already contains informa-\ntion about the entire sequence.\n6.2.1 A recurrent layer in Keras\nThe process you just naively implemented in Numpy corresponds to an actual Keras\nlayer—the SimpleRNN layer:\nfrom keras.layers import SimpleRNN\nThere is one minor difference: SimpleRNN processes batches of sequences, like all "}
{"text": "other\nKeras layers, not a single sequence as in the Numpy example. This means it takes inputs\nof shape (batch_size, timesteps, input_features), rather than (timesteps,\ninput_features).\nLike all recurrent layers in Keras, SimpleRNN can be run in two different modes: it\ncan return either the full sequences of successive outputs for each timestep (a 3D ten-\nsor of shape (batch_size, timesteps, output_features)) or only the last output for\neach input sequence (a 2D tensor of shape (batch_size, outpu"}
{"text": "t_features)). These\ntwo modes are controlled by the return_sequences constructor argument. Let’s look\nat an example that uses SimpleRNN and returns only the output at the last timestep:\n>>> from keras.models import Sequential\n>>> from keras.layers import Embedding, SimpleRNN\n>>> model = Sequential()\n>>> model.add(Embedding(10000, 32))\n>>> model.add(SimpleRNN(32))\n>>> model.summary()\nLicensed to <null>\nUnderstanding recurrent neural networks 199\n___________________________________________________"}
{"text": "_____________\nLayer (type) Output Shape Param #\n================================================================\nembedding_22 (Embedding) (None, None, 32) 320000\n________________________________________________________________\nsimplernn_10 (SimpleRNN) (None, 32) 2080\n================================================================\nTotal params: 322,080\nTrainable params: 322,080\nNon-trainable params: 0\nThe following example returns the full state sequence:\n>>> model = Sequential()\n>>> model.add(E"}
{"text": "mbedding(10000, 32))\n>>> model.add(SimpleRNN(32, return_sequences=True))\n>>> model.summary()\n________________________________________________________________\nLayer (type) Output Shape Param #\n================================================================\nembedding_23 (Embedding) (None, None, 32) 320000\n________________________________________________________________\nsimplernn_11 (SimpleRNN) (None, None, 32) 2080\n================================================================\nTotal params: 322"}
{"text": ",080\nTrainable params: 322,080\nNon-trainable params: 0\nIt’s sometimes useful to stack several recurrent layers one after the other in order to\nincrease the representational power of a network. In such a setup, you have to get all\nof the intermediate layers to return full sequence of outputs:\n>>> model = Sequential()\n>>> model.add(Embedding(10000, 32))\n>>> model.add(SimpleRNN(32, return_sequences=True))\n>>> model.add(SimpleRNN(32, return_sequences=True))\n>>> model.add(SimpleRNN(32, return_sequenc"}
{"text": "es=True)) Last layer only returns\n>>> model.add(SimpleRNN(32)) the last output\n>>> model.summary()\n________________________________________________________________\nLayer (type) Output Shape Param #\n================================================================\nembedding_24 (Embedding) (None, None, 32) 320000\n________________________________________________________________\nsimplernn_12 (SimpleRNN) (None, None, 32) 2080\n________________________________________________________________\nsimplernn_1"}
{"text": "3 (SimpleRNN) (None, None, 32) 2080\n________________________________________________________________\nsimplernn_14 (SimpleRNN) (None, None, 32) 2080\n________________________________________________________________\nsimplernn_15 (SimpleRNN) (None, 32) 2080\n================================================================\nTotal params: 328,320\nTrainable params: 328,320\nNon-trainable params: 0\nLicensed to <null>\n200 CHAPTER 6 Deep learning for text and sequences\nNow, let’s use such a model on the IMDB"}
{"text": " movie-review-classification problem. First,\npreprocess the data.\nListing6.22 Preparing the IMDB data\nfrom keras.datasets import imdb\nfrom keras.preprocessing import sequence\nNumber of words to\nmax_features = 10000 consider as features\nmaxlen = 500\nCuts off texts after this many words (among\nbatch_size = 32\nthe max_features most common words)\nprint('Loading data...')\n(input_train, y_train), (input_test, y_test) = imdb.load_data(\nnum_words=max_features)\nprint(len(input_train), 'train sequences')\n"}
{"text": "print(len(input_test), 'test sequences')\nprint('Pad sequences (samples x time)')\ninput_train = sequence.pad_sequences(input_train, maxlen=maxlen)\ninput_test = sequence.pad_sequences(input_test, maxlen=maxlen)\nprint('input_train shape:', input_train.shape)\nprint('input_test shape:', input_test.shape)\nLet’s train a simple recurrent network using an Embedding layer and a SimpleRNN\nlayer.\nListing6.23 Training the model with Embedding and SimpleRNN layers\nfrom keras.layers import Dense\nmodel = Sequen"}
{"text": "tial()\nmodel.add(Embedding(max_features, 32))\nmodel.add(SimpleRNN(32))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\nhistory = model.fit(input_train, y_train,\nepochs=10,\nbatch_size=128,\nvalidation_split=0.2)\nNow, let’s display the training and validation loss and accuracy (see figures 6.11 and 6.12).\nListing6.24 Plotting results\nimport matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = history.history['val_a"}
{"text": "cc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nLicensed to <null>\nUnderstanding recurrent neural networks 201\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\npl"}
{"text": "t.legend()\nplt.show()\nFigure 6.11 Training and validation\nloss on IMDB with SimpleRNN\nFigure 6.12 Training and validation\naccuracy on IMDB with SimpleRNN\nAs a reminder, in chapter 3, the first naive approach to this dataset got you to a test\naccuracy of 88%. Unfortunately, this small recurrent network doesn’t perform well\ncompared to this baseline (only 85% validation accuracy). Part of the problem is that\nyour inputs only consider the first 500 words, rather than full sequences—hence, the\nRNN h"}
{"text": "as access to less information than the earlier baseline model. The remainder of\nthe problem is that SimpleRNN isn’t good at processing long sequences, such as text.\nLicensed to <null>\n202 CHAPTER 6 Deep learning for text and sequences\nOther types of recurrent layers perform much better. Let’s look at some more-\nadvanced layers.\n6.2.2 Understanding the LSTM and GRU layers\nSimpleRNN isn’t the only recurrent layer available in Keras. There are two others: LSTM\nand GRU. In practice, you’ll always us"}
{"text": "e one of these, because SimpleRNN is generally too\nsimplistic to be of real use. SimpleRNN has a major issue: although it should theoretically\nbe able to retain at time t information about inputs seen many timesteps before, in\npractice, such long-term dependencies are impossible to learn. This is due to the van-\nishing gradient problem, an effect that is similar to what is observed with non-recurrent\nnetworks (feedforward networks) that are many layers deep: as you keep adding layers\nto a networ"}
{"text": "k, the network eventually becomes untrainable. The theoretical reasons for\nthis effect were studied by Hochreiter, Schmidhuber, and Bengio in the early 1990s.2\nThe LSTM and GRU layers are designed to solve this problem.\nLet’s consider the LSTM layer. The underlying Long Short-Term Memory (LSTM)\nalgorithm was developed by Hochreiter and Schmidhuber in 1997;3 it was the culmi-\nnation of their research on the vanishing gradient problem.\nThis layer is a variant of the SimpleRNN layer you already kno"}
{"text": "w about; it adds a way\nto carry information across many timesteps. Imagine a conveyor belt running parallel\nto the sequence you’re processing. Information from the sequence can jump onto the\nconveyor belt at any point, be transported to a later timestep, and jump off, intact,\nwhen you need it. This is essentially what LSTM does: it saves information for later,\nthus preventing older signals from gradually vanishing during processing.\nTo understand this in detail, let’s start from the SimpleRNN ce"}
{"text": "ll (see figure 6.13).\nBecause you’ll have a lot of weight matrices, index the W and U matrices in the cell with\nthe letter o (Wo and Uo) for output.\noutput t-1 output t output t+1\noutput_t =\nactivation(\n... Wo•input_t + ...\nState t Uo•state_t + State t+1\nbo)\ninput t-1 input t input t+1\nFigure 6.13 The starting point of an LSTM layer: a SimpleRNN\n2 See, for example, Yoshua Bengio, Patrice Simard, and Paolo Frasconi, “Learning Long-Term Dependencies\nwith Gradient Descent Is Difficult,” IEEE Transa"}
{"text": "ctions on Neural Networks 5, no. 2 (1994).\n3 Sepp Hochreiter and Jürgen Schmidhuber, “Long Short-Term Memory,” Neural Computation 9, no. 8 (1997).\nLicensed to <null>\nUnderstanding recurrent neural networks 203\nLet’s add to this picture an additional data flow that carries information across time-\nsteps. Call its values at different timesteps Ct, where C stands for carry. This informa-\ntion will have the following impact on the cell: it will be combined with the input\nconnection and the recurrent"}
{"text": " connection (via a dense transformation: a dot product\nwith a weight matrix followed by a bias add and the application of an activation func-\ntion), and it will affect the state being sent to the next timestep (via an activation\nfunction an a multiplication operation). Conceptually, the carry dataflow is a way to\nmodulate the next output and the next state (see figure 6.14). Simple so far.\noutput t-1 output t output t+1\nc t-1 c t c t+1 Carry track\nc t output_t = c t\nactivation(\nWo•input_t +\n... "}
{"text": "...\nUo•state_t +\nState t State t+1\nVo•c_t +\nbo)\ninput t-1 input t input t+1\nFigure 6.14 Going from a SimpleRNN to an LSTM: adding a carry track\nNow the subtlety: the way the next value of the carry dataflow is computed. It involves\nthree distinct transformations. All three have the form of a SimpleRNN cell:\ny = activation(dot(state_t, U) + dot(input_t, W) + b)\nBut all three transformations have their own weight matrices, which you’ll index with\nthe letters i, f, and k. Here’s what you have so fa"}
{"text": "r (it may seem a bit arbitrary, but bear\nwith me).\nListing6.25 Pseudocode details of the LSTM architecture (1/2)\noutput_t = activation(dot(state_t, Uo) + dot(input_t, Wo) + dot(C_t, Vo) + bo)\ni_t = activation(dot(state_t, Ui) + dot(input_t, Wi) + bi)\nf_t = activation(dot(state_t, Uf) + dot(input_t, Wf) + bf)\nk_t = activation(dot(state_t, Uk) + dot(input_t, Wk) + bk)\nYou obtain the new carry state (the next c_t) by combining i_t, f_t, and k_t.\nListing6.26 Pseudocode details of the LSTM architectu"}
{"text": "re (2/2)\nc_t+1 = i_t * k_t + c_t * f_t\nAdd this as shown in figure 6.15. And that’s it. Not so complicated—merely a tad\ncomplex.\nLicensed to <null>\n204 CHAPTER 6 Deep learning for text and sequences\noutput t-1 output t output t+1\nc t-1 c t c t+1 Carry track\nCompute Compute\nnew new\ncarry carry\nc t output_t = c t\nactivation(\nWo•input_t +\n... ...\nUo•state_t +\nState t State t+1\nVo•c_t +\nbo)\ninput t-1 input t input t+1\nFigure 6.15 Anatomy of an LSTM\nIf you want to get philosophical, you can interpret"}
{"text": " what each of these operations is\nmeant to do. For instance, you can say that multiplying c_t and f_t is a way to deliber-\nately forget irrelevant information in the carry dataflow. Meanwhile, i_t and k_t pro-\nvide information about the present, updating the carry track with new information.\nBut at the end of the day, these interpretations don’t mean much, because what these\noperations actually do is determined by the contents of the weights parameterizing\nthem; and the weights are learned in an"}
{"text": " end-to-end fashion, starting over with each\ntraining round, making it impossible to credit this or that operation with a specific\npurpose. The specification of an RNN cell (as just described) determines your hypoth-\nesis space—the space in which you’ll search for a good model configuration during\ntraining—but it doesn’t determine what the cell does; that is up to the cell weights.\nThe same cell with different weights can be doing very different things. So the combi-\nnation of operations making "}
{"text": "up an RNN cell is better interpreted as a set of constraints\non your search, not as a design in an engineering sense.\nTo a researcher, it seems that the choice of such constraints—the question of how to\nimplement RNN cells—is better left to optimization algorithms (like genetic algorithms\nor reinforcement learning processes) than to human engineers. And in the future,\nthat’s how we’ll build networks. In summary: you don’t need to understand anything\nabout the specific architecture of an LSTM cel"}
{"text": "l; as a human, it shouldn’t be your job to\nunderstand it. Just keep in mind what the LSTM cell is meant to do: allow past informa-\ntion to be reinjected at a later time, thus fighting the vanishing-gradient problem.\n6.2.3 A concrete LSTM example in Keras\nNow let’s switch to more practical concerns: you’ll set up a model using an LSTM layer\nand train it on the IMDB data (see figures 6.16 and 6.17). The network is similar to the\none with SimpleRNN that was just presented. You only specify the outp"}
{"text": "ut dimensional-\nity of the LSTM layer; leave every other argument (there are many) at the Keras\nLicensed to <null>\nUnderstanding recurrent neural networks 205\ndefaults. Keras has good defaults, and things will almost always “just work” without you\nhaving to spend time tuning parameters by hand.\nListing6.27 Using the LSTM layer in Keras\nfrom keras.layers import LSTM\nmodel = Sequential()\nmodel.add(Embedding(max_features, 32))\nmodel.add(LSTM(32))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.comp"}
{"text": "ile(optimizer='rmsprop',\nloss='binary_crossentropy',\nmetrics=['acc'])\nhistory = model.fit(input_train, y_train,\nepochs=10,\nbatch_size=128,\nvalidation_split=0.2)\nFigure 6.16 Training and validation\nloss on IMDB with LSTM\nFigure 6.17 Training and validation\naccuracy on IMDB with LSTM\nLicensed to <null>\n206 CHAPTER 6 Deep learning for text and sequences\nThis time, you achieve up to 89% validation accuracy. Not bad: certainly much better\nthan the SimpleRNN network—that’s largely because LSTM suffers"}
{"text": " much less from the\nvanishing-gradient problem—and slightly better than the fully connected approach\nfrom chapter 3, even though you’re looking at less data than you were in chapter 3.\nYou’re truncating sequences after 500 timesteps, whereas in chapter 3, you were con-\nsidering full sequences.\nBut this result isn’t groundbreaking for such a computationally intensive\napproach. Why isn’t LSTM performing better? One reason is that you made no effort\nto tune hyperparameters such as the embeddings di"}
{"text": "mensionality or the LSTM output\ndimensionality. Another may be lack of regularization. But honestly, the primary rea-\nson is that analyzing the global, long-term structure of the reviews (what LSTM is good\nat) isn’t helpful for a sentiment-analysis problem. Such a basic problem is well solved\nby looking at what words occur in each review, and at what frequency. That’s what the\nfirst fully connected approach looked at. But there are far more difficult natural-\nlanguage-processing problems out the"}
{"text": "re, where the strength of LSTM will become\napparent: in particular, question-answering and machine translation.\n6.2.4 Wrapping up\nNow you understand the following:\n What RNNs are and how they work\n What LSTM is, and why it works better on long sequences than a naive RNN\n How to use Keras RNN layers to process sequence data\nNext, we’ll review a number of more advanced features of RNNs, which can help you\nget the most out of your deep-learning sequence models.\nLicensed to <null>\nAdvanced use of"}
{"text": " recurrent neural networks 207\n6.3 Advanced use of recurrent neural networks\nIn this section, we’ll review three advanced techniques for improving the perfor-\nmance and generalization power of recurrent neural networks. By the end of the sec-\ntion, you’ll know most of what there is to know about using recurrent networks with\nKeras. We’ll demonstrate all three concepts on a temperature-forecasting problem,\nwhere you have access to a timeseries of data points coming from sensors installed on\nthe r"}
{"text": "oof of a building, such as temperature, air pressure, and humidity, which you use\nto predict what the temperature will be 24 hours after the last data point. This is a\nfairly challenging problem that exemplifies many common difficulties encountered\nwhen working with timeseries.\nWe’ll cover the following techniques:\n Recurrent dropout—This is a specific, built-in way to use dropout to fight overfit-\nting in recurrent layers.\n Stacking recurrent layers—This increases the representational power o"}
{"text": "f the net-\nwork (at the cost of higher computational loads).\n Bidirectional recurrent layers—These present the same information to a recurrent\nnetwork in different ways, increasing accuracy and mitigating forgetting issues.\n6.3.1 A temperature-forecasting problem\nUntil now, the only sequence data we’ve covered has been text data, such as the IMDB\ndataset and the Reuters dataset. But sequence data is found in many more problems\nthan just language processing. In all the examples in this section, "}
{"text": "you’ll play with a\nweather timeseries dataset recorded at the Weather Station at the Max Planck Insti-\ntute for Biogeochemistry in Jena, Germany.4\nIn this dataset, 14 different quantities (such air temperature, atmospheric pres-\nsure, humidity, wind direction, and so on) were recorded every 10 minutes, over sev-\neral years. The original data goes back to 2003, but this example is limited to data\nfrom 2009–2016. This dataset is perfect for learning to work with numerical\ntimeseries. You’ll use it"}
{"text": " to build a model that takes as input some data from the recent\npast (a few days’ worth of data points) and predicts the air temperature 24 hours in\nthe future.\nDownload and uncompress the data as follows:\ncd ~/Downloads\nmkdir jena_climate\ncd jena_climate\nwget https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\nunzip jena_climate_2009_2016.csv.zip\nLet’s look at the data.\n4 Olaf Kolle, www.bgc-jena.mpg.de/wetter.\nLicensed to <null>\n208 CHAPTER 6 Deep learning for text and seque"}
{"text": "nces\nListing6.28 Inspecting the data of the Jena weather dataset\nimport os\ndata_dir = '/users/fchollet/Downloads/jena_climate'\nfname = os.path.join(data_dir, 'jena_climate_2009_2016.csv')\nf = open(fname)\ndata = f.read()\nf.close()\nlines = data.split('\\n')\nheader = lines[0].split(',')\nlines = lines[1:]\nprint(header)\nprint(len(lines))\nThis outputs a count of 420,551 lines of data (each line is a timestep: a record of a\ndate and 14 weather-related values), as well as the following header:\n[\"Date Tim"}
{"text": "e\",\n\"p (mbar)\",\n\"T (degC)\",\n\"Tpot (K)\",\n\"Tdew (degC)\",\n\"rh (%)\",\n\"VPmax (mbar)\",\n\"VPact (mbar)\",\n\"VPdef (mbar)\",\n\"sh (g/kg)\",\n\"H2OC (mmol/mol)\",\n\"rho (g/m**3)\",\n\"wv (m/s)\",\n\"max. wv (m/s)\",\n\"wd (deg)\"]\nNow, convert all 420,551 lines of data into a Numpy array.\nListing6.29 Parsing the data\nimport numpy as np\nfloat_data = np.zeros((len(lines), len(header) - 1))\nfor i, line in enumerate(lines):\nvalues = [float(x) for x in line.split(',')[1:]]\nfloat_data[i, :] = values\nFor instance, here is the plot"}
{"text": " of temperature (in degrees Celsius) over time (see figure\n6.18). On this plot, you can clearly see the yearly periodicity of temperature.\nLicensed to <null>\nAdvanced use of recurrent neural networks 209\nListing6.30 Plotting the temperature timeseries\nfrom matplotlib import pyplot as plt\ntemp = float_data[:, 1] <1> temperature (in degrees Celsius)\nplt.plot(range(len(temp)), temp)\nFigure 6.18 Temperature\nover the full temporal range of\nthe dataset (ºC)\nHere is a more narrow plot of the first 10 d"}
{"text": "ays of temperature data (see figure 6.19).\nBecause the data is recorded every 10 minutes, you get 144 data points per day.\nListing6.31 Plotting the first 10 days of the temperature timeseries\nplt.plot(range(1440), temp[:1440])\nFigure 6.19 Temperature\nover the first 10 days of the\ndataset (ºC)\nLicensed to <null>\n210 CHAPTER 6 Deep learning for text and sequences\nOn this plot, you can see daily periodicity, especially evident for the last 4 days. Also\nnote that this 10-day period must be coming fr"}
{"text": "om a fairly cold winter month.\nIf you were trying to predict average temperature for the next month given a few\nmonths of past data, the problem would be easy, due to the reliable year-scale period-\nicity of the data. But looking at the data over a scale of days, the temperature looks a\nlot more chaotic. Is this timeseries predictable at a daily scale? Let’s find out.\n6.3.2 Preparing the data\nThe exact formulation of the problem will be as follows: given data going as far back\nas lookback timest"}
{"text": "eps (a timestep is 10 minutes) and sampled every steps timesteps,\ncan you predict the temperature in delay timesteps? You’ll use the following parame-\nter values:\n lookback = 720—Observations will go back 5 days.\n steps = 6—Observations will be sampled at one data point per hour.\n delay = 144—Targets will be 24 hours in the future.\nTo get started, you need to do two things:\n Preprocess the data to a format a neural network can ingest. This is easy: the\ndata is already numerical, so you don’t"}
{"text": " need to do any vectorization. But each\ntimeseries in the data is on a different scale (for example, temperature is typi-\ncally between -20 and +30, but atmospheric pressure, measured in mbar, is\naround 1,000). You’ll normalize each timeseries independently so that they all\ntake small values on a similar scale.\n Write a Python generator that takes the current array of float data and yields\nbatches of data from the recent past, along with a target temperature in the\nfuture. Because the samples i"}
{"text": "n the dataset are highly redundant (sample N and\nsample N + 1 will have most of their timesteps in common), it would be wasteful\nto explicitly allocate every sample. Instead, you’ll generate the samples on the\nfly using the original data.\nYou’ll preprocess the data by subtracting the mean of each timeseries and dividing by\nthe standard deviation. You’re going to use the first 200,000 timesteps as training data,\nso compute the mean and standard deviation only on this fraction of the data.\nListing"}
{"text": "6.32 Normalizing the data\nmean = float_data[:200000].mean(axis=0)\nfloat_data -= mean\nstd = float_data[:200000].std(axis=0)\nfloat_data /= std\nListing 6.33 shows the data generator you’ll use. It yields a tuple (samples, targets),\nwhere samples is one batch of input data and targets is the corresponding array of\ntarget temperatures. It takes the following arguments:\nLicensed to <null>\nAdvanced use of recurrent neural networks 211\n data—The original array of floating-point data, which you normaliz"}
{"text": "ed in listing 6.32.\n lookback—How many timesteps back the input data should go.\n delay—How many timesteps in the future the target should be.\n min_index and max_index—Indices in the data array that delimit which time-\nsteps to draw from. This is useful for keeping a segment of the data for valida-\ntion and another for testing.\n shuffle—Whether to shuffle the samples or draw them in chronological order.\n batch_size—The number of samples per batch.\n step—The period, in timesteps, at which yo"}
{"text": "u sample data. You’ll set it to 6 in\norder to draw one data point every hour.\nListing6.33 Generator yielding timeseries samples and their targets\ndef generator(data, lookback, delay, min_index, max_index,\nshuffle=False, batch_size=128, step=6):\nif max_index is None:\nmax_index = len(data) - delay - 1\ni = min_index + lookback\nwhile 1:\nif shuffle:\nrows = np.random.randint(\nmin_index + lookback, max_index, size=batch_size)\nelse:\nif i + batch_size >= max_index:\ni = min_index + lookback\nrows = np.aran"}
{"text": "ge(i, min(i + batch_size, max_index))\ni += len(rows)\nsamples = np.zeros((len(rows),\nlookback // step,\ndata.shape[-1]))\ntargets = np.zeros((len(rows),))\nfor j, row in enumerate(rows):\nindices = range(rows[j] - lookback, rows[j], step)\nsamples[j] = data[indices]\ntargets[j] = data[rows[j] + delay][1]\nyield samples, targets\nNow, let’s use the abstract generator function to instantiate three generators: one for\ntraining, one for validation, and one for testing. Each will look at different temporal\nse"}
{"text": "gments of the original data: the training generator looks at the first 200,000 time-\nsteps, the validation generator looks at the following 100,000, and the test generator\nlooks at the remainder.\nListing6.34 Preparing the training, validation, and test generators\nlookback = 1440\nstep = 6\ndelay = 144\nbatch_size = 128\nLicensed to <null>\n212 CHAPTER 6 Deep learning for text and sequences\ntrain_gen = generator(float_data,\nlookback=lookback,\ndelay=delay,\nmin_index=0,\nmax_index=200000,\nshuffle=True,\ns"}
{"text": "tep=step,\nbatch_size=batch_size)\nval_gen = generator(float_data,\nlookback=lookback,\ndelay=delay,\nmin_index=200001,\nmax_index=300000,\nstep=step,\nbatch_size=batch_size)\ntest_gen = generator(float_data,\nlookback=lookback,\ndelay=delay,\nHow many steps to draw from\nmin_index=300001,\nval_gen in order to see the\nmax_index=None, entire validation set\nstep=step,\nbatch_size=batch_size)\nHow many steps to draw\nval_steps = (300000 - 200001 - lookback)\nfrom test_gen in order to\ntest_steps = (len(float_data) - "}
{"text": "300001 - lookback) see the entire test set\n6.3.3 A common-sense, non-machine-learning baseline\nBefore you start using black-box deep-learning models to solve the temperature-\nprediction problem, let’s try a simple, common-sense approach. It will serve as a sanity\ncheck, and it will establish a baseline that you’ll have to beat in order to demonstrate\nthe usefulness of more-advanced machine-learning models. Such common-sense base-\nlines can be useful when you’re approaching a new problem for whic"}
{"text": "h there is no\nknown solution (yet). A classic example is that of unbalanced classification tasks,\nwhere some classes are much more common than others. If your dataset contains 90%\ninstances of class A and 10% instances of class B, then a common-sense approach to\nthe classification task is to always predict “A” when presented with a new sample. Such\na classifier is 90% accurate overall, and any learning-based approach should therefore\nbeat this 90% score in order to demonstrate usefulness. Someti"}
{"text": "mes, such elementary\nbaselines can prove surprisingly hard to beat.\nIn this case, the temperature timeseries can safely be assumed to be continuous\n(the temperatures tomorrow are likely to be close to the temperatures today) as well\nas periodical with a daily period. Thus a common-sense approach is to always predict\nthat the temperature 24 hours from now will be equal to the temperature right now.\nLet’s evaluate this approach, using the mean absolute error (MAE) metric:\nnp.mean(np.abs(preds - ta"}
{"text": "rgets))\nLicensed to <null>\nAdvanced use of recurrent neural networks 213\nHere’s the evaluation loop.\nListing6.35 Computing the common-sense baseline MAE\ndef evaluate_naive_method():\nbatch_maes = []\nfor step in range(val_steps):\nsamples, targets = next(val_gen)\npreds = samples[:, -1, 1]\nmae = np.mean(np.abs(preds - targets))\nbatch_maes.append(mae)\nprint(np.mean(batch_maes))\nevaluate_naive_method()\nThis yields an MAE of 0.29. Because the temperature data has been normalized to be\ncentered on 0 and"}
{"text": " have a standard deviation of 1, this number isn’t immediately inter-\npretable. It translates to an average absolute error of 0.29 × temperature_std degrees\nCelsius: 2.57˚C.\nListing6.36 Converting the MAE back to a Celsius error\ncelsius_mae = 0.29 * std[1]\nThat’s a fairly large average absolute error. Now the game is to use your knowledge of\ndeep learning to do better.\n6.3.4 A basic machine-learning approach\nIn the same way that it’s useful to establish a common-sense baseline before trying\nmach"}
{"text": "ine-learning approaches, it’s useful to try simple, cheap machine-learning mod-\nels (such as small, densely connected networks) before looking into complicated and\ncomputationally expensive models such as RNNs. This is the best way to make sure any\nfurther complexity you throw at the problem is legitimate and delivers real benefits.\nThe following listing shows a fully connected model that starts by flattening the\ndata and then runs it through two Dense layers. Note the lack of activation functio"}
{"text": "n on\nthe last Dense layer, which is typical for a regression problem. You use MAE as the loss.\nBecause you evaluate on the exact same data and with the exact same metric you did\nwith the common-sense approach, the results will be directly comparable.\nListing6.37 Training and evaluating a densely connected model\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.Flatten(input_shape=(lookback // step, float_data.s"}
{"text": "hape[-1])))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(1))\nLicensed to <null>\n214 CHAPTER 6 Deep learning for text and sequences\nmodel.compile(optimizer=RMSprop(), loss='mae')\nhistory = model.fit_generator(train_gen,\nsteps_per_epoch=500,\nepochs=20,\nvalidation_data=val_gen,\nvalidation_steps=val_steps)\nLet’s display the loss curves for validation and training (see figure 6.20).\nListing6.38 Plotting results\nimport matplotlib.pyplot as plt\nloss = history.history['loss']\nva"}
{"text": "l_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()\nFigure 6.20 Training and validation\nloss on the Jena temperature-\nforecasting task with a simple, densely\nconnected network\nSome of the validation losses are close to the no-learning baseline, but not reliably.\nThis goes to show the merit of "}
{"text": "having this baseline in the first place: it turns out to be\nnot easy to outperform. Your common sense contains a lot of valuable information\nthat a machine-learning model doesn’t have access to.\nYou may wonder, if a simple, well-performing model exists to go from the data to\nthe targets (the common-sense baseline), why doesn’t the model you’re training find it\nand improve on it? Because this simple solution isn’t what your training setup is look-\ning for. The space of models in which you’re sear"}
{"text": "ching for a solution—that is, your\nhypothesis space—is the space of all possible two-layer networks with the configuration\nyou defined. These networks are already fairly complicated. When you’re looking for a\nLicensed to <null>\nAdvanced use of recurrent neural networks 215\nsolution with a space of complicated models, the simple, well-performing baseline may\nbe unlearnable, even if it’s technically part of the hypothesis space. That is a pretty sig-\nnificant limitation of machine learning in gene"}
{"text": "ral: unless the learning algorithm is\nhardcoded to look for a specific kind of simple model, parameter learning can some-\ntimes fail to find a simple solution to a simple problem.\n6.3.5 A first recurrent baseline\nThe first fully connected approach didn’t do well, but that doesn’t mean machine\nlearning isn’t applicable to this problem. The previous approach first flattened the\ntimeseries, which removed the notion of time from the input data. Let’s instead look\nat the data as what it is: a sequenc"}
{"text": "e, where causality and order matter. You’ll try a\nrecurrent-sequence processing model—it should be the perfect fit for such sequence\ndata, precisely because it exploits the temporal ordering of data points, unlike the first\napproach.\nInstead of the LSTM layer introduced in the previous section, you’ll use the GRU\nlayer, developed by Chung et al. in 2014.5 Gated recurrent unit (GRU) layers work\nusing the same principle as LSTM, but they’re somewhat streamlined and thus\ncheaper to run (although th"}
{"text": "ey may not have as much representational power as\nLSTM). This trade-off between computational expensiveness and representational\npower is seen everywhere in machine learning.\nListing6.39 Training and evaluating a GRU-based model\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.GRU(32, input_shape=(None, float_data.shape[-1])))\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer=RMSprop(), loss='mae')\nhistory = "}
{"text": "model.fit_generator(train_gen,\nsteps_per_epoch=500,\nepochs=20,\nvalidation_data=val_gen,\nvalidation_steps=val_steps)\nFigure 6.21 shows the results. Much better! You can significantly beat the common-\nsense baseline, demonstrating the value of machine learning as well as the superiority\nof recurrent networks compared to sequence-flattening dense networks on this type\nof task.\n5 Junyoung Chung et al., “Empirical Evaluation of Gated Recurrent Neural Networks on Sequence Modeling,”\nConference on Neur"}
{"text": "al Information Processing Systems (2014), https://arxiv.org/abs/1412.3555.\nLicensed to <null>\n216 CHAPTER 6 Deep learning for text and sequences\nFigure 6.21 Training and validation\nloss on the Jena temperature-\nforecasting task with a GRU\nThe new validation MAE of ~0.265 (before you start significantly overfitting) translates\nto a mean absolute error of 2.35˚C after denormalization. That’s a solid gain on the\ninitial error of 2.57˚C, but you probably still have a bit of a margin for improvement."}
{"text": "\n6.3.6 Using recurrent dropout to fight overfitting\nIt’s evident from the training and validation curves that the model is overfitting: the\ntraining and validation losses start to diverge considerably after a few epochs. You’re\nalready familiar with a classic technique for fighting this phenomenon: dropout,\nwhich randomly zeros out input units of a layer in order to break happenstance cor-\nrelations in the training data that the layer is exposed to. But how to correctly apply\ndropout in recurren"}
{"text": "t networks isn’t a trivial question. It has long been known that\napplying dropout before a recurrent layer hinders learning rather than helping with\nregularization. In 2015, Yarin Gal, as part of his PhD thesis on Bayesian deep learn-\ning,6 determined the proper way to use dropout with a recurrent network: the same\ndropout mask (the same pattern of dropped units) should be applied at every time-\nstep, instead of a dropout mask that varies randomly from timestep to timestep.\nWhat’s more, in order"}
{"text": " to regularize the representations formed by the recurrent gates\nof layers such as GRU and LSTM, a temporally constant dropout mask should be applied\nto the inner recurrent activations of the layer (a recurrent dropout mask). Using the\nsame dropout mask at every timestep allows the network to properly propagate its\nlearning error through time; a temporally random dropout mask would disrupt this\nerror signal and be harmful to the learning process.\nYarin Gal did his research using Keras and helped"}
{"text": " build this mechanism directly\ninto Keras recurrent layers. Every recurrent layer in Keras has two dropout-related\narguments: dropout, a float specifying the dropout rate for input units of the layer,\n6 See Yarin Gal, “Uncertainty in Deep Learning (PhD Thesis),” October 13, 2016, http://mlg.eng.cam.ac.uk/\nyarin/blog_2248.html.\nLicensed to <null>\nAdvanced use of recurrent neural networks 217\nand recurrent_dropout, specifying the dropout rate of the recurrent units. Let’s add\ndropout and recurrent"}
{"text": " dropout to the GRU layer and see how doing so impacts overfit-\nting. Because networks being regularized with dropout always take longer to fully con-\nverge, you’ll train the network for twice as many epochs.\nListing6.40 Training and evaluating a dropout-regularized GRU-based model\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.GRU(32,\ndropout=0.2,\nrecurrent_dropout=0.2,\ninput_shape=(None, float_data.shape[-"}
{"text": "1])))\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer=RMSprop(), loss='mae')\nhistory = model.fit_generator(train_gen,\nsteps_per_epoch=500,\nepochs=40,\nvalidation_data=val_gen,\nvalidation_steps=val_steps)\nFigure 6.22 shows the results. Success! You’re no longer overfitting during the first 30\nepochs. But although you have more stable evaluation scores, your best scores aren’t\nmuch lower than they were previously.\nFigure 6.22 Training and validation\nloss on the Jena temperature-\nforecasting task"}
{"text": " with a dropout-\nregularized GRU\n6.3.7 Stacking recurrent layers\nBecause you’re no longer overfitting but seem to have hit a performance bottleneck,\nyou should consider increasing the capacity of the network. Recall the description of\nthe universal machine-learning workflow: it’s generally a good idea to increase the\ncapacity of your network until overfitting becomes the primary obstacle (assuming\nLicensed to <null>\n218 CHAPTER 6 Deep learning for text and sequences\nyou’re already taking basic s"}
{"text": "teps to mitigate overfitting, such as using dropout). As\nlong as you aren’t overfitting too badly, you’re likely under capacity.\nIncreasing network capacity is typically done by increasing the number of units in\nthe layers or adding more layers. Recurrent layer stacking is a classic way to build\nmore-powerful recurrent networks: for instance, what currently powers the Google\nTranslate algorithm is a stack of seven large LSTM layers—that’s huge.\nTo stack recurrent layers on top of each other in K"}
{"text": "eras, all intermediate layers\nshould return their full sequence of outputs (a 3D tensor) rather than their output at\nthe last timestep. This is done by specifying return_sequences=True.\nListing6.41 Training and evaluating a dropout-regularized, stacked GRU model\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.GRU(32,\ndropout=0.1,\nrecurrent_dropout=0.5,\nreturn_sequences=True,\ninput_shape=(None, float_data.shap"}
{"text": "e[-1])))\nmodel.add(layers.GRU(64, activation='relu',\ndropout=0.1,\nrecurrent_dropout=0.5))\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer=RMSprop(), loss='mae')\nhistory = model.fit_generator(train_gen,\nsteps_per_epoch=500,\nepochs=40,\nvalidation_data=val_gen,\nvalidation_steps=val_steps)\nFigure 6.23 shows the results. You can see that the added layer does improve the\nresults a bit, though not significantly. You can draw two conclusions:\n Because you’re still not overfitting too badly, you coul"}
{"text": "d safely increase the size of\nyour layers in a quest for validation-loss improvement. This has a non-negligible\ncomputational cost, though.\n Adding a layer didn’t help by a significant factor, so you may be seeing diminish-\ning returns from increasing network capacity at this point.\nLicensed to <null>\nAdvanced use of recurrent neural networks 219\nFigure 6.23 Training and validation\nloss on the Jena temperature-\nforecasting task with a stacked\nGRU network\n6.3.8 Using bidirectional RNNs\nThe last "}
{"text": "technique introduced in this section is called bidirectional RNNs. A bidirec-\ntional RNN is a common RNN variant that can offer greater performance than a regu-\nlar RNN on certain tasks. It’s frequently used in natural-language processing—you\ncould call it the Swiss Army knife of deep learning for natural-language processing.\nRNNs are notably order dependent, or time dependent: they process the timesteps\nof their input sequences in order, and shuffling or reversing the timesteps can com-\npletely"}
{"text": " change the representations the RNN extracts from the sequence. This is pre-\ncisely the reason they perform well on problems where order is meaningful, such as\nthe temperature-forecasting problem. A bidirectional RNN exploits the order sensitiv-\nity of RNNs: it consists of using two regular RNNs, such as the GRU and LSTM layers\nyou’re already familiar with, each of which processes the input sequence in one direc-\ntion (chronologically and antichronologically), and then merging their representa-\n"}
{"text": "tions. By processing a sequence both ways, a bidirectional RNN can catch patterns that\nmay be overlooked by a unidirectional RNN.\nRemarkably, the fact that the RNN layers in this section have processed sequences in\nchronological order (older timesteps first) may have been an arbitrary decision. At least,\nit’s a decision we made no attempt to question so far. Could the RNNs have performed\nwell enough if they processed input sequences in antichronological order, for instance\n(newer timesteps first"}
{"text": ")? Let’s try this in practice and see what happens. All you need to\ndo is write a variant of the data generator where the input sequences are reverted along\nthe time dimension (replace the last line with yield samples[:, ::-1, :], targets).\nTraining the same one-GRU-layer network that you used in the first experiment in this\nsection, you get the results shown in figure 6.24.\nLicensed to <null>\n220 CHAPTER 6 Deep learning for text and sequences\nFigure 6.24 Training and validation\nloss on the Jena"}
{"text": " temperature-\nforecasting task with a GRU trained\non reversed sequences\nThe reversed-order GRU strongly underperforms even the common-sense baseline,\nindicating that in this case, chronological processing is important to the success of your\napproach. This makes perfect sense: the underlying GRU layer will typically be better at\nremembering the recent past than the distant past, and naturally the more recent\nweather data points are more predictive than older data points for the problem (that’s\nwh"}
{"text": "at makes the common-sense baseline fairly strong). Thus the chronological version\nof the layer is bound to outperform the reversed-order version. Importantly, this isn’t\ntrue for many other problems, including natural language: intuitively, the importance\nof a word in understanding a sentence isn’t usually dependent on its position in the sen-\ntence. Let’s try the same trick on the LSTM IMDB example from section 6.2.\nListing6.42 Training and evaluating an LSTM using reversed sequences\nfrom keras"}
{"text": ".datasets import imdb\nfrom keras.preprocessing import sequence\nfrom keras import layers\nNumber of words Cuts off texts after this\nfrom keras.models import Sequential\nto consider as number of words (among\nmax_features = 10000 features the max_features most\nmaxlen = 500 common words)\n(x_train, y_train), (x_test, y_test) = imdb.load_data(\nnum_words=max_features)\nLoads\ndata x_train = [x[::-1] for x in x_train] Reverses\nx_test = [x[::-1] for x in x_test] sequences\nx_train = sequence.pad_sequences(x_t"}
{"text": "rain, maxlen=maxlen) Pads\nx_test = sequence.pad_sequences(x_test, maxlen=maxlen) sequences\nmodel = Sequential()\nmodel.add(layers.Embedding(max_features, 128))\nmodel.add(layers.LSTM(32))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop',\nloss='binary_crossentropy',\nmetrics=['acc'])\nLicensed to <null>\nAdvanced use of recurrent neural networks 221\nhistory = model.fit(x_train, y_train,\nepochs=10,\nbatch_size=128,\nvalidation_split=0.2)\nYou get performance nearly identi"}
{"text": "cal to that of the chronological-order LSTM.\nRemarkably, on such a text dataset, reversed-order processing works just as well as\nchronological processing, confirming the hypothesis that, although word order does\nmatter in understanding language, which order you use isn’t crucial. Importantly, an\nRNN trained on reversed sequences will learn different representations than one\ntrained on the original sequences, much as you would have different mental models if\ntime flowed backward in the real world"}
{"text": "—if you lived a life where you died on your first\nday and were born on your last day. In machine learning, representations that are dif-\nferent yet useful are always worth exploiting, and the more they differ, the better: they\noffer a new angle from which to look at your data, capturing aspects of the data that\nwere missed by other approaches, and thus they can help boost performance on a\ntask. This is the intuition behind ensembling, a concept we’ll explore in chapter 7.\nA bidirectional RNN exp"}
{"text": "loits this idea to improve on the performance of chronological-\norder RNNs. It looks at its input sequence both ways (see figure 6.25), obtaining poten-\ntially richer representations and capturing patterns that may have been missed by the\nchronological-order version alone.\nInput data\nMerge (add,\nconcatenate)\nRNN RNN\na, b, c, d, e e, d, c, b, a\nChronological Reversed Figure 6.25 How a\na, b, c, d, e\nsequence sequence bidirectional RNN layer works\nTo instantiate a bidirectional RNN in Keras, you us"}
{"text": "e the Bidirectional layer, which takes\nas its first argument a recurrent layer instance. Bidirectional creates a second, separate\ninstance of this recurrent layer and uses one instance for processing the input sequences\nin chronological order and the other instance for processing the input sequences in\nreversed order. Let’s try it on the IMDB sentiment-analysis task.\nListing6.43 Training and evaluating a bidirectional LSTM\nmodel = Sequential()\nmodel.add(layers.Embedding(max_features, 32))\nmodel."}
{"text": "add(layers.Bidirectional(layers.LSTM(32)))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nLicensed to <null>\n222 CHAPTER 6 Deep learning for text and sequences\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\nhistory = model.fit(x_train, y_train,\nepochs=10,\nbatch_size=128,\nvalidation_split=0.2)\nIt performs slightly better than the regular LSTM you tried in the previous section,\nachieving over 89% validation accuracy. It also seems to overfit more quickly, which i"}
{"text": "s\nunsurprising because a bidirectional layer has twice as many parameters as a chrono-\nlogical LSTM. With some regularization, the bidirectional approach would likely be a\nstrong performer on this task.\nNow let’s try the same approach on the temperature-prediction task.\nListing6.44 Training a bidirectional GRU\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.Bidirectional(\nlayers.GRU(32), input_shape=(None, fl"}
{"text": "oat_data.shape[-1])))\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer=RMSprop(), loss='mae')\nhistory = model.fit_generator(train_gen,\nsteps_per_epoch=500,\nepochs=40,\nvalidation_data=val_gen,\nvalidation_steps=val_steps)\nThis performs about as well as the regular GRU layer. It’s easy to understand why: all the\npredictive capacity must come from the chronological half of the network, because the\nantichronological half is known to be severely underperforming on this task (again,\nbecause the recen"}
{"text": "t past matters much more than the distant past in this case).\n6.3.9 Going even further\nThere are many other things you could try, in order to improve performance on the\ntemperature-forecasting problem:\n Adjust the number of units in each recurrent layer in the stacked setup. The\ncurrent choices are largely arbitrary and thus probably suboptimal.\n Adjust the learning rate used by the RMSprop optimizer.\n Try using LSTM layers instead of GRU layers.\n Try using a bigger densely connected regress"}
{"text": "or on top of the recurrent layers:\nthat is, a bigger Dense layer or even a stack of Dense layers.\n Don’t forget to eventually run the best-performing models (in terms of valida-\ntion MAE) on the test set! Otherwise, you’ll develop architectures that are over-\nfitting to the validation set.\nLicensed to <null>\nAdvanced use of recurrent neural networks 223\nAs always, deep learning is more an art than a science. We can provide guidelines that\nsuggest what is likely to work or not work on a given pr"}
{"text": "oblem, but, ultimately, every\nproblem is unique; you’ll have to evaluate different strategies empirically. There is\ncurrently no theory that will tell you in advance precisely what you should do to opti-\nmally solve a problem. You must iterate.\n6.3.10 Wrapping up\nHere’s what you should take away from this section:\n As you first learned in chapter 4, when approaching a new problem, it’s good to\nfirst establish common-sense baselines for your metric of choice. If you don’t\nhave a baseline to beat"}
{"text": ", you can’t tell whether you’re making real progress.\n Try simple models before expensive ones, to justify the additional expense.\nSometimes a simple model will turn out to be your best option.\n When you have data where temporal ordering matters, recurrent networks are\na great fit and easily outperform models that first flatten the temporal data.\n To use dropout with recurrent networks, you should use a time-constant drop-\nout mask and recurrent dropout mask. These are built into Keras recurr"}
{"text": "ent lay-\ners, so all you have to do is use the dropout and recurrent_dropout arguments\nof recurrent layers.\n Stacked RNNs provide more representational power than a single RNN layer.\nThey’re also much more expensive and thus not always worth it. Although they\noffer clear gains on complex problems (such as machine translation), they may\nnot always be relevant to smaller, simpler problems.\n Bidirectional RNNs, which look at a sequence both ways, are useful on natural-\nlanguage processing problem"}
{"text": "s. But they aren’t strong performers on sequence\ndata where the recent past is much more informative than the beginning of the\nsequence.\nNOTE There are two important concepts we won’t cover in detail here: recur-\nrent attention and sequence masking. Both tend to be especially relevant for\nnatural-language processing, and they aren’t particularly applicable to the\ntemperature-forecasting problem. We’ll leave them for future study outside of\nthis book.\nLicensed to <null>\n224 CHAPTER 6 Deep learnin"}
{"text": "g for text and sequences\nMarkets and machine learning\nSome readers are bound to want to take the techniques we’ve introduced here and\ntry them on the problem of forecasting the future price of securities on the stock mar-\nket (or currency exchange rates, and so on). Markets have very different statistical\ncharacteristics than natural phenomena such as weather patterns. Trying to use\nmachine learning to beat markets, when you only have access to publicly available\ndata, is a difficult endeavor, a"}
{"text": "nd you’re likely to waste your time and resources with\nnothing to show for it.\nAlways remember that when it comes to markets, past performance is not a good\npredictor of future returns—looking in the rear-view mirror is a bad way to drive.\nMachine learning, on the other hand, is applicable to datasets where the past is a\ngood predictor of the future.\nLicensed to <null>\nSequence processing with convnets 225\n6.4 Sequence processing with convnets\nIn chapter 5, you learned about convolutional neural"}
{"text": " networks (convnets) and how\nthey perform particularly well on computer vision problems, due to their ability to\noperate convolutionally, extracting features from local input patches and allowing for\nrepresentation modularity and data efficiency. The same properties that make conv-\nnets excel at computer vision also make them highly relevant to sequence processing.\nTime can be treated as a spatial dimension, like the height or width of a 2D image.\nSuch 1D convnets can be competitive with RNNs on"}
{"text": " certain sequence-processing\nproblems, usually at a considerably cheaper computational cost. Recently, 1D conv-\nnets, typically used with dilated kernels, have been used with great success for audio\ngeneration and machine translation. In addition to these specific successes, it has long\nbeen known that small 1D convnets can offer a fast alternative to RNNs for simple tasks\nsuch as text classification and timeseries forecasting.\n6.4.1 Understanding 1D convolution for sequence data\nThe convolution"}
{"text": " layers introduced previously were 2D convolutions, extracting 2D\npatches from image tensors and applying an identical transformation to every patch.\nIn the same way, you can use 1D convolutions, extracting local 1D patches (subse-\nquences) from sequences (see figure 6.26).\nWindow of\nsize 5\nInput\nInput\nfeatures\nTime\nExtracted\npatch\nDot product\nwith weights\nFigure 6.26 How 1D convolution\nworks: each output timestep is\nOutput\nOutput\nfeatures obtained from a temporal patch in\nthe input sequence.\nSu"}
{"text": "ch 1D convolution layers can recognize local patterns in a sequence. Because the\nsame input transformation is performed on every patch, a pattern learned at a certain\nposition in a sentence can later be recognized at a different position, making 1D conv-\nnets translation invariant (for temporal translations). For instance, a 1D convnet pro-\ncessing sequences of characters using convolution windows of size 5 should be able to\nlearn words or word fragments of length 5 or less, and it should be abl"}
{"text": "e to recognize\nLicensed to <null>\n226 CHAPTER 6 Deep learning for text and sequences\nthese words in any context in an input sequence. A character-level 1D convnet is thus\nable to learn about word morphology.\n6.4.2 1D pooling for sequence data\nYou’re already familiar with 2D pooling operations, such as 2D average pooling and\nmax pooling, used in convnets to spatially downsample image tensors. The 2D pooling\noperation has a 1D equivalent: extracting 1D patches (subsequences) from an input\nand outp"}
{"text": "utting the maximum value (max pooling) or average value (average pooling).\nJust as with 2D convnets, this is used for reducing the length of 1D inputs (subsampling).\n6.4.3 Implementing a 1D convnet\nIn Keras, you use a 1D convnet via the Conv1D layer, which has an interface similar to\nConv2D. It takes as input 3D tensors with shape (samples, time, features) and\nreturns similarly shaped 3D tensors. The convolution window is a 1D window on the\ntemporal axis: axis 1 in the input tensor.\nLet’s build "}
{"text": "a simple two-layer 1D convnet and apply it to the IMDB sentiment-\nclassification task you’re already familiar with. As a reminder, this is the code for\nobtaining and preprocessing the data.\nListing6.45 Preparing the IMDB data\nfrom keras.datasets import imdb\nfrom keras.preprocessing import sequence\nmax_features = 10000\nmax_len = 500\nprint('Loading data...')\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)\nprint(len(x_train), 'train sequences')\nprint(len(x_test), 'test"}
{"text": " sequences')\nprint('Pad sequences (samples x time)')\nx_train = sequence.pad_sequences(x_train, maxlen=max_len)\nx_test = sequence.pad_sequences(x_test, maxlen=max_len)\nprint('x_train shape:', x_train.shape)\nprint('x_test shape:', x_test.shape)\n1D convnets are structured in the same way as their 2D counterparts, which you used\nin chapter 5: they consist of a stack of Conv1D and MaxPooling1D layers, ending in\neither a global pooling layer or a Flatten layer, that turn the 3D outputs into 2D out-\npu"}
{"text": "ts, allowing you to add one or more Dense layers to the model for classification or\nregression.\nOne difference, though, is the fact that you can afford to use larger convolution\nwindows with 1D convnets. With a 2D convolution layer, a 3 × 3 convolution window\ncontains 3 × 3 = 9 feature vectors; but with a 1D convolution layer, a convolution win-\ndow of size 3 contains only 3 feature vectors. You can thus easily afford 1D convolution\nwindows of size 7 or 9.\nLicensed to <null>\nSequence processing "}
{"text": "with convnets 227\nThis is the example 1D convnet for the IMDB dataset.\nListing6.46 Training and evaluating a simple 1D convnet on the IMDB data\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.Embedding(max_features, 128, input_length=max_len))\nmodel.add(layers.Conv1D(32, 7, activation='relu'))\nmodel.add(layers.MaxPooling1D(5))\nmodel.add(layers.Conv1D(32, 7, activation='relu'))\nmodel.add(layers.GlobalMaxPoolin"}
{"text": "g1D())\nmodel.add(layers.Dense(1))\nmodel.summary()\nmodel.compile(optimizer=RMSprop(lr=1e-4),\nloss='binary_crossentropy',\nmetrics=['acc'])\nhistory = model.fit(x_train, y_train,\nepochs=10,\nbatch_size=128,\nvalidation_split=0.2)\nFigures 6.27 and 6.28 show the training and validation results. Validation accuracy is\nsomewhat less than that of the LSTM, but runtime is faster on both CPU and GPU (the\nexact increase in speed will vary greatly depending on your exact configuration). At this\npoint, you coul"}
{"text": "d retrain this model for the right number of epochs (eight) and run it\non the test set. This is a convincing demonstration that a 1D convnet can offer a fast,\ncheap alternative to a recurrent network on a word-level sentiment-classification task.\nFigure 6.27 Training and\nvalidation loss on IMDB with a\nsimple 1D convnet\nLicensed to <null>\n228 CHAPTER 6 Deep learning for text and sequences\nFigure 6.28 Training and\nvalidation accuracy on IMDB\nwith a simple 1D convnet\n6.4.4 Combining CNNs and RNNs t"}
{"text": "o process long sequences\nBecause 1D convnets process input patches independently, they aren’t sensitive to the\norder of the timesteps (beyond a local scale, the size of the convolution windows),\nunlike RNNs. Of course, to recognize longer-term patterns, you can stack many convo-\nlution layers and pooling layers, resulting in upper layers that will see long chunks of\nthe original inputs—but that’s still a fairly weak way to induce order sensitivity. One\nway to evidence this weakness is to try 1D "}
{"text": "convnets on the temperature-forecasting\nproblem, where order-sensitivity is key to producing good predictions. The following\nexample reuses the following variables defined previously: float_data, train_gen,\nval_gen, and val_steps.\nListing6.47 Training and evaluating a simple 1D convnet on the Jena data\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.Conv1D(32, 5, activation='relu',\ninput_shape=(None, float_da"}
{"text": "ta.shape[-1])))\nmodel.add(layers.MaxPooling1D(3))\nmodel.add(layers.Conv1D(32, 5, activation='relu'))\nmodel.add(layers.MaxPooling1D(3))\nmodel.add(layers.Conv1D(32, 5, activation='relu'))\nmodel.add(layers.GlobalMaxPooling1D())\nmodel.add(layers.Dense(1))\nmodel.compile(optimizer=RMSprop(), loss='mae')\nhistory = model.fit_generator(train_gen,\nsteps_per_epoch=500,\nepochs=20,\nvalidation_data=val_gen,\nvalidation_steps=val_steps)\nLicensed to <null>\nSequence processing with convnets 229\nFigure 6.29 shows "}
{"text": "the training and validation MAEs.\nFigure 6.29 Training and\nvalidation loss on the Jena\ntemperature-forecasting task\nwith a simple 1D convnet\nThe validation MAE stays in the 0.40s: you can’t even beat the common-sense baseline\nusing the small convnet. Again, this is because the convnet looks for patterns any-\nwhere in the input timeseries and has no knowledge of the temporal position of a pat-\ntern it sees (toward the beginning, toward the end, and so on). Because more recent\ndata points should b"}
{"text": "e interpreted differently from older data points in the case of this\nspecific forecasting problem, the convnet fails at producing meaningful results. This\nlimitation of convnets isn’t an issue with the IMDB data, because patterns of keywords\nassociated with a positive or negative sentiment are informative independently of\nwhere they’re found in the input sentences.\nOne strategy to combine the speed and lightness of convnets with the order-sensitivity\nof RNNs is to use a 1D convnet as a preproces"}
{"text": "sing step before an RNN (see figure 6.30).\nThis is especially beneficial when you’re deal-\ning with sequences that are so long they can’t\nrealistically be processed with RNNs, such as\nsequences with thousands of steps. The conv-\nRNN\nnet will turn the long input sequence into\nmuch shorter (downsampled) sequences of\nhigher-level features. This sequence of Shorter\nCNN features\nextracted features then becomes the input to sequence\nthe RNN part of the network.\nThis technique isn’t seen often in\n1D CN"}
{"text": "N\nresearch papers and practical applications,\npossibly because it isn’t well known. It’s effec-\ntive and ought to be more common. Let’s try\nLong sequence\nit on the temperature-forecasting dataset.\nBecause this strategy allows you to manipu-\nFigure 6.30 Combining a 1D convnet and\nlate much longer sequences, you can either an RNN for processing long sequences\nLicensed to <null>\n230 CHAPTER 6 Deep learning for text and sequences\nlook at data from longer ago (by increasing the lookback parameter of "}
{"text": "the data gen-\nerator) or look at high-resolution timeseries (by decreasing the step parameter of the\ngenerator). Here, somewhat arbitrarily, you’ll use a step that’s half as large, resulting\nin a timeseries twice as long, where the temperature data is sampled at a rate of\n1point per 30 minutes. The example reuses the generator function defined earlier.\nListing6.48 Preparing higher-resolution data generators for the Jena dataset\nstep = 3\nPreviously set to 6 (1 point per hour);\nlookback = 720\nUnch"}
{"text": "anged now 3 (1 point per 30 min)\ndelay = 144\ntrain_gen = generator(float_data,\nlookback=lookback,\ndelay=delay,\nmin_index=0,\nmax_index=200000,\nshuffle=True,\nstep=step)\nval_gen = generator(float_data,\nlookback=lookback,\ndelay=delay,\nmin_index=200001,\nmax_index=300000,\nstep=step)\ntest_gen = generator(float_data,\nlookback=lookback,\ndelay=delay,\nmin_index=300001,\nmax_index=None,\nstep=step)\nval_steps = (300000 - 200001 - lookback) // 128\ntest_steps = (len(float_data) - 300001 - lookback) // 128\nThis i"}
{"text": "s the model, starting with two Conv1D layers and following up with a GRU layer.\nFigure 6.31 shows the results.\nListing6.49 Model combining a 1D convolutional base and a GRU layer\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.optimizers import RMSprop\nmodel = Sequential()\nmodel.add(layers.Conv1D(32, 5, activation='relu',\ninput_shape=(None, float_data.shape[-1])))\nmodel.add(layers.MaxPooling1D(3))\nmodel.add(layers.Conv1D(32, 5, activation='relu'))\nmodel.add(layers.GRU(32,"}
{"text": " dropout=0.1, recurrent_dropout=0.5))\nmodel.add(layers.Dense(1))\nmodel.summary()\nmodel.compile(optimizer=RMSprop(), loss='mae')\nLicensed to <null>\nSequence processing with convnets 231\nhistory = model.fit_generator(train_gen,\nsteps_per_epoch=500,\nepochs=20,\nvalidation_data=val_gen,\nvalidation_steps=val_steps)\nFigure 6.31 Training and validation\nloss on the Jena temperature-\nforecasting task with a 1D convnet\nfollowed by a GRU\nJudging from the validation loss, this setup isn’t as good as the regu"}
{"text": "larized GRU alone,\nbut it’s significantly faster. It looks at twice as much data, which in this case doesn’t\nappear to be hugely helpful but may be important for other datasets.\n6.4.5 Wrapping up\nHere’s what you should take away from this section:\n In the same way that 2D convnets perform well for processing visual patterns in\n2D space, 1D convnets perform well for processing temporal patterns. They\noffer a faster alternative to RNNs on some problems, in particular natural-\nlanguage processing "}
{"text": "tasks.\n Typically, 1D convnets are structured much like their 2D equivalents from the\nworld of computer vision: they consist of stacks of Conv1D layers and Max-\nPooling1D layers, ending in a global pooling operation or flattening operation.\n Because RNNs are extremely expensive for processing very long sequences, but\n1D convnets are cheap, it can be a good idea to use a 1D convnet as a prepro-\ncessing step before an RNN, shortening the sequence and extracting useful rep-\nresentations for the R"}
{"text": "NN to process.\nLicensed to <null>\n232 CHAPTER 6 Deep learning for text and sequences\nChapter summary\n In this chapter, you learned the following techniques, which are widely\napplicable to any dataset of sequence data, from text to timeseries:\n– How to tokenize text\n– What word embeddings are, and how to use them\n– What recurrent networks are, and how to use them\n– How to stack RNN layers and use bidirectional RNNs to build more-power-\nful sequence-processing models\n– How to use 1D convnets for "}
{"text": "sequence processing\n– How to combine 1D convnets and RNNs to process long sequences\n You can use RNNs for timeseries regression (“predicting the future”),\ntimeseries classification, anomaly detection in timeseries, and sequence\nlabeling (such as identifying names or dates in sentences).\n Similarly, you can use 1D convnets for machine translation (sequence-to-\nsequence convolutional models, like SliceNeta), document classification,\nand spelling correction.\n If global order matters in your sequ"}
{"text": "ence data, then it’s preferable to use a\nrecurrent network to process it. This is typically the case for timeseries,\nwhere the recent past is likely to be more informative than the distant\npast.\n If global ordering isn’t fundamentally meaningful, then 1D convnets will turn\nout to work at least as well and are cheaper. This is often the case for text\ndata, where a keyword found at the beginning of a sentence is just as\nmeaningful as a keyword found at the end.\na See https://arxiv.org/abs/1706.03"}
{"text": "059.\nLicensed to <null>\nAdvanced deep-learning\nbest practices\nThis chapter covers\n The Keras functional API\n Using Keras callbacks\n Working with the TensorBoard visualization tool\n Important best practices for developing state-of-\nthe-art models\nThis chapter explores a number of powerful tools that will bring you closer to\nbeing able to develop state-of-the-art models on difficult problems. Using the Keras\nfunctional API, you can build graph-like models, share a layer across different\ninputs"}
{"text": ", and use Keras models just like Python functions. Keras callbacks and the\nTensorBoard browser-based visualization tool let you monitor models during train-\ning. We’ll also discuss several other best practices including batch normalization,\nresidual connections, hyperparameter optimization, and model ensembling.\n233\nLicensed to <null>\n234 CHAPTER 7 Advanced deep-learning best practices\n7.1 Going beyond the Sequential model:\nthe Keras functional API\nUntil now, all neural networks introduced in th"}
{"text": "is book\nOutput\nhave been implemented using the Sequential model.\nThe Sequential model makes the assumption that the\nnetwork has exactly one input and exactly one output, and Layer\nthat it consists of a linear stack of layers (see figure 7.1).\nThis is a commonly verified assumption; the configu- Layer\nration is so common that we’ve been able to cover many\ntopics and practical applications in these pages so far\nLayer\nusing only the Sequential model class. But this set of\nassumptions is too inflexi"}
{"text": "ble in a number of cases. Some Sequential\nnetworks require several independent inputs, others Input\nrequire multiple outputs, and some networks have inter-\nFigure 7.1 A Sequential\nnal branching between layers that makes them look like model: a linear stack of layers\ngraphs of layers rather than linear stacks of layers.\nSome tasks, for instance, require multimodal inputs: they merge data coming from\ndifferent input sources, processing each type of data using different kinds of neural\nlayers. Imag"}
{"text": "ine a deep-learning model trying to predict the most likely market price of\na second-hand piece of clothing, using the following inputs: user-provided metadata\n(such as the item’s brand, age, and so on), a user-provided text description, and a pic-\nture of the item. If you had only the metadata available, you could one-hot encode it\nand use a densely connected network to predict the price. If you had only the text\ndescription available, you could use an RNN or a 1D convnet. If you had only the p"}
{"text": "ic-\nture, you could use a 2D convnet. But how can you use all three at the same time? A\nnaive approach would be to train three separate models and then do a weighted aver-\nage of their predictions. But this may be suboptimal, because the information\nextracted by the models may be redundant. A better way is to jointly learn a more accu-\nrate model of the data by using a model that can see all available input modalities\nsimultaneously: a model with three input branches (see figure 7.2).\nPrice pred"}
{"text": "iction\nMerging\nmodule\nDense module RNN module Convnet module\nMetadata Text description Picture Figure 7.2 A multi-input model\nLicensed to <null>\nGoing beyond the Sequential model: the Keras functional API 235\nSimilarly, some tasks need to predict multiple target attributes of input data. Given the\ntext of a novel or short story, you might want to automatically classify it by genre (such\nas romance or thriller) but also predict the approximate date it was written. Of course,\nyou could train two s"}
{"text": "eparate models: one for the genre and one for the date. But\nbecause these attributes aren’t statistically independent, you could build a better\nmodel by learning to jointly predict both genre and date at the same time. Such a\njoint model would then have two outputs, or heads (see figure 7.3). Due to correla-\ntions between genre and date, knowing the date of a novel would help the model\nlearn rich, accurate representations of the space of novel genres, and vice versa.\nGenre Date\nGenre Date\nclassi"}
{"text": "fier regressor\nText-processing\nmodule\nNovel text\nFigure 7.3 A multi-output (or multihead) model\nAdditionally, many recently developed neural architectures require nonlinear net-\nwork topology: networks structured as directed acyclic graphs. The Inception family of\nnetworks (developed by Szegedy et al. at Google),1 for instance, relies on Inception\nmodules, where the input is processed by several parallel convolutional branches whose\noutputs are then merged back into a single tensor (see figure 7"}
{"text": ".4). There’s also the\nrecent trend of adding residual connections to a model, which started with the ResNet\nfamily of networks (developed by He et al. at Microsoft).2 A residual connection con-\nsists of reinjecting previous representations into the downstream flow of data by add-\ning a past output tensor to a later output tensor (see figure 7.5), which helps prevent\ninformation loss along the data-processing flow. There are many other examples of\nsuch graph-like networks.\n1 Christian Szegedy et "}
{"text": "al., “Going Deeper with Convolutions,” Conference on Computer Vision and Pattern\nRecognition (2014), https://arxiv.org/abs/1409.4842.\n2 Kaiming He et al., “Deep Residual Learning for Image Recognition,” Conference on Computer Vision and\nPattern Recognition (2015), https://arxiv.org/abs/1512.03385.\nLicensed to <null>\n236 CHAPTER 7 Advanced deep-learning best practices\nOutput\nConcatenate\nConv2D\n3 × 3, strides=2\nConv2D Conv2D Conv2D\n3 × 3, strides=2 3 × 3 3 × 3\nConv2D Conv2D AvgPool2D Conv2D\n1 × 1,"}
{"text": " strides=2 1 × 1 3 × 3, strides=2 1 × 1\nInput\nFigure 7.4 An Inception module: a subgraph of layers with several\nparallel convolutional branches\nLayer\n+\nLayer Residual\nconnection\nLayer\nFigure 7.5 A residual connection:\nreinjection of prior information\nLayer\ndownstream via feature-map addition\nThese three important use cases—multi-input models, multi-output models, and\ngraph-like models—aren’t possible when using only the Sequential model class in\nKeras. But there’s another far more general and fl"}
{"text": "exible way to use Keras: the func-\ntional API. This section explains in detail what it is, what it can do, and how to use it.\n7.1.1 Introduction to the functional API\nIn the functional API, you directly manipulate tensors, and you use layers as functions\nthat take tensors and return tensors (hence, the name functional API):\nfrom keras import Input, layers\ninput_tensor = Input(shape=(32,)) A tensor\nLicensed to <null>\nGoing beyond the Sequential model: the Keras functional API 237\ndense = layers.D"}
{"text": "ense(32, activation='relu') A layer is a function.\noutput_tensor = dense(input_tensor)\nA layer may be called on a\ntensor, and it returns a tensor.\nLet’s start with a minimal example that shows side by side a simple Sequential model\nand its equivalent in the functional API:\nfrom keras.models import Sequential, Model\nfrom keras import layers\nfrom keras import Input Sequential model, which\nyou already know about\nseq_model = Sequential()\nseq_model.add(layers.Dense(32, activation='relu', input_shape="}
{"text": "(64,)))\nseq_model.add(layers.Dense(32, activation='relu'))\nseq_model.add(layers.Dense(10, activation='softmax'))\ninput_tensor = Input(shape=(64,))\nx = layers.Dense(32, activation='relu')(input_tensor)\nIts functional\nx = layers.Dense(32, activation='relu')(x) equivalent\noutput_tensor = layers.Dense(10, activation='softmax')(x)\nmodel = Model(input_tensor, output_tensor)\nThe Model class turns an input tensor\nmodel.summary() Let’s look at it! and output tensor into a model.\nThis is what the call to "}
{"text": "model.summary() displays:\n_________________________________________________________________\nLayer (type) Output Shape Param #\n=================================================================\ninput_1 (InputLayer) (None, 64) 0\n_________________________________________________________________\ndense_1 (Dense) (None, 32) 2080\n_________________________________________________________________\ndense_2 (Dense) (None, 32) 1056\n_________________________________________________________________\ndense_3 (Den"}
{"text": "se) (None, 10) 330\n=================================================================\nTotal params: 3,466\nTrainable params: 3,466\nNon-trainable params: 0\n_________________________________________________________________\nThe only part that may seem a bit magical at this point is instantiating a Model object\nusing only an input tensor and an output tensor. Behind the scenes, Keras retrieves\nevery layer involved in going from input_tensor to output_tensor, bringing them\ntogether into a graph-like da"}
{"text": "ta structure—a Model. Of course, the reason it works is\nthat output_tensor was obtained by repeatedly transforming input_tensor. If you\ntried to build a model from inputs and outputs that weren’t related, you’d get a Run-\ntimeError:\n>>> unrelated_input = Input(shape=(32,))\n>>> bad_model = model = Model(unrelated_input, output_tensor)\nLicensed to <null>\n238 CHAPTER 7 Advanced deep-learning best practices\nRuntimeError: Graph disconnected: cannot\nobtain value for tensor\n➥Tensor(\"input_1:0\", shape=("}
{"text": "?, 64), dtype=float32) at layer \"input_1\".\nThis error tells you, in essence, that Keras couldn’t reach input_1 from the provided\noutput tensor.\nWhen it comes to compiling, training, or evaluating such an instance of Model, the\nAPI is the same as that of Sequential:\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy')\nCompiles\nimport numpy as np the model\nGenerates dummy Numpy\nx_train = np.random.random((1000, 64))\ndata to train on\ny_train = np.random.random((1000, 10))\nmodel.fit(x"}
{"text": "_train, y_train, epochs=10, batch_size=128)\nTrains the model\nscore = model.evaluate(x_train, y_train) for 10 epochs\nEvaluates\nthe model\n7.1.2 Multi-input models\nThe functional API can be used to build models that have multiple inputs. Typically,\nsuch models at some point merge their different input branches using a layer that can\ncombine several tensors: by adding them, concatenating them, and so on. This is usu-\nally done via a Keras merge operation such as keras.layers.add, keras.layers\n.conca"}
{"text": "tenate, and so on. Let’s look at a very simple example of a multi-input model:\na question-answering model.\nA typical question-answering model has two inputs: a natural-language question\nand a text snippet (such as a news article) providing information to be used for\nanswering the question. The model must then produce an answer: in the simplest pos-\nsible setup, this is a one-word answer obtained via a softmax over some predefined\nvocabulary (see figure 7.6).\nAnswer\nDense\nConcatenate\nLSTM LSTM\nEm"}
{"text": "bedding Embedding\nFigure 7.6 A question-answering model\nReference text Question\nLicensed to <null>\nGoing beyond the Sequential model: the Keras functional API 239\nFollowing is an example of how you can build such a model with the functional API.\nYou set up two independent branches, encoding the text input and the question input\nas representation vectors; then, concatenate these vectors; and finally, add a softmax\nclassifier on top of the concatenated representations.\nListing7.1 Functional API im"}
{"text": "plementation of a two-input question-answering model\nfrom keras.models import Model\nfrom keras import layers\nfrom keras import Input\nThe text input is a variable-\ntext_vocabulary_size = 10000 length sequence of integers.\nNote that you can optionally\nquestion_vocabulary_size = 10000\nname the inputs.\nanswer_vocabulary_size = 500\ntext_input = Input(shape=(None,), dtype='int32', name='text')\nembedded_text = layers.Embedding(\n64, text_vocabulary_size)(text_input)\nEmbeds the inputs\ninto a sequence of\n"}
{"text": "encoded_text = layers.LSTM(32)(embedded_text)\nvectors of size 64\nquestion_input = Input(shape=(None,), Encodes the vectors in a\ndtype='int32', single vector via an LSTM\nname='question')\nSame process (with different layer\nembedded_question = layers.Embedding(\ninstances) for the question\n32, question_vocabulary_size)(question_input)\nencoded_question = layers.LSTM(16)(embedded_question)\nconcatenated = layers.concatenate([encoded_text, encoded_question],\naxis=-1)\nConcatenates the encoded\nanswer = la"}
{"text": "yers.Dense(answer_vocabulary_size, question and encoded text\nactivation='softmax')(concatenated)\nAdds a softmax\nmodel = Model([text_input, question_input], answer) classifier on top\nmodel.compile(optimizer='rmsprop',\nAt model instantiation, you specify\nloss='categorical_crossentropy',\nthe two inputs and the output.\nmetrics=['acc'])\nNow, how do you train this two-input model? There are two possible APIs: you can feed\nthe model a list of Numpy arrays as inputs, or you can feed it a dictionary that"}
{"text": " maps\ninput names to Numpy arrays. Naturally, the latter option is available only if you give\nnames to your inputs.\nListing7.2 Feeding data to a multi-input model\nimport numpy as np Generates dummy\nNumpy data\nnum_samples = 1000\nmax_length = 100\ntext = np.random.randint(1, text_vocabulary_size,\nsize=(num_samples, max_length))\nLicensed to <null>\n240 CHAPTER 7 Advanced deep-learning best practices\nAnswers are one-\nquestion = np.random.randint(1, question_vocabulary_size, hot encoded,\nsize=(num_samp"}
{"text": "les, max_length)) not integers\nanswers = np.random.randint(0, 1,\nsize=(num_samples, answer_vocabulary_size))\nmodel.fit([text, question], answers, epochs=10, batch_size=128)\nmodel.fit({'text': text, 'question': question}, answers,\nepochs=10, batch_size=128)\nFitting using a list of inputs Fitting using a dictionary of\ninputs (only if inputs are named)\n7.1.3 Multi-output models\nIn the same way, you can use the functional API to build models with multiple outputs\n(or multiple heads). A simple exampl"}
{"text": "e is a network that attempts to simultaneously\npredict different properties of the data, such as a network that takes as input a series\nof social media posts from a single anonymous person and tries to predict attributes of\nthat person, such as age, gender, and income level (see figure 7.7).\nListing7.3 Functional API implementation of a three-output model\nfrom keras import layers\nfrom keras import Input\nfrom keras.models import Model\nvocabulary_size = 50000\nnum_income_groups = 10\nposts_input = I"}
{"text": "nput(shape=(None,), dtype='int32', name='posts')\nembedded_posts = layers.Embedding(256, vocabulary_size)(posts_input)\nx = layers.Conv1D(128, 5, activation='relu')(embedded_posts)\nx = layers.MaxPooling1D(5)(x)\nx = layers.Conv1D(256, 5, activation='relu')(x)\nx = layers.Conv1D(256, 5, activation='relu')(x)\nx = layers.MaxPooling1D(5)(x)\nx = layers.Conv1D(256, 5, activation='relu')(x)\nx = layers.Conv1D(256, 5, activation='relu')(x)\nx = layers.GlobalMaxPooling1D()(x)\nx = layers.Dense(128, activation='"}
{"text": "relu')(x) Note that the output\nlayers are given names.\nage_prediction = layers.Dense(1, name='age')(x)\nincome_prediction = layers.Dense(num_income_groups,\nactivation='softmax',\nname='income')(x)\ngender_prediction = layers.Dense(1, activation='sigmoid', name='gender')(x)\nmodel = Model(posts_input,\n[age_prediction, income_prediction, gender_prediction])\nLicensed to <null>\nGoing beyond the Sequential model: the Keras functional API 241\nAge Income Gender\nDense Dense Dense\n1D convnet\nFigure 7.7 A soc"}
{"text": "ial media\nSocial media posts model with three heads\nImportantly, training such a model requires the ability to specify different loss func-\ntions for different heads of the network: for instance, age prediction is a scalar regres-\nsion task, but gender prediction is a binary classification task, requiring a different\ntraining procedure. But because gradient descent requires you to minimize a scalar,\nyou must combine these losses into a single value in order to train the model. The\nsimplest way t"}
{"text": "o combine different losses is to sum them all. In Keras, you can use\neither a list or a dictionary of losses in compile to specify different objects for different\noutputs; the resulting loss values are summed into a global loss, which is minimized\nduring training.\nListing7.4 Compilation options of a multi-output model: multiple losses\nmodel.compile(optimizer='rmsprop',\nloss=['mse', 'categorical_crossentropy', 'binary_crossentropy'])\nmodel.compile(optimizer='rmsprop',\nEquivalent (possible\nloss={'"}
{"text": "age': 'mse', only if you give names\n'income': 'categorical_crossentropy', to the output layers)\n'gender': 'binary_crossentropy'})\nNote that very imbalanced loss contributions will cause the model representations to\nbe optimized preferentially for the task with the largest individual loss, at the expense\nof the other tasks. To remedy this, you can assign different levels of importance to the\nloss values in their contribution to the final loss. This is useful in particular if the\nlosses’ values us"}
{"text": "e different scales. For instance, the mean squared error (MSE) loss\nused for the age-regression task typically takes a value around 3–5, whereas the cross-\nentropy loss used for the gender-classification task can be as low as 0.1. In such a situa-\ntion, to balance the contribution of the different losses, you can assign a weight of 10\nto the crossentropy loss and a weight of 0.25 to the MSE loss.\nListing7.5 Compilation options of a multi-output model: loss weighting\nmodel.compile(optimizer='rmsp"}
{"text": "rop',\nloss=['mse', 'categorical_crossentropy', 'binary_crossentropy'],\nloss_weights=[0.25, 1., 10.])\nLicensed to <null>\n242 CHAPTER 7 Advanced deep-learning best practices\nmodel.compile(optimizer='rmsprop',\nloss={'age': 'mse',\n'income': 'categorical_crossentropy', Equivalent (possible\n'gender': 'binary_crossentropy'}, only if you give names\nloss_weights={'age': 0.25, to the output layers)\n'income': 1.,\n'gender': 10.})\nMuch as in the case of multi-input models, you can pass Numpy data to the mode"}
{"text": "l for\ntraining either via a list of arrays or via a dictionary of arrays.\nListing7.6 Feeding data to a multi-output model\nmodel.fit(posts, [age_targets, income_targets, gender_targets],\nepochs=10, batch_size=64)\nmodel.fit(posts, {'age': age_targets,\n'income': income_targets, Equivalent (possible only if you\n'gender': gender_targets}, give names to the output layers)\nepochs=10, batch_size=64)\nage_targets, income_targets, and\ngender_targets are assumed to be\nNumpy arrays.\n7.1.4 Directed acyclic gr"}
{"text": "aphs of layers\nWith the functional API, not only can you build models with multiple inputs and mul-\ntiple outputs, but you can also implement networks with a complex internal topology.\nNeural networks in Keras are allowed to be arbitrary directed acyclic graphs of layers. The\nqualifier acyclic is important: these graphs can’t have cycles. It’s impossible for a tensor\nx to become the input of one of the layers that generated x. The only processing loops\nthat are allowed (that is, recurrent connec"}
{"text": "tions) are those internal to recurrent layers.\nSeveral common neural-network components are implemented as graphs. Two\nnotable ones are Inception modules and residual connections. To better understand\nhow the functional API can be used to build graphs of layers, let’s take a look at how\nyou can implement both of them in Keras.\nINCEPTION MODULES\nInception3 is a popular type of network architecture for convolutional neural networks;\nit was developed by Christian Szegedy and his colleagues at Googl"}
{"text": "e in 2013–2014,\ninspired by the earlier network-in-network architecture.4 It consists of a stack of modules\nthat themselves look like small independent networks, split into several parallel\nbranches. The most basic form of an Inception module has three to four branches\nstarting with a 1 × 1 convolution, followed by a 3 × 3 convolution, and ending with the\nconcatenation of the resulting features. This setup helps the network separately learn\n3 https://arxiv.org/abs/1409.4842.\n4 Min Lin, Qiang Che"}
{"text": "n, and Shuicheng Yan, “Network in Network,” International Conference on Learning\nRepresentations (2013), https://arxiv.org/abs/1312.4400.\nLicensed to <null>\nGoing beyond the Sequential model: the Keras functional API 243\nspatial features and channel-wise features, which is more efficient than learning them\njointly. More-complex versions of an Inception module are also possible, typically\ninvolving pooling operations, different spatial convolution sizes (for example, 5 × 5\ninstead of 3 × 3 on som"}
{"text": "e branches), and branches without a spatial convolution (only\na 1 × 1 convolution). An example of such a module, taken from Inception V3, is\nshown in figure 7.8.\nOutput\nConcatenate\nConv2D\n3 × 3, strides=2\nConv2D Conv2D Conv2D\n3 × 3, strides=2 3 × 3 3 × 3\nConv2D Conv2D AvgPool2D Conv2D Figure 7.8 An Inception\n1 × 1, strides=2 1 × 1 3 × 3, strides=2 1 × 1\nmodule\nInput\nThe purpose of 1 × 1 convolutions\nYou already know that convolutions extract spatial patches around every tile in an\ninput tensor a"}
{"text": "nd apply the same transformation to each patch. An edge case is when\nthe patches extracted consist of a single tile. The convolution operation then\nbecomes equivalent to running each tile vector through a Dense layer: it will compute\nfeatures that mix together information from the channels of the input tensor, but it\nwon’t mix information across space (because it’s looking at one tile at a time). Such\n1 × 1 convolutions (also called pointwise convolutions) are featured in Inception mod-\nules, wh"}
{"text": "ere they contribute to factoring out channel-wise feature learning and space-\nwise feature learning—a reasonable thing to do if you assume that each channel is\nhighly autocorrelated across space, but different channels may not be highly cor-\nrelated with each other.\nHere’s how you’d implement the module featured in figure 7.8 using the functional\nAPI. This example assumes the existence of a 4D input tensor x:\nLicensed to <null>\n244 CHAPTER 7 Advanced deep-learning best practices\nEvery branch has"}
{"text": " the same stride value (2),\nwhich is necessary to keep all branch outputs In this branch, the striding occurs\nthe same size so you can concatenate them. in the spatial convolution layer.\nfrom keras import layers\nbranch_a = layers.Conv2D(128, 1,\nactivation='relu', strides=2)(x)\nbranch_b = layers.Conv2D(128, 1, activation='relu')(x)\nbranch_b = layers.Conv2D(128, 3, activation='relu', strides=2)(branch_b)\nbranch_c = layers.AveragePooling2D(3, strides=2)(x)\nbranch_c = layers.Conv2D(128, 3, activatio"}
{"text": "n='relu')(branch_c)\nbranch_d = layers.Conv2D(128, 1, activation='relu')(x)\nbranch_d = layers.Conv2D(128, 3, activation='relu')(branch_d)\nbranch_d = layers.Conv2D(128, 3, activation='relu', strides=2)(branch_d)\noutput = layers.concatenate(\n[branch_a, branch_b, branch_c, branch_d], axis=-1)\nConcatenates the\nbranch outputs to\nIn this branch, the striding occurs obtain the module\nin the average pooling layer. output\nNote that the full Inception V3 architecture is available in Keras as keras.applicat"}
{"text": "ions\n.inception_v3.InceptionV3, including weights pretrained on the ImageNet dataset.\nAnother closely related model available as part of the Keras applications module is\nXception.5 Xception, which stands for extreme inception, is a convnet architecture loosely\ninspired by Inception. It takes the idea of separating the learning of channel-wise and\nspace-wise features to its logical extreme, and replaces Inception modules with depth-\nwise separable convolutions consisting of a depthwise convolutio"}
{"text": "n (a spatial convolu-\ntion where every input channel is handled separately) followed by a pointwise\nconvolution (a 1 × 1 convolution)—effectively, an extreme form of an Inception mod-\nule, where spatial features and channel-wise features are fully separated. Xception has\nroughly the same number of parameters as Inception V3, but it shows better runtime\nperformance and higher accuracy on ImageNet as well as other large-scale datasets,\ndue to a more efficient use of model parameters.\nRESIDUAL CONN"}
{"text": "ECTIONS\nResidual connections are a common graph-like network component found in many post-\n2015 network architectures, including Xception. They were introduced by He et al.\nfrom Microsoft in their winning entry in the ILSVRC ImageNet challenge in late 2015.6\nThey tackle two common problems that plague any large-scale deep-learning model:\nvanishing gradients and representational bottlenecks. In general, adding residual con-\nnections to any model that has more than 10 layers is likely to be benefi"}
{"text": "cial.\n5 François Chollet, “Xception: Deep Learning with Depthwise Separable Convolutions,” Conference on Com-\nputer Vision and Pattern Recognition (2017), https://arxiv.org/abs/1610.02357.\n6 He et al., “Deep Residual Learning for Image Recognition,” https://arxiv.org/abs/1512.03385.\nLicensed to <null>\nGoing beyond the Sequential model: the Keras functional API 245\nA residual connection consists of making the output of an earlier layer available as\ninput to a later layer, effectively creating a s"}
{"text": "hortcut in a sequential network. Rather\nthan being concatenated to the later activation, the earlier output is summed with the\nlater activation, which assumes that both activations are the same size. If they’re differ-\nent sizes, you can use a linear transformation to reshape the earlier activation into the\ntarget shape (for example, a Dense layer without an activation or, for convolutional\nfeature maps, a 1 × 1 convolution without an activation).\nHere’s how to implement a residual connection in"}
{"text": " Keras when the feature-map\nsizes are the same, using identity residual connections. This example assumes the exis-\ntence of a 4D input tensor x:\nfrom keras import layers Applies a transformation to x\nx = ...\ny = layers.Conv2D(128, 3, activation='relu', padding='same')(x)\ny = layers.Conv2D(128, 3, activation='relu', padding='same')(y)\ny = layers.Conv2D(128, 3, activation='relu', padding='same')(y)\ny = layers.add([y, x])\nAdds the original x back to\nthe output features\nAnd the following implements"}
{"text": " a residual connection when the feature-map sizes dif-\nfer, using a linear residual connection (again, assuming the existence of a 4D input\ntensor x):\nUses a 1 × 1 convolution to\nfrom keras import layers linearly downsample the original\nx tensor to the same shape as y\nx = ...\ny = layers.Conv2D(128, 3, activation='relu', padding='same')(x)\ny = layers.Conv2D(128, 3, activation='relu', padding='same')(y)\ny = layers.MaxPooling2D(2, strides=2)(y)\nresidual = layers.Conv2D(128, 1, strides=2, padding='s"}
{"text": "ame')(x)\ny = layers.add([y, residual]) Adds the residual tensor\nback to the output features\nRepresentational bottlenecks in deep learning\nIn a Sequential model, each successive representation layer is built on top of the\nprevious one, which means it only has access to information contained in the activa-\ntion of the previous layer. If one layer is too small (for example, it has features that\nare too low-dimensional), then the model will be constrained by how much informa-\ntion can be crammed int"}
{"text": "o the activations of this layer.\nLicensed to <null>\n246 CHAPTER 7 Advanced deep-learning best practices\n(continued)\nYou can grasp this concept with a signal-processing analogy: if you have an audio-\nprocessing pipeline that consists of a series of operations, each of which takes as\ninput the output of the previous operation, then if one operation crops your signal to\na low-frequency range (for example, 0–15 kHz), the operations downstream will never\nbe able to recover the dropped frequencies. An"}
{"text": "y loss of information is permanent.\nResidual connections, by reinjecting earlier information downstream, partially solve\nthis issue for deep-learning models.\nVanishing gradients in deep learning\nBackpropagation, the master algorithm used to train deep neural networks, works by\npropagating a feedback signal from the output loss down to earlier layers. If this feed-\nback signal has to be propagated through a deep stack of layers, the signal may\nbecome tenuous or even be lost entirely, rendering th"}
{"text": "e network untrainable. This\nissue is known as vanishing gradients.\nThis problem occurs both with deep networks and with recurrent networks over very\nlong sequences—in both cases, a feedback signal must be propagated through a\nlong series of operations. You’re already familiar with the solution that the LSTM layer\nuses to address this problem in recurrent networks: it introduces a carry track that\npropagates information parallel to the main processing track. Residual connections\nwork in a similar"}
{"text": " way in feedforward deep networks, but they’re even simpler: they\nintroduce a purely linear information carry track parallel to the main layer stack, thus\nhelping to propagate gradients through arbitrarily deep stacks of layers.\n7.1.5 Layer weight sharing\nOne more important feature of the functional API is the ability to reuse a layer\ninstance several times. When you call a layer instance twice, instead of instantiating a\nnew layer for each call, you reuse the same weights with every call. This "}
{"text": "allows you to\nbuild models that have shared branches—several branches that all share the same\nknowledge and perform the same operations. That is, they share the same representa-\ntions and learn these representations simultaneously for different sets of inputs.\nFor example, consider a model that attempts to assess the semantic similarity\nbetween two sentences. The model has two inputs (the two sentences to compare)\nand outputs a score between 0 and 1, where 0 means unrelated sentences and 1 means"}
{"text": "\nsentences that are either identical or reformulations of each other. Such a model\ncould be useful in many applications, including deduplicating natural-language que-\nries in a dialog system.\nIn this setup, the two input sentences are interchangeable, because semantic simi-\nlarity is a symmetrical relationship: the similarity of A to B is identical to the similarity\nof B to A. For this reason, it wouldn’t make sense to learn two independent models for\nLicensed to <null>\nGoing beyond the Sequenti"}
{"text": "al model: the Keras functional API 247\nprocessing each input sentence. Rather, you want to process both with a single LSTM\nlayer. The representations of this LSTM layer (its weights) are learned based on both\ninputs simultaneously. This is what we call a Siamese LSTM model or a shared LSTM.\nHere’s how to implement such a model using layer sharing (layer reuse) in the\nKeras functional API:\nInstantiates a single\nfrom keras import layers\nLSTM layer, once\nfrom keras import Input\nfrom keras.models im"}
{"text": "port Model Building the left branch of the\nmodel: inputs are variable-length\nlstm = layers.LSTM(32)\nsequences of vectors of size 128.\nleft_input = Input(shape=(None, 128))\nleft_output = lstm(left_input) Building the right branch of the model:\nwhen you call an existing layer\nright_input = Input(shape=(None, 128))\ninstance, you reuse its weights.\nright_output = lstm(right_input)\nmerged = layers.concatenate([left_output, right_output], axis=-1)\npredictions = layers.Dense(1, activation='sigmoid')(me"}
{"text": "rged)\nmodel = Model([left_input, right_input], predictions)\nmodel.fit([left_data, right_data], targets)\nBuilds the classifier on top Instantiating and training the model: when you\ntrain such a model, the weights of the LSTM layer\nare updated based on both inputs.\nNaturally, a layer instance may be used more than once—it can be called arbitrarily\nmany times, reusing the same set of weights every time.\n7.1.6 Models as layers\nImportantly, in the functional API, models can be used as you’d use layer"}
{"text": "s—effectively,\nyou can think of a model as a “bigger layer.” This is true of both the Sequential and\nModel classes. This means you can call a model on an input tensor and retrieve an out-\nput tensor:\ny = model(x)\nIf the model has multiple input tensors and multiple output tensors, it should be\ncalled with a list of tensors:\ny1, y2 = model([x1, x2])\nWhen you call a model instance, you’re reusing the weights of the model—exactly like\nwhat happens when you call a layer instance. Calling an instance"}
{"text": ", whether it’s a layer\ninstance or a model instance, will always reuse the existing learned representations of\nthe instance—which is intuitive.\nOne simple practical example of what you can build by reusing a model instance is\na vision model that uses a dual camera as its input: two parallel cameras, a few centi-\nmeters (one inch) apart. Such a model can perceive depth, which can be useful in\nmany applications. You shouldn’t need two independent models to extract visual\nLicensed to <null>\n248 CHA"}
{"text": "PTER 7 Advanced deep-learning best practices\nfeatures from the left camera and the right camera before merging the two feeds.\nSuch low-level processing can be shared across the two inputs: that is, done via layers\nthat use the same weights and thus share the same representations. Here’s how you’d\nimplement a Siamese vision model (shared convolutional base) in Keras:\nfrom keras import layers\nThe base image-processing\nfrom keras import applications\nmodel is the Xception network\nfrom keras import I"}
{"text": "nput (convolutional base only).\nxception_base = applications.Xception(weights=None,\ninclude_top=False)\nleft_input = Input(shape=(250, 250, 3)) The inputs are 250 × 250\nright_input = Input(shape=(250, 250, 3)) RGB images.\nleft_features = xception_base(left_input) Calls the same vision\nright_input = xception_base(right_input) model twice\nmerged_features = layers.concatenate(\n[left_features, right_input], axis=-1)\nThe merged features contain\ninformation from the right visual\nfeed and the left visua"}
{"text": "l feed.\n7.1.7 Wrapping up\nThis concludes our introduction to the Keras functional API—an essential tool for\nbuilding advanced deep neural network architectures. Now you know the following:\n To step out of the Sequential API whenever you need anything more than a lin-\near stack of layers\n How to build Keras models with several inputs, several outputs, and complex\ninternal network topology, using the Keras functional API\n How to reuse the weights of a layer or model across different processing\n"}
{"text": "branches, by calling the same layer or model instance several times\nLicensed to <null>\nInspecting and monitoring deep-learning models using Keras callbacks and TensorBoard 249\n7.2 Inspecting and monitoring deep-learning models using\nKeras callbacks and TensorBoard\nIn this section, we’ll review ways to gain greater access to and control over what goes\non inside your model during training. Launching a training run on a large dataset for\ntens of epochs using model.fit() or model.fit_generator() can"}
{"text": " be a bit like\nlaunching a paper airplane: past the initial impulse, you don’t have any control over\nits trajectory or its landing spot. If you want to avoid bad outcomes (and thus wasted\npaper airplanes), it’s smarter to use not a paper plane, but a drone that can sense its\nenvironment, send data back to its operator, and automatically make steering deci-\nsions based on its current state. The techniques we present here will transform the call\nto model.fit() from a paper airplane into a smart, a"}
{"text": "utonomous drone that can self-\nintrospect and dynamically take action.\n7.2.1 Using callbacks to act on a model during training\nWhen you’re training a model, there are many things you can’t predict from the start.\nIn particular, you can’t tell how many epochs will be needed to get to an optimal vali-\ndation loss. The examples so far have adopted the strategy of training for enough\nepochs that you begin overfitting, using the first run to figure out the proper number\nof epochs to train for, and th"}
{"text": "en finally launching a new training run from scratch\nusing this optimal number. Of course, this approach is wasteful.\nA much better way to handle this is to stop training when you measure that the val-\nidation loss in no longer improving. This can be achieved using a Keras callback. A\ncallback is an object (a class instance implementing specific methods) that is passed to\nthe model in the call to fit and that is called by the model at various points during\ntraining. It has access to all the avai"}
{"text": "lable data about the state of the model and its per-\nformance, and it can take action: interrupt training, save a model, load a different\nweight set, or otherwise alter the state of the model.\nHere are some examples of ways you can use callbacks:\n Model checkpointing—Saving the current weights of the model at different points\nduring training.\n Early stopping—Interrupting training when the validation loss is no longer\nimproving (and of course, saving the best model obtained during training).\n "}
{"text": "Dynamically adjusting the value of certain parameters during training—Such as the\nlearning rate of the optimizer.\n Logging training and validation metrics during training, or visualizing the representa-\ntions learned by the model as they’re updated—The Keras progress bar that you’re\nfamiliar with is a callback!\nThe keras.callbacks module includes a number of built-in callbacks (this is not an\nexhaustive list):\nkeras.callbacks.ModelCheckpoint\nkeras.callbacks.EarlyStopping\nLicensed to <null>\n250 "}
{"text": "CHAPTER 7 Advanced deep-learning best practices\nkeras.callbacks.LearningRateScheduler\nkeras.callbacks.ReduceLROnPlateau\nkeras.callbacks.CSVLogger\nLet’s review a few of them to give you an idea of how to use them: ModelCheckpoint,\nEarlyStopping, and ReduceLROnPlateau.\nTHE MODELCHECKPOINT AND EARLYSTOPPING CALLBACKS\nYou can use the EarlyStopping callback to interrupt training once a target metric\nbeing monitored has stopped improving for a fixed number of epochs. For instance,\nthis callback allows"}
{"text": " you to interrupt training as soon as you start overfitting, thus\navoiding having to retrain your model for a smaller number of epochs. This callback is\ntypically used in combination with ModelCheckpoint, which lets you continually save\nthe model during training (and, optionally, save only the current best model so far:\nthe version of the model that achieved the best performance at the end of an epoch):\nCallbacks are passed to the model via the Interrupts training when\ncallbacks argument in fit,"}
{"text": " which takes a list of improvement stops\ncallbacks. You can pass any number of callbacks.\nMonitors the model’s\nimport keras validation accuracy\ncallbacks_list = [ Interrupts training when\nkeras.callbacks.EarlyStopping( accuracy has stopped\nmonitor='acc', improving for more than one\npatience=1, epoch (that is, two epochs)\n),\nkeras.callbacks.ModelCheckpoint( Saves the current weights after every epoch\nfilepath='my_model.h5', Path to the destination model file\nmonitor='val_loss',\nsave_best_only=Tru"}
{"text": "e, These two arguments mean you won’t overwrite the\n) model file unless val_loss has improved, which allows\n] you to keep the best model seen during training.\nmodel.compile(optimizer='rmsprop',\nloss='binary_crossentropy', You monitor accuracy, so it should\nbe part of the model’s metrics.\nmetrics=['acc'])\nmodel.fit(x, y,\nNote that because the callback will\nepochs=10,\nmonitor validation loss and\nbatch_size=32,\nvalidation accuracy, you need to pass\ncallbacks=callbacks_list,\nvalidation_data to the c"}
{"text": "all to fit.\nvalidation_data=(x_val, y_val))\nTHE REDUCELRONPLATEAU CALLBACK\nYou can use this callback to reduce the learning rate when the validation loss has\nstopped improving. Reducing or increasing the learning rate in case of a loss plateau is\nis an effective strategy to get out of local minima during training. The following exam-\nple uses the ReduceLROnPlateau callback:\nLicensed to <null>\nInspecting and monitoring deep-learning models using Keras callbacks and TensorBoard 251\ncallbacks_list "}
{"text": "= [ Monitors the model’s\nkeras.callbacks.ReduceLROnPlateau( validation loss\nmonitor='val_loss'\nfactor=0.1, Divides the learning rate by 10 when triggered\npatience=10,\nThe callback is triggered after the validation\n)\nloss has stopped improving for 10 epochs.\n]\nmodel.fit(x, y,\nepochs=10, Because the callback will\nmonitor the validation loss, you\nbatch_size=32,\nneed to pass validation_data to\ncallbacks=callbacks_list,\nthe call to fit.\nvalidation_data=(x_val, y_val))\nWRITING YOUR OWN CALLBACK\nIf you"}
{"text": " need to take a specific action during training that isn’t covered by one of the\nbuilt-in callbacks, you can write your own callback. Callbacks are implemented by sub-\nclassing the class keras.callbacks.Callback. You can then implement any number\nof the following transparently named methods, which are called at various points\nduring training:\non_epoch_begin Called at the start of every epoch\non_epoch_end Called at the end of every epoch\non_batch_begin Called right before processing each batch\non"}
{"text": "_batch_end Called right after processing each batch\non_train_begin Called at the start of training\non_train_end Called at the end of training\nThese methods all are called with a logs argument, which is a dictionary containing\ninformation about the previous batch, epoch, or training run: training and validation\nmetrics, and so on. Additionally, the callback has access to the following attributes:\n self.model—The model instance from which the callback is being called\n self.validation_data—The va"}
{"text": "lue of what was passed to fit as validation data\nHere’s a simple example of a custom callback that saves to disk (as Numpy arrays) the\nactivations of every layer of the model at the end of every epoch, computed on the\nfirst sample of the validation set:\nimport keras\nimport numpy as np\nCalled by the parent model\nclass ActivationLogger(keras.callbacks.Callback): before training, to inform\nthe callback of what model\ndef set_model(self, model): will be calling it\nself.model = model\nlayer_outputs = ["}
{"text": "layer.output for layer in model.layers]\nself.activations_model = keras.models.Model(model.input,\nlayer_outputs)\ndef on_epoch_end(self, epoch, logs=None): Model instance\nif self.validation_data is None: that returns the\nraise RuntimeError('Requires validation_data.') activations of\nevery layer\nLicensed to <null>\n252 CHAPTER 7 Advanced deep-learning best practices\nvalidation_sample = self.validation_data[0][0:1]\nactivations = self.activations_model.predict(validation_sample)\nf = open('activations_"}
{"text": "at_epoch_' + str(epoch) + '.npz', 'w')\nnp.savez(f, activations)\nf.close()\nObtains the first input sample\nSaves arrays to disk\nof the validation data\nThis is all you need to know about callbacks—the rest is technical details, which you\ncan easily look up. Now you’re equipped to perform any sort of logging or prepro-\ngrammed intervention on a Keras model during training.\n7.2.2 Introduction to TensorBoard:\nthe TensorFlow visualization framework\nTo do good research or develop good models, you need r"}
{"text": "ich, frequent feedback about\nwhat’s going on inside your models during your experiments. That’s the point of run-\nning experiments: to get information about how well a model performs—as much\ninformation as possible. Making progress is an iterative process, or loop: you start with\nan idea and express it as an experiment, attempting to validate or invalidate your idea.\nYou run this experiment and process the information it generates. This inspires your\nnext idea. The more iterations of this loop y"}
{"text": "ou’re able to run, the more refined and\npowerful your ideas become. Keras helps you go from idea to experiment in the least\npossible time, and fast GPUs can help you get from experiment to result as quickly as\npossible. But what about processing the experiment results? That’s where Tensor-\nBoard comes in.\nIdea\nVisualization Deep-learning\nframework: framework:\nTensorBoard Keras\nResults Experiment\nInfrastructure Figure 7.9 The loop of progress\nThis section introduces TensorBoard, a browser-based v"}
{"text": "isualization tool that comes\npackaged with TensorFlow. Note that it’s only available for Keras models when you’re\nusing Keras with the TensorFlow backend.\nThe key purpose of TensorBoard is to help you visually monitor everything that\ngoes on inside your model during training. If you’re monitoring more information\nthan just the model’s final loss, you can develop a clearer vision of what the model\ndoes and doesn’t do, and you can make progress more quickly. TensorBoard gives you\naccess to several"}
{"text": " neat features, all in your browser:\nLicensed to <null>\nInspecting and monitoring deep-learning models using Keras callbacks and TensorBoard 253\n Visually monitoring metrics during training\n Visualizing your model architecture\n Visualizing histograms of activations and gradients\n Exploring embeddings in 3D\nLet’s demonstrate these features on a simple example. You’ll train a 1D convnet on\nthe IMDB sentiment-analysis task.\nThe model is similar to the one you saw in the last section of chapter "}
{"text": "6. You’ll con-\nsider only the top 2,000 words in the IMDB vocabulary, to make visualizing word\nembeddings more tractable.\nListing7.7 Text-classification model to use with TensorBoard\nimport keras\nfrom keras import layers Number of words to\nfrom keras.datasets import imdb consider as features\nfrom keras.preprocessing import sequence\nCuts off texts after this number\nmax_features = 2000 of words (among max_features\nmost common words)\nmax_len = 500\n(x_train, y_train), (x_test, y_test) = imdb.load_da"}
{"text": "ta(num_words=max_features)\nx_train = sequence.pad_sequences(x_train, maxlen=max_len)\nx_test = sequence.pad_sequences(x_test, maxlen=max_len)\nmodel = keras.models.Sequential()\nmodel.add(layers.Embedding(max_features, 128,\ninput_length=max_len,\nname='embed'))\nmodel.add(layers.Conv1D(32, 7, activation='relu'))\nmodel.add(layers.MaxPooling1D(5))\nmodel.add(layers.Conv1D(32, 7, activation='relu'))\nmodel.add(layers.GlobalMaxPooling1D())\nmodel.add(layers.Dense(1))\nmodel.summary()\nmodel.compile(optimizer="}
{"text": "'rmsprop',\nloss='binary_crossentropy',\nmetrics=['acc'])\nBefore you start using TensorBoard, you need to create a directory where you’ll store\nthe log files it generates.\nListing7.8 Creating a directory for TensorBoard log files\n$ mkdir my_log_dir\nLet’s launch the training with a TensorBoard callback instance. This callback will write\nlog events to disk at the specified location.\nLicensed to <null>\n254 CHAPTER 7 Advanced deep-learning best practices\nListing7.9 Training the model with a TensorBoar"}
{"text": "d callback\ncallbacks = [\nLog files will be written\nkeras.callbacks.TensorBoard(\nat this location.\nlog_dir='my_log_dir',\nhistogram_freq=1, Records activation histograms every 1 epoch\nembeddings_freq=1,\n)\nRecords embedding\n]\ndata every 1 epoch\nhistory = model.fit(x_train, y_train,\nepochs=20,\nbatch_size=128,\nvalidation_split=0.2,\ncallbacks=callbacks)\nAt this point, you can launch the TensorBoard server from the command line,\ninstructing it to read the logs the callback is currently writing. The ten"}
{"text": "sorboard utility\nshould have been automatically installed on your machine the moment you installed\nTensorFlow (for example, via pip):\n$ tensorboard --logdir=my_log_dir\nYou can then browse to http://localhost:6006 and look at your model training (see\nfigure 7.10). In addition to live graphs of the training and validation metrics, you get\naccess to the Histograms tab, where you can find pretty visualizations of histograms of\nactivation values taken by your layers (see figure 7.11).\nFigure 7.10 Ten"}
{"text": "sorBoard: metrics monitoring\nLicensed to <null>\nInspecting and monitoring deep-learning models using Keras callbacks and TensorBoard 255\nFigure 7.11 TensorBoard: activation histograms\nThe Embeddings tab gives you a way to inspect the embedding locations and spatial\nrelationships of the 10,000 words in the input vocabulary, as learned by the initial\nEmbedding layer. Because the embedding space is 128-dimensional, TensorBoard auto-\nmatically reduces it to 2D or 3D using a dimensionality-reduction "}
{"text": "algorithm of your\nchoice: either principal component analysis (PCA) or t-distributed stochastic neighbor\nembedding (t-SNE). In figure 7.12, in the point cloud, you can clearly see two clusters:\nwords with a positive connotation and words with a negative connotation. The visual-\nization makes it immediately obvious that embeddings trained jointly with a specific\nobjective result in models that are completely specific to the underlying task—that’s\nthe reason using pretrained generic word embedding"}
{"text": "s is rarely a good idea.\nLicensed to <null>\n256 CHAPTER 7 Advanced deep-learning best practices\nFigure 7.12 TensorBoard: interactive 3D word-embedding visualization\nThe Graphs tab shows an interactive visualization of the graph of low-level TensorFlow\noperations underlying your Keras model (see figure 7.13). As you can see, there’s a lot\nmore going on than you would expect. The model you just built may look simple\nwhen defined in Keras—a small stack of basic layers—but under the hood, you need\nt"}
{"text": "o construct a fairly complex graph structure to make it work. A lot of it is related to\nthe gradient-descent process. This complexity differential between what you see and\nwhat you’re manipulating is the key motivation for using Keras as your way of building\nmodels, instead of working with raw TensorFlow to define everything from scratch.\nKeras makes your workflow dramatically simpler.\nLicensed to <null>\nInspecting and monitoring deep-learning models using Keras callbacks and TensorBoard 257\nFig"}
{"text": "ure 7.13 TensorBoard: TensorFlow graph visualization\nNote that Keras also provides another, cleaner way to plot models as graphs of layers\nrather than graphs of TensorFlow operations: the utility keras.utils.plot_model.\nUsing it requires that you’ve installed the Python pydot and pydot-ng libraries as well\nas the graphviz library. Let’s take a quick look:\nfrom keras.utils import plot_model\nplot_model(model, to_file='model.png')\nThis creates the PNG image shown in figure 7.14.\nLicensed to <null>\n"}
{"text": "258 CHAPTER 7 Advanced deep-learning best practices\nFigure 7.14 A model plot as a graph of layers,\ngenerated with plot_model\nYou also have the option of displaying shape information in the graph of layers. This\nexample visualizes model topology using plot_model and the show_shapes option\n(see figure 7.15):\nfrom keras.utils import plot_model\nplot_model(model, show_shapes=True, to_file='model.png')\nLicensed to <null>\nInspecting and monitoring deep-learning models using Keras callbacks and TensorBo"}
{"text": "ard 259\nFigure 7.15 A model plot with shape information\n7.2.3 Wrapping up\n Keras callbacks provide a simple way to monitor models during training and\nautomatically take action based on the state of the model.\n When you’re using TensorFlow, TensorBoard is a great way to visualize model\nactivity in your browser. You can use it in Keras models via the TensorBoard call-\nback.\nLicensed to <null>\n260 CHAPTER 7 Advanced deep-learning best practices\n7.3 Getting the most out of your models\nTrying out a"}
{"text": "rchitectures blindly works well enough if you just need something that\nworks okay. In this section, we’ll go beyond “works okay” to “works great and wins\nmachine-learning competitions” by offering you a quick guide to a set of must-know\ntechniques for building state-of-the-art deep-learning models.\n7.3.1 Advanced architecture patterns\nWe covered one important design pattern in detail in the previous section: residual\nconnections. There are two more design patterns you should know about: normaliz"}
{"text": "a-\ntion and depthwise separable convolution. These patterns are especially relevant\nwhen you’re building high-performing deep convnets, but they’re commonly found\nin many other types of architectures as well.\nBATCH NORMALIZATION\nNormalization is a broad category of methods that seek to make different samples seen\nby a machine-learning model more similar to each other, which helps the model learn\nand generalize well to new data. The most common form of data normalization is one\nyou’ve seen severa"}
{"text": "l times in this book already: centering the data on 0 by subtracting\nthe mean from the data, and giving the data a unit standard deviation by dividing the\ndata by its standard deviation. In effect, this makes the assumption that the data fol-\nlows a normal (or Gaussian) distribution and makes sure this distribution is centered\nand scaled to unit variance:\nnormalized_data = (data - np.mean(data, axis=...)) / np.std(data, axis=...)\nPrevious examples normalized data before feeding it into models. B"}
{"text": "ut data normaliza-\ntion should be a concern after every transformation operated by the network: even if\nthe data entering a Dense or Conv2D network has a 0 mean and unit variance, there’s\nno reason to expect a priori that this will be the case for the data coming out.\nBatch normalization is a type of layer (BatchNormalization in Keras) introduced\nin 2015 by Ioffe and Szegedy;7 it can adaptively normalize data even as the mean and\nvariance change over time during training. It works by internally "}
{"text": "maintaining an expo-\nnential moving average of the batch-wise mean and variance of the data seen during\ntraining. The main effect of batch normalization is that it helps with gradient propa-\ngation—much like residual connections—and thus allows for deeper networks. Some\nvery deep networks can only be trained if they include multiple BatchNormalization\nlayers. For instance, BatchNormalization is used liberally in many of the advanced\nconvnet architectures that come packaged with Keras, such as Re"}
{"text": "sNet50, Inception\nV3, and Xception.\n7 Sergey Ioffe and Christian Szegedy, “Batch Normalization: Accelerating Deep Network Training by Reducing\nInternal Covariate Shift,” Proceedings of the 32nd International Conference on Machine Learning (2015),\nhttps://arxiv.org/abs/1502.03167.\nLicensed to <null>\nGetting the most out of your models 261\nThe BatchNormalization layer is typically used after a convolutional or densely\nconnected layer:\nconv_model.add(layers.Conv2D(32, 3, activation='relu')) After a"}
{"text": " Conv layer\nconv_model.add(layers.BatchNormalization())\ndense_model.add(layers.Dense(32, activation='relu')) After a Dense layer\ndense_model.add(layers.BatchNormalization())\nThe BatchNormalization layer takes an axis argument, which specifies the feature\naxis that should be normalized. This argument defaults to -1, the last axis in the input\ntensor. This is the correct value when using Dense layers, Conv1D layers, RNN layers,\nand Conv2D layers with data_format set to \"channels_last\". But in the "}
{"text": "niche use case\nof Conv2D layers with data_format set to \"channels_first\", the features axis is axis 1;\nthe axis argument in BatchNormalization should accordingly be set to 1.\nBatch renormalization\nA recent improvement over regular batch normalization is batch renormalization, intro-\nduced by Ioffe in 2017.a It offers clears benefits over batch normalization, at no appar-\nent cost. At the time of writing, it’s too early to tell whether it will supplant batch\nnormalization—but I think it’s likely."}
{"text": " Even more recently, Klambauer et al. introduced\nself-normalizing neural networks,b which manage to keep data normalized after going\nthrough any Dense layer by using a specific activation function (selu) and a specific ini-\ntializer (lecun_normal). This scheme, although highly interesting, is limited to densely\nconnected networks for now, and its usefulness hasn’t yet been broadly replicated.\na Sergey Ioffe, “Batch Renormalization: Towards Reducing Minibatch Dependence in Batch-\nNormalized Model"}
{"text": "s” (2017), https://arxiv.org/abs/1702.03275.\nb Günter Klambauer et al., “Self-Normalizing Neural Networks,” Conference on Neural Informa-\ntion Processing Systems (2017), https://arxiv.org/abs/1706.02515.\nDEPTHWISE SEPARABLE CONVOLUTION\nWhat if I told you that there’s a layer you can use as a drop-in replacement for Conv2D\nthat will make your model lighter (fewer trainable weight parameters) and faster\n(fewer floating-point operations) and cause it to perform a few percentage points bet-\nter on i"}
{"text": "ts task? That is precisely what the depthwise separable convolution layer does\n(SeparableConv2D). This layer performs a spatial convolution on each channel of its\ninput, independently, before mixing output channels via a pointwise convolution (a\n1× 1 convolution), as shown in figure 7.16. This is equivalent to separating the learn-\ning of spatial features and the learning of channel-wise features, which makes a lot of\nsense if you assume that spatial locations in the input are highly correlated,"}
{"text": " but differ-\nent channels are fairly independent. It requires significantly fewer parameters and\ninvolves fewer computations, thus resulting in smaller, speedier models. And because\nit’s a more representationally efficient way to perform convolution, it tends to learn\nbetter representations using less data, resulting in better-performing models.\nLicensed to <null>\n262 CHAPTER 7 Advanced deep-learning best practices\n1 × 1 conv\n(pointwise conv)\nConcatenate\nDepthwise convolution:\nindependent spatia"}
{"text": "l\nconvs per channel\n3 × 3 conv 3 × 3 conv 3 × 3 conv 3 × 3 conv\nFigure 7.16 Depthwise separable\nSplit channels\nconvolution: a depthwise convolution\nfollowed by a pointwise convolution\nThese advantages become especially important when you’re training small models\nfrom scratch on limited data. For instance, here’s how you can build a lightweight,\ndepthwise separable convnet for an image-classification task (softmax categorical clas-\nsification) on a small dataset:\nfrom keras.models import Sequenti"}
{"text": "al, Model\nfrom keras import layers\nheight = 64\nwidth = 64\nchannels = 3\nnum_classes = 10\nmodel = Sequential()\nmodel.add(layers.SeparableConv2D(32, 3,\nactivation='relu',\ninput_shape=(height, width, channels,)))\nmodel.add(layers.SeparableConv2D(64, 3, activation='relu'))\nmodel.add(layers.MaxPooling2D(2))\nmodel.add(layers.SeparableConv2D(64, 3, activation='relu'))\nmodel.add(layers.SeparableConv2D(128, 3, activation='relu'))\nmodel.add(layers.MaxPooling2D(2))\nmodel.add(layers.SeparableConv2D(64, 3, ac"}
{"text": "tivation='relu'))\nmodel.add(layers.SeparableConv2D(128, 3, activation='relu'))\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(num_classes, activation='softmax'))\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy')\nWhen it comes to larger-scale models, depthwise separable convolutions are the basis\nof the Xception architecture, a high-performing convnet that comes packaged with\nKeras. You can read more about the the"}
{"text": "oretical grounding for depthwise separable\nLicensed to <null>\nGetting the most out of your models 263\nconvolutions and Xception in my paper “Xception: Deep Learning with Depthwise\nSeparable Convolutions.”8\n7.3.2 Hyperparameter optimization\nWhen building a deep-learning model, you have to make many seemingly arbitrary\ndecisions: How many layers should you stack? How many units or filters should go in\neach layer? Should you use relu as activation, or a different function? Should you use\nBatchNorma"}
{"text": "lization after a given layer? How much dropout should you use? And so\non. These architecture-level parameters are called hyperparameters to distinguish them\nfrom the parameters of a model, which are trained via backpropagation.\nIn practice, experienced machine-learning engineers and researchers build intu-\nition over time as to what works and what doesn’t when it comes to these choices—\nthey develop hyperparameter-tuning skills. But there are no formal rules. If you want\nto get to the very limit"}
{"text": " of what can be achieved on a given task, you can’t be content\nwith arbitrary choices made by a fallible human. Your initial decisions are almost\nalways suboptimal, even if you have good intuition. You can refine your choices by\ntweaking them by hand and retraining the model repeatedly—that’s what machine-\nlearning engineers and researchers spend most of their time doing. But it shouldn’t\nbe your job as a human to fiddle with hyperparameters all day—that is better left to a\nmachine.\nThus you nee"}
{"text": "d to explore the space of possible decisions automatically, systemati-\ncally, in a principled way. You need to search the architecture space and find the best-\nperforming ones empirically. That’s what the field of automatic hyperparameter opti-\nmization is about: it’s an entire field of research, and an important one.\nThe process of optimizing hyperparameters typically looks like this:\n1 Choose a set of hyperparameters (automatically).\n2 Build the corresponding model.\n3 Fit it to your training d"}
{"text": "ata, and measure the final performance on the valida-\ntion data.\n4 Choose the next set of hyperparameters to try (automatically).\n5 Repeat.\n6 Eventually, measure performance on your test data.\nThe key to this process is the algorithm that uses this history of validation perfor-\nmance, given various sets of hyperparameters, to choose the next set of hyperparame-\nters to evaluate. Many different techniques are possible: Bayesian optimization,\ngenetic algorithms, simple random search, and so on.\nTr"}
{"text": "aining the weights of a model is relatively easy: you compute a loss function on a\nmini-batch of data and then use the Backpropagation algorithm to move the weights\n8 See note 5 above.\nLicensed to <null>\n264 CHAPTER 7 Advanced deep-learning best practices\nin the right direction. Updating hyperparameters, on the other hand, is extremely\nchallenging. Consider the following:\n Computing the feedback signal (does this set of hyperparameters lead to a\nhigh-performing model on this task?) can be extre"}
{"text": "mely expensive: it requires\ncreating and training a new model from scratch on your dataset.\n The hyperparameter space is typically made of discrete decisions and thus isn’t\ncontinuous or differentiable. Hence, you typically can’t do gradient descent in\nhyperparameter space. Instead, you must rely on gradient-free optimization\ntechniques, which naturally are far less efficient than gradient descent.\nBecause these challenges are difficult and the field is still young, we currently only\nhave acces"}
{"text": "s to very limited tools to optimize models. Often, it turns out that random\nsearch (choosing hyperparameters to evaluate at random, repeatedly) is the best solu-\ntion, despite being the most naive one. But one tool I have found reliably better than\nrandom search is Hyperopt (https://github.com/hyperopt/hyperopt), a Python\nlibrary for hyperparameter optimization that internally uses trees of Parzen estimators\nto predict sets of hyperparameters that are likely to work well. Another library called\n"}
{"text": "Hyperas (https://github.com/maxpumperla/hyperas) integrates Hyperopt for use\nwith Keras models. Do check it out.\nNOTE One important issue to keep in mind when doing automatic hyperpa-\nrameter optimization at scale is validation-set overfitting. Because you’re\nupdating hyperparameters based on a signal that is computed using your vali-\ndation data, you’re effectively training them on the validation data, and thus\nthey will quickly overfit to the validation data. Always keep this in mind.\nOverall,"}
{"text": " hyperparameter optimization is a powerful technique that is an absolute\nrequirement to get to state-of-the-art models on any task or to win machine-learning\ncompetitions. Think about it: once upon a time, people handcrafted the features that\nwent into shallow machine-learning models. That was very much suboptimal. Now,\ndeep learning automates the task of hierarchical feature engineering—features are\nlearned using a feedback signal, not hand-tuned, and that’s the way it should be. In\nthe same wa"}
{"text": "y, you shouldn’t handcraft your model architectures; you should optimize\nthem in a principled way. At the time of writing, the field of automatic hyperparame-\nter optimization is very young and immature, as deep learning was some years ago, but\nI expect it to boom in the next few years.\n7.3.3 Model ensembling\nAnother powerful technique for obtaining the best possible results on a task is model\nensembling. Ensembling consists of pooling together the predictions of a set of differ-\nent models, to "}
{"text": "produce better predictions. If you look at machine-learning competi-\ntions, in particular on Kaggle, you’ll see that the winners use very large ensembles of\nmodels that inevitably beat any single model, no matter how good.\nLicensed to <null>\nGetting the most out of your models 265\nEnsembling relies on the assumption that different good models trained inde-\npendently are likely to be good for different reasons: each model looks at slightly differ-\nent aspects of the data to make its predictions, "}
{"text": "getting part of the “truth” but not all of\nit. You may be familiar with the ancient parable of the blind men and the elephant: a\ngroup of blind men come across an elephant for the first time and try to understand\nwhat the elephant is by touching it. Each man touches a different part of the ele-\nphant’s body—just one part, such as the trunk or a leg. Then the men describe to\neach other what an elephant is: “It’s like a snake,” “Like a pillar or a tree,” and so on.\nThe blind men are essentially ma"}
{"text": "chine-learning models trying to understand the man-\nifold of the training data, each from its own perspective, using its own assumptions\n(provided by the unique architecture of the model and the unique random weight ini-\ntialization). Each of them gets part of the truth of the data, but not the whole truth. By\npooling their perspectives together, you can get a far more accurate description of the\ndata. The elephant is a combination of parts: not any single blind man gets it quite\nright, but, int"}
{"text": "erviewed together, they can tell a fairly accurate story.\nLet’s use classification as an example. The easiest way to pool the predictions of a set\nof classifiers (to ensemble the classifiers) is to average their predictions at inference time:\nUsefourdifferentmodelstocomputeinitialpredictions.\npreds_a = model_a.predict(x_val)\npreds_b = model_b.predict(x_val) This new prediction array\npreds_c = model_c.predict(x_val) should be more accurate\npreds_d = model_d.predict(x_val) than any of the initial "}
{"text": "ones.\nfinal_preds = 0.25 * (preds_a + preds_b + preds_c + preds_d)\nThis will work only if the classifiers are more or less equally good. If one of them is sig-\nnificantly worse than the others, the final predictions may not be as good as the best\nclassifier of the group.\nA smarter way to ensemble classifiers is to do a weighted average, where the\nweights are learned on the validation data—typically, the better classifiers are given a\nhigher weight, and the worse classifiers are given a lower wei"}
{"text": "ght. To search for a good\nset of ensembling weights, you can use random search or a simple optimization algo-\nrithm such as Nelder-Mead:\npreds_a = model_a.predict(x_val)\npreds_b = model_b.predict(x_val) These weights (0.5, 0.25,\npreds_c = model_c.predict(x_val) 0.1, 0.15) are assumed to\npreds_d = model_d.predict(x_val) be learned empirically.\nfinal_preds = 0.5 * preds_a + 0.25 * preds_b + 0.1 * preds_c + 0.15 * preds_d\nThere are many possible variants: you can do an average of an exponential of "}
{"text": "the pre-\ndictions, for instance. In general, a simple weighted average with weights optimized\non the validation data provides a very strong baseline.\nThe key to making ensembling work is the diversity of the set of classifiers. Diversity\nis strength. If all the blind men only touched the elephant’s trunk, they would agree\nLicensed to <null>\n266 CHAPTER 7 Advanced deep-learning best practices\nthat elephants are like snakes, and they would forever stay ignorant of the truth of the\nelephant. Divers"}
{"text": "ity is what makes ensembling work. In machine-learning terms, if all\nof your models are biased in the same way, then your ensemble will retain this same\nbias. If your models are biased in different ways, the biases will cancel each other out,\nand the ensemble will be more robust and more accurate.\nFor this reason, you should ensemble models that are as good as possible while being\nas different as possible. This typically means using very different architectures or even\ndifferent brands of machin"}
{"text": "e-learning approaches. One thing that is largely not worth\ndoing is ensembling the same network trained several times independently, from dif-\nferent random initializations. If the only difference between your models is their ran-\ndom initialization and the order in which they were exposed to the training data, then\nyour ensemble will be low-diversity and will provide only a tiny improvement over any\nsingle model.\nOne thing I have found to work well in practice—but that doesn’t generalize to\neve"}
{"text": "ry problem domain—is the use of an ensemble of tree-based methods (such as ran-\ndom forests or gradient-boosted trees) and deep neural networks. In 2014, partner\nAndrei Kolev and I took fourth place in the Higgs Boson decay detection challenge\non Kaggle (www.kaggle.com/c/higgs-boson) using an ensemble of various tree mod-\nels and deep neural networks. Remarkably, one of the models in the ensemble origi-\nnated from a different method than the others (it was a regularized greedy forest) and\nhad a "}
{"text": "significantly worse score than the others. Unsurprisingly, it was assigned a small\nweight in the ensemble. But to our surprise, it turned out to improve the overall\nensemble by a large factor, because it was so different from every other model: it pro-\nvided information that the other models didn’t have access to. That’s precisely the\npoint of ensembling. It’s not so much about how good your best model is; it’s about\nthe diversity of your set of candidate models.\nIn recent times, one style of ba"}
{"text": "sic ensemble that has been very successful in prac-\ntice is the wide and deep category of models, blending deep learning with shallow learn-\ning. Such models consist of jointly training a deep neural network with a large linear\nmodel. The joint training of a family of diverse models is yet another option to\nachieve model ensembling.\n7.3.4 Wrapping up\n When building high-performing deep convnets, you’ll need to use residual con-\nnections, batch normalization, and depthwise separable convolutions"}
{"text": ". In the\nfuture, it’s likely that depthwise separable convolutions will completely replace\nregular convolutions, whether for 1D, 2D, or 3D applications, due to their\nhigher representational efficiency.\n Building deep networks requires making many small hyperparameter and\narchitecture choices, which together define how good your model will be.\nRather than basing these choices on intuition or random chance, it’s better to\nsystematically search hyperparameter space to find optimal choices. At this"}
{"text": "\nLicensed to <null>\nGetting the most out of your models 267\ntime, the process is expensive, and the tools to do it aren’t very good. But the\nHyperopt and Hyperas libraries may be able to help you. When doing hyperpa-\nrameter optimization, be mindful of validation-set overfitting!\n Winning machine-learning competitions or otherwise obtaining the best possi-\nble results on a task can only be done with large ensembles of models. Ensem-\nbling via a well-optimized weighted average is usually good en"}
{"text": "ough. Remember:\ndiversity is strength. It’s largely pointless to ensemble very similar models; the\nbest ensembles are sets of models that are as dissimilar as possible (while having\nas much predictive power as possible, naturally).\nLicensed to <null>\n268 CHAPTER 7 Advanced deep-learning best practices\nChapter summary\n In this chapter, you learned the following:\n– How to build models as arbitrary graphs of layers, reuse layers (layer\nweight sharing), and use models as Python functions (model tem"}
{"text": "plating).\n– You can use Keras callbacks to monitor your models during training and\ntake action based on model state.\n– TensorBoard allows you to visualize metrics, activation histograms, and\neven embedding spaces.\n– What batch normalization, depthwise separable convolution, and resid-\nual connections are.\n– Why you should use hyperparameter optimization and model ensembling.\n With these new tools, you’re better equipped to use deep learning in the\nreal world and start building highly competitiv"}
{"text": "e deep-learning models.\nLicensed to <null>\nGenerative deep learning\nThis chapter covers\n Text generation with LSTM\n Implementing DeepDream\n Performing neural style transfer\n Variational autoencoders\n Understanding generative adversarial networks\nThe potential of artificial intelligence to emulate human thought processes goes\nbeyond passive tasks such as object recognition and mostly reactive tasks such as\ndriving a car. It extends well into creative activities. When I first made the claim t"}
{"text": "hat\nin a not-so-distant future, most of the cultural content that we consume will be cre-\nated with substantial help from AIs, I was met with utter disbelief, even from long-\ntime machine-learning practitioners. That was in 2014. Fast-forward three years,\nand the disbelief has receded—at an incredible speed. In the summer of 2015, we\nwere entertained by Google’s DeepDream algorithm turning an image into a psy-\nchedelic mess of dog eyes and pareidolic artifacts; in 2016, we used the Prisma appli-"}
{"text": "\ncation to turn photos into paintings of various styles. In the summer of 2016, an\nexperimental short movie, Sunspring, was directed using a script written by a Long\nShort-Term Memory (LSTM) algorithm—complete with dialogue. Maybe you’ve\nrecently listened to music that was tentatively generated by a neural network.\n269\nLicensed to <null>\n270 CHAPTER 8 Generative deep learning\nGranted, the artistic productions we’ve seen from AI so far have been fairly low\nquality. AI isn’t anywhere close to riva"}
{"text": "ling human screenwriters, painters, and compos-\ners. But replacing humans was always beside the point: artificial intelligence isn’t\nabout replacing our own intelligence with something else, it’s about bringing into our\nlives and work more intelligence—intelligence of a different kind. In many fields, but\nespecially in creative ones, AI will be used by humans as a tool to augment their own\ncapabilities: more augmented intelligence than artificial intelligence.\nA large part of artistic creation c"}
{"text": "onsists of simple pattern recognition and technical\nskill. And that’s precisely the part of the process that many find less attractive or even\ndispensable. That’s where AI comes in. Our perceptual modalities, our language, and\nour artwork all have statistical structure. Learning this structure is what deep-learning\nalgorithms excel at. Machine-learning models can learn the statistical latent space of\nimages, music, and stories, and they can then sample from this space, creating new art-\nworks wi"}
{"text": "th characteristics similar to those the model has seen in its training data. Nat-\nurally, such sampling is hardly an act of artistic creation in itself. It’s a mere\nmathematical operation: the algorithm has no grounding in human life, human emo-\ntions, or our experience of the world; instead, it learns from an experience that has lit-\ntle in common with ours. It’s only our interpretation, as human spectators, that will\ngive meaning to what the model generates. But in the hands of a skilled artis"}
{"text": "t, algo-\nrithmic generation can be steered to become meaningful—and beautiful. Latent\nspace sampling can become a brush that empowers the artist, augments our creative\naffordances, and expands the space of what we can imagine. What’s more, it can make\nartistic creation more accessible by eliminating the need for technical skill and prac-\ntice—setting up a new medium of pure expression, factoring art apart from craft.\nIannis Xenakis, a visionary pioneer of electronic and algorithmic music, beauti"}
{"text": "-\nfully expressed this same idea in the 1960s, in the context of the application of auto-\nmation technology to music composition:1\nFreed from tedious calculations, the composer is able to devote himself to the general\nproblems that the new musical form poses and to explore the nooks and crannies of this\nform while modifying the values of the input data. For example, he may test all\ninstrumental combinations from soloists to chamber orchestras, to large orchestras. With\nthe aid of electronic comp"}
{"text": "uters the composer becomes a sort of pilot: he presses the buttons,\nintroduces coordinates, and supervises the controls of a cosmic vessel sailing in the space\nof sound, across sonic constellations and galaxies that he could formerly glimpse only as\na distant dream.\nIn this chapter, we’ll explore from various angles the potential of deep learning to\naugment artistic creation. We’ll review sequence data generation (which can be used\nto generate text or music), DeepDream, and image generation usin"}
{"text": "g both variational\nautoencoders and generative adversarial networks. We’ll get your computer to dream\nup content never seen before; and maybe we’ll get you to dream, too, about the fan-\ntastic possibilities that lie at the intersection of technology and art. Let’s get started.\n1 Iannis Xenakis, “Musiques formelles: nouveaux principes formels de composition musicale,” special issue of La\nRevue musicale, nos. 253 -254 (1963).\nLicensed to <null>\nText generation with LSTM 271\n8.1 Text generation wit"}
{"text": "h LSTM\nIn this section, we’ll explore how recurrent neural networks can be used to generate\nsequence data. We’ll use text generation as an example, but the exact same tech-\nniques can be generalized to any kind of sequence data: you could apply it to\nsequences of musical notes in order to generate new music, to timeseries of brush-\nstroke data (for example, recorded while an artist paints on an iPad) to generate\npaintings stroke by stroke, and so on.\nSequence data generation is in no way limited"}
{"text": " to artistic content generation. It\nhas been successfully applied to speech synthesis and to dialogue generation for chat-\nbots. The Smart Reply feature that Google released in 2016, capable of automatically\ngenerating a selection of quick replies to emails or text messages, is powered by simi-\nlar techniques.\n8.1.1 A brief history of generative recurrent networks\nIn late 2014, few people had ever seen the initials LSTM, even in the machine-learning\ncommunity. Successful applications of sequence"}
{"text": " data generation with recurrent net-\nworks only began to appear in the mainstream in 2016. But these techniques have a\nfairly long history, starting with the development of the LSTM algorithm in 1997.2 This\nnew algorithm was used early on to generate text character by character.\nIn 2002, Douglas Eck, then at Schmidhuber’s lab in Switzerland, applied LSTM to\nmusic generation for the first time, with promising results. Eck is now a researcher at\nGoogle Brain, and in 2016 he started a new research "}
{"text": "group there, called Magenta,\nfocused on applying modern deep-learning techniques to produce engaging music.\nSometimes, good ideas take 15 years to get started.\nIn the late 2000s and early 2010s, Alex Graves did important pioneering work on\nusing recurrent networks for sequence data generation. In particular, his 2013 work\non applying recurrent mixture density networks to generate human-like handwriting\nusing timeseries of pen positions is seen by some as a turning point.3 This specific\napplicati"}
{"text": "on of neural networks at that specific moment in time captured for me the\nnotion of machines that dream and was a significant inspiration around the time I\nstarted developing Keras. Graves left a similar commented-out remark hidden in a\n2013 LaTeX file uploaded to the preprint server arXiv: “generating sequential data is\nthe closest computers get to dreaming.” Several years later, we take a lot of these devel-\nopments for granted; but at the time, it was difficult to watch Graves’s demonstration"}
{"text": "s\nand not walk away awe-inspired by the possibilities.\nSince then, recurrent neural networks have been successfully used for music gener-\nation, dialogue generation, image generation, speech synthesis, and molecule design.\nThey were even used to produce a movie script that was then cast with live actors.\n2 Sepp Hochreiter and Jürgen Schmidhuber, “Long Short-Term Memory,” Neural Computation 9, no. 8 (1997).\n3 Alex Graves, “Generating Sequences With Recurrent Neural Networks,” arXiv (2013), https:"}
{"text": "//arxiv.org/\nabs/1308.0850.\nLicensed to <null>\n272 CHAPTER 8 Generative deep learning\n8.1.2 How do you generate sequence data?\nThe universal way to generate sequence data in deep learning is to train a network (usu-\nally an RNN or a convnet) to predict the next token or next few tokens in a sequence,\nusing the previous tokens as input. For instance, given the input “the cat is on the ma,”\nthe network is trained to predict the target t, the next character. As usual when working\nwith text data, to"}
{"text": "kens are typically words or characters, and any network that can model\nthe probability of the next token given the previous ones is called a language model. A\nlanguage model captures the latent space of language: its statistical structure.\nOnce you have such a trained language model, you can sample from it (generate\nnew sequences): you feed it an initial string of text (called conditioning data), ask it to\ngenerate the next character or the next word (you can even generate several tokens at\nonce"}
{"text": "), add the generated output back to the input data, and repeat the process many\ntimes (see figure 8.1). This loop allows you to generate sequences of arbitrary length\nthat reflect the structure of the data on which the model was trained: sequences that\nlook almost like human-written sentences. In the example we present in this section,\nyou’ll take a LSTM layer, feed it strings of N characters extracted from a text corpus,\nand train it to predict character N + 1. The output of the model will be a"}
{"text": " softmax over\nall possible characters: a probability distribution for the next character. This LSTM is\ncalled a character-level neural language model.\nProbability\ndistribution for the Sampled next\nInitial text Initial text next character character\nThe cat sat on the m Language Sampling a\nmodel strategy\nThe cat sat on the ma Language Sampling t\nmodel strategy\n...\nFigure 8.1 The process of character-by-character text generation using a language model\n8.1.3 The importance of the sampling strategy\nW"}
{"text": "hen generating text, the way you choose the next character is crucially important. A\nnaive approach is greedy sampling, consisting of always choosing the most likely next\ncharacter. But such an approach results in repetitive, predictable strings that don’t\nlook like coherent language. A more interesting approach makes slightly more sur-\nprising choices: it introduces randomness in the sampling process, by sampling from\nthe probability distribution for the next character. This is called stochasti"}
{"text": "c sampling\n(recall that stochasticity is what we call randomness in this field). In such a setup, if e has\na probability 0.3 of being the next character, according to the model, you’ll choose it\nLicensed to <null>\nText generation with LSTM 273\n30% of the time. Note that greedy sampling can be also cast as sampling from a prob-\nability distribution: one where a certain character has probability 1 and all others have\nprobability 0.\nSampling probabilistically from the softmax output of the model is"}
{"text": " neat: it allows\neven unlikely characters to be sampled some of the time, generating more interesting-\nlooking sentences and sometimes showing creativity by coming up with new, realistic-\nsounding words that didn’t occur in the training data. But there’s one issue with this\nstrategy: it doesn’t offer a way to control the amount of randomness in the sampling process.\nWhy would you want more or less randomness? Consider an extreme case: pure\nrandom sampling, where you draw the next character from "}
{"text": "a uniform probability dis-\ntribution, and every character is equally likely. This scheme has maximum random-\nness; in other words, this probability distribution has maximum entropy. Naturally, it\nwon’t produce anything interesting. At the other extreme, greedy sampling doesn’t\nproduce anything interesting, either, and has no randomness: the corresponding\nprobability distribution has minimum entropy. Sampling from the “real” probability\ndistribution—the distribution that is output by the model’s "}
{"text": "softmax function—consti-\ntutes an intermediate point between these two extremes. But there are many other\nintermediate points of higher or lower entropy that you may want to explore. Less\nentropy will give the generated sequences a more predictable structure (and thus they\nwill potentially be more realistic looking), whereas more entropy will result in more\nsurprising and creative sequences. When sampling from generative models, it’s always\ngood to explore different amounts of randomness in the "}
{"text": "generation process. Because\nwe—humans—are the ultimate judges of how interesting the generated data is, inter-\nestingness is highly subjective, and there’s no telling in advance where the point of\noptimal entropy lies.\nIn order to control the amount of stochasticity in the sampling process, we’ll intro-\nduce a parameter called the softmax temperature that characterizes the entropy of the\nprobability distribution used for sampling: it characterizes how surprising or predict-\nable the choice of th"}
{"text": "e next character will be. Given a temperature value, a new proba-\nbility distribution is computed from the original one (the softmax output of the\nmodel) by reweighting it in the following way.\nListing8.1 Reweighting a probability distribution to a different temperature\nimport numpy as np\ndef reweight_distribution(original_distribution, temperature=0.5):\ndistribution = np.log(original_distribution) / temperature\ndistribution = np.exp(distribution)\nreturn distribution / np.sum(distribution)\nRetur"}
{"text": "ns a reweighted version of\noriginal_distribution is a 1D Numpy array the original distribution. The sum\nof probability values that must sum to 1. of the distribution may no longer\ntemperature is a factor quantifying the be 1, so you divide it by its sum to\nentropy of the output distribution. obtain the new distribution.\nLicensed to <null>\n274 CHAPTER 8 Generative deep learning\nHigher temperatures result in sampling distributions of higher entropy that will generate more\nsurprising and unstructur"}
{"text": "ed generated data, whereas a lower temperature will result in less ran-\ndomness and much more predictable generated data (see figure 8.2).\ntemperature = 0.01 temperature = 0.2 temperature = 0.4\nDiscrete elements (characters)\ntemperature = 0.6\n8.1.4 Implementing character-level LSTM text generation\nLet’s put these ideas into practice in a Keras implementation. The first thing you need\nis a lot of text data that you can use to learn a language model. You can use any suffi-\nciently large text file "}
{"text": "or set of text files—Wikipedia, The Lord of the Rings, and so on. In\nthis example, you’ll use some of the writings of Nietzsche, the late-nineteenth century\nGerman philosopher (translated into English). The language model you’ll learn will\nthus be specifically a model of Nietzsche’s writing style and topics of choice, rather\nthan a more generic model of the English language.\nPREPARING THE DATA\nLet’s start by downloading the corpus and converting it to lowercase.\nListing8.2 Downloading and parsin"}
{"text": "g the initial text file\nimport keras\nimport numpy as np\npath = keras.utils.get_file(\n'nietzsche.txt',\norigin='https://s3.amazonaws.com/text-datasets/nietzsche.txt')\ntext = open(path).read().lower()\nprint('Corpus length:', len(text))\ntnemele\ngnilpmas\nfo\nytilibaborP\ntemperature = 0.8 temperature = 1.0\nFigure 8.2 Different reweightings of one probability distribution. Low temperature = more\ndeterministic, high temperature = more random.\nLicensed to <null>\nText generation with LSTM 275\nNext, you’ll "}
{"text": "extract partially overlapping sequences of length maxlen, one-hot encode\nthem, and pack them in a 3D Numpy array x of shape (sequences, maxlen,\nunique_characters). Simultaneously, you’ll prepare an array y containing the corre-\nsponding targets: the one-hot-encoded characters that come after each extracted\nsequence.\nListing8.3 Vectorizing sequences of characters\nYou’ll extract sequences\nof 60 characters.\nmaxlen = 60\nYou’ll sample a new sequence\nstep = 3 every three characters.\nsentences = [] Hol"}
{"text": "ds the extracted sequences\nnext_chars = []\nHolds the targets (the\nfor i in range(0, len(text) - maxlen, step): follow-up characters)\nsentences.append(text[i: i + maxlen])\nList of unique characters\nnext_chars.append(text[i + maxlen])\nin the corpus\nprint('Number of sequences:', len(sentences))\nDictionary that maps\nchars = sorted(list(set(text))) unique characters to their\nindex in the list “chars”\nprint('Unique characters:', len(chars))\nchar_indices = dict((char, chars.index(char)) for char in cha"}
{"text": "rs)\nprint('Vectorization...')\nx = np.zeros((len(sentences), maxlen, len(chars)), dtype=np.bool)\ny = np.zeros((len(sentences), len(chars)), dtype=np.bool)\nfor i, sentence in enumerate(sentences): One-hot encodes\nthe characters\nfor t, char in enumerate(sentence):\ninto binary arrays\nx[i, t, char_indices[char]] = 1\ny[i, char_indices[next_chars[i]]] = 1\nBUILDING THE NETWORK\nThis network is a single LSTM layer followed by a Dense classifier and softmax over all\npossible characters. But note that recur"}
{"text": "rent neural networks aren’t the only way to do\nsequence data generation; 1D convnets also have proven extremely successful at this\ntask in recent times.\nListing8.4 Single-layer LSTM model for next-character prediction\nfrom keras import layers\nmodel = keras.models.Sequential()\nmodel.add(layers.LSTM(128, input_shape=(maxlen, len(chars))))\nmodel.add(layers.Dense(len(chars), activation='softmax'))\nLicensed to <null>\n276 CHAPTER 8 Generative deep learning\nBecause your targets are one-hot encoded, you"}
{"text": "’ll use categorical_crossentropy as\nthe loss to train the model.\nListing8.5 Model compilation configuration\noptimizer = keras.optimizers.RMSprop(lr=0.01)\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizer)\nTRAINING THE LANGUAGE MODEL AND SAMPLING FROM IT\nGiven a trained model and a seed text snippet, you can generate new text by doing the\nfollowing repeatedly:\n1 Draw from the model a probability distribution for the next character, given the\ngenerated text available so far.\n2 Rew"}
{"text": "eight the distribution to a certain temperature.\n3 Sample the next character at random according to the reweighted distribution.\n4 Add the new character at the end of the available text.\nThis is the code you use to reweight the original probability distribution coming out\nof the model and draw a character index from it (the sampling function).\nListing8.6 Function to sample the next character given the model’s predictions\ndef sample(preds, temperature=1.0):\npreds = np.asarray(preds).astype('float"}
{"text": "64')\npreds = np.log(preds) / temperature\nexp_preds = np.exp(preds)\npreds = exp_preds / np.sum(exp_preds)\nprobas = np.random.multinomial(1, preds, 1)\nreturn np.argmax(probas)\nFinally, the following loop repeatedly trains and generates text. You begin generating\ntext using a range of different temperatures after every epoch. This allows you to see\nhow the generated text evolves as the model begins to converge, as well as the impact\nof temperature in the sampling strategy.\nListing8.7 Text-generatio"}
{"text": "n loop\nimport random\nimport sys Trains the model for 60 epochs\nfor epoch in range(1, 60): Fits the model for one iteration\nprint('epoch', epoch) on the data\nmodel.fit(x, y, batch_size=128, epochs=1)\nstart_index = random.randint(0, len(text) - maxlen - 1) Selects a text\ngenerated_text = text[start_index: start_index + maxlen] seed at\nprint('--- Generating with seed: \"' + generated_text + '\"') random\nfor temperature in [0.2, 0.5, 1.0, 1.2]:\nTries a range of different\nprint('------ temperature:', t"}
{"text": "emperature)\nsampling temperatures\nsys.stdout.write(generated_text)\nLicensed to <null>\nText generation with LSTM 277\nfor i in range(400):\nGenerates 400\ncharacters, sampled = np.zeros((1, maxlen, len(chars))) One-hot encodes\nstarting from for t, char in enumerate(generated_text): the characters\nthe seed text sampled[0, t, char_indices[char]] = 1. generated so far\npreds = model.predict(sampled, verbose=0)[0] Samples\nnext_index = sample(preds, temperature) the next\nnext_char = chars[next_index] char"}
{"text": "acter\ngenerated_text += next_char\ngenerated_text = generated_text[1:]\nsys.stdout.write(next_char)\nHere, we used the random seed text “new faculty, and the jubilation reached its cli-\nmax when kant.” Here’s what you get at epoch 20, long before the model has fully\nconverged, with temperature=0.2:\nnew faculty, and the jubilation reached its climax when kant and such a man\nin the same time the spirit of the surely and the such the such\nas a man is the sunligh and subject the present to the superior"}
{"text": "ity of the\nspecial pain the most man and strange the subjection of the\nspecial conscience the special and nature and such men the subjection of the\nspecial men, the most surely the subjection of the special\nintellect of the subjection of the same things and\nHere’s the result with temperature=0.5:\nnew faculty, and the jubilation reached its climax when kant in the eterned\nand such man as it's also become himself the condition of the\nexperience of off the basis the superiory and the special morty "}
{"text": "of the\nstrength, in the langus, as which the same time life and \"even who\ndiscless the mankind, with a subject and fact all you have to be the stand\nand lave no comes a troveration of the man and surely the\nconscience the superiority, and when one must be w\nAnd here’s what you get with temperature=1.0:\nnew faculty, and the jubilation reached its climax when kant, as a\nperiliting of manner to all definites and transpects it it so\nhicable and ont him artiar resull\ntoo such as if ever the proping t"}
{"text": "o makes as cnecience. to been juden,\nall every could coldiciousnike hother aw passife, the plies like\nwhich might thiod was account, indifferent germin, that everythery\ncertain destrution, intellect into the deteriorablen origin of moralian,\nand a lessority o\nAt epoch 60, the model has mostly converged, and the text starts to look significantly\nmore coherent. Here’s the result with temperature=0.2:\ncheerfulness, friendliness and kindness of a heart are the sense of the\nspirit is a man with the s"}
{"text": "ense of the sense of the world of the\nself-end and self-concerning the subjection of the strengthorixes--the\nLicensed to <null>\n278 CHAPTER 8 Generative deep learning\nsubjection of the subjection of the subjection of the\nself-concerning the feelings in the superiority in the subjection of the\nsubjection of the spirit isn't to be a man of the sense of the\nsubjection and said to the strength of the sense of the\nHere’s temperature=0.5:\ncheerfulness, friendliness and kindness of a heart are the part"}
{"text": " of the soul\nwho have been the art of the philosophers, and which the one\nwon't say, which is it the higher the and with religion of the frences.\nthe life of the spirit among the most continuess of the\nstrengther of the sense the conscience of men of precisely before enough\npresumption, and can mankind, and something the conceptions, the\nsubjection of the sense and suffering and the\nAnd here’s temperature=1.0:\ncheerfulness, friendliness and kindness of a heart are spiritual by the\nciuture for th"}
{"text": "e\nentalled is, he astraged, or errors to our you idstood--and it needs,\nto think by spars to whole the amvives of the newoatly, prefectly\nraals! it was\nname, for example but voludd atu-especity\"--or rank onee, or even all\n\"solett increessic of the world and\nimplussional tragedy experience, transf, or insiderar,--must hast\nif desires of the strubction is be stronges\nAs you can see, a low temperature value results in extremely repetitive and predictable\ntext, but local structure is highly realisti"}
{"text": "c: in particular, all words (a word being a local\npattern of characters) are real English words. With higher temperatures, the gener-\nated text becomes more interesting, surprising, even creative; it sometimes invents\ncompletely new words that sound somewhat plausible (such as eterned and troveration).\nWith a high temperature, the local structure starts to break down, and most words\nlook like semi-random strings of characters. Without a doubt, 0.5 is the most interest-\ning temperature for text g"}
{"text": "eneration in this specific setup. Always experiment with\nmultiple sampling strategies! A clever balance between learned structure and random-\nness is what makes generation interesting.\nNote that by training a bigger model, longer, on more data, you can achieve gen-\nerated samples that look much more coherent and realistic than this one. But, of\ncourse, don’t expect to ever generate any meaningful text, other than by random\nchance: all you’re doing is sampling data from a statistical model of whi"}
{"text": "ch characters\ncome after which characters. Language is a communication channel, and there’s a\ndistinction between what communications are about and the statistical structure of\nthe messages in which communications are encoded. To evidence this distinction,\nhere’s a thought experiment: what if human language did a better job of compressing\ncommunications, much like computers do with most digital communications?\nLanguage would be no less meaningful, but it would lack any intrinsic statistical stru"}
{"text": "c-\nture, thus making it impossible to learn a language model as you just did.\nLicensed to <null>\nText generation with LSTM 279\n8.1.5 Wrapping up\n You can generate discrete sequence data by training a model to predict the next\ntokens(s), given previous tokens.\n In the case of text, such a model is called a language model. It can be based on\neither words or characters.\n Sampling the next token requires balance between adhering to what the model\njudges likely, and introducing randomness.\n One w"}
{"text": "ay to handle this is the notion of softmax temperature. Always experi-\nment with different temperatures to find the right one.\nLicensed to <null>\n280 CHAPTER 8 Generative deep learning\n8.2 DeepDream\nDeepDream is an artistic image-modification technique that uses the representations\nlearned by convolutional neural networks. It was first released by Google in the sum-\nmer of 2015, as an implementation written using the Caffe deep-learning library (this\nwas several months before the first public re"}
{"text": "lease of TensorFlow).4 It quickly became\nan internet sensation thanks to the trippy pictures it could generate (see, for example,\nfigure 8.3), full of algorithmic pareidolia artifacts, bird feathers, and dog eyes—a\nbyproduct of the fact that the DeepDream convnet was trained on ImageNet, where\ndog breeds and bird species are vastly overrepresented.\nFigure 8.3 Example of a DeepDream output image\nThe DeepDream algorithm is almost identical to the convnet filter-visualization tech-\nnique introduced"}
{"text": " in chapter 5, consisting of running a convnet in reverse: doing gra-\ndient ascent on the input to the convnet in order to maximize the activation of a\nspecific filter in an upper layer of the convnet. DeepDream uses this same idea, with a\nfew simple differences:\n With DeepDream, you try to maximize the activation of entire layers rather\nthan that of a specific filter, thus mixing together visualizations of large num-\nbers of features at once.\n4 Alexander Mordvintsev, Christopher Olah, and Mike"}
{"text": " Tyka, “DeepDream: A Code Example for Visualizing\nNeural Networks,” Google Research Blog, July 1, 2015, http://mng.bz/xXlM.\nLicensed to <null>\nDeepDream 281\n You start not from blank, slightly noisy input, but rather from an existing\nimage—thus the resulting effects latch on to preexisting visual patterns, distort-\ning elements of the image in a somewhat artistic fashion.\n The input images are processed at different scales (called octaves), which\nimproves the quality of the visualizations.\nLet"}
{"text": "’s make some DeepDreams.\n8.2.1 Implementing DeepDream in Keras\nYou’ll start from a convnet pretrained on ImageNet. In Keras, many such convnets are\navailable: VGG16, VGG19, Xception, ResNet50, and so on. You can implement Deep-\nDream with any of them, but your convnet of choice will naturally affect your visualiza-\ntions, because different convnet architectures result in different learned features. The\nconvnet used in the original DeepDream release was an Inception model, and in prac-\ntice Incep"}
{"text": "tion is known to produce nice-looking DeepDreams, so you’ll use the Incep-\ntion V3 model that comes with Keras.\nListing8.8 Loading the pretrained Inception V3 model\nfrom keras.applications import inception_v3\nYou won’t be training the model, so\nfrom keras import backend as K\nthis command disables all training-\nK.set_learning_phase(0) specific operations.\nmodel = inception_v3.InceptionV3(weights='imagenet', Builds the Inception V3 network,\ninclude_top=False) without its convolutional base.\nThe mo"}
{"text": "del will be loaded with\npretrained ImageNet weights.\nNext, you’ll compute the loss: the quantity you’ll seek to maximize during the gradient-ascent\nprocess. In chapter 5, for filter visualization, you tried to maximize the value of a specific filter\nin a specific layer. Here, you’ll simultaneously maximize the activation of all filters in a number\nof layers. Specifically, you’ll maximize a weighted sum of the L2 norm of the activations of a set\nof high-level layers. The exact set of layers you c"}
{"text": "hoose (as well as their contribution to the final\nloss) has a major influence on the visuals you’ll be able to produce, so you want to make these\nparameters easily configurable. Lower layers result in geometric patterns, whereas higher layers\nresult in visuals in which you can recognize some classes from ImageNet (for example, birds or\ndogs). You’ll start from a somewhat arbitrary configuration involving four layers—but you’ll\ndefinitely want to explore many different configurations later.\nListi"}
{"text": "ng8.9 Setting up the DeepDream configuration\nlayer_contributions = {\nDictionary mapping layer names to a coefficient quantifying\n'mixed2': 0.2,\nhow much the layer’s activation contributes to the loss\n'mixed3': 3.,\nyou’ll seek to maximize. Note that the layer names are\n'mixed4': 2.,\nhardcoded in the built-in Inception V3 application. You can\n'mixed5': 1.5, list all layer names using model.summary().\n}\nLicensed to <null>\n282 CHAPTER 8 Generative deep learning\nNow, let’s define a tensor that contai"}
{"text": "ns the loss: the weighted sum of the L2 norm of\nthe activations of the layers in listing 8.9.\nListing8.10 Defining the loss to be maximized\nCreates a dictionary that maps\nlayer names to layer instances\nlayer_dict = dict([(layer.name, layer) for layer in model.layers])\nloss = K.variable(0.)\nYou’ll define the loss by adding\nfor layer_name in layer_contributions:\nlayer contributions to this\ncoeff = layer_contributions[layer_name] scalar variable.\nactivation = layer_dict[layer_name].output\nscaling ="}
{"text": " K.prod(K.cast(K.shape(activation), 'float32'))\nloss += coeff * K.sum(K.square(activation[:, 2: -2, 2: -2, :])) / scaling\nAdds the L2 norm of the features of a layer\nRetrieves the layer’s output to the loss. You avoid border artifacts by\nonly involving nonborder pixels in the loss.\nNext, you can set up the gradient-ascent process.\nListing8.11 Gradient-ascent process\nThis tensor holds the\ngenerated image: the dream. Computes the gradients of the\ndream with regard to the loss\ndream = model.input\ng"}
{"text": "rads = K.gradients(loss, dream)[0] Normalizes the gradients\n(important trick)\ngrads /= K.maximum(K.mean(K.abs(grads)), 1e-7)\noutputs = [loss, grads]\nfetch_loss_and_grads = K.function([dream], outputs) Sets up a Keras function\nto retrieve the value of\ndef eval_loss_and_grads(x): the loss and gradients,\nouts = fetch_loss_and_grads([x]) given an input image\nloss_value = outs[0]\ngrad_values = outs[1]\nreturn loss_value, grad_values\ndef gradient_ascent(x, iterations, step, max_loss=None):\nfor i in ran"}
{"text": "ge(iterations):\nloss_value, grad_values = eval_loss_and_grads(x) This function runs\nif max_loss is not None and loss_value > max_loss: gradient ascent for a\nbreak number of iterations.\nprint('...Loss value at', i, ':', loss_value)\nx += step * grad_values\nreturn x\nFinally: the actual DeepDream algorithm. First, you define a list of scales (also called\noctaves) at which to process the images. Each successive scale is larger than the previ-\nous one by a factor of 1.4 (it’s 40% larger): you start by"}
{"text": " processing a small image and\nthen increasingly scale it up (see figure 8.4).\nLicensed to <null>\nDeepDream 283\nDetail\nDetail reinjection\nreinjection\nDream Upscale Dream Upscale Dream\nOctave 1\nOctave 2\nOctave 3\nFigure 8.4 The DeepDream process: successive scales of spatial processing (octaves) and detail reinjection\nupon upscaling\nFor each successive scale, from the smallest to the largest, you run gradient ascent to\nmaximize the loss you previously defined, at that scale. After each gradient asc"}
{"text": "ent run,\nyou upscale the resulting image by 40%.\nTo avoid losing a lot of image detail after each successive scale-up (resulting in\nincreasingly blurry or pixelated images), you can use a simple trick: after each scale-\nup, you’ll reinject the lost details back into the image, which is possible because you\nknow what the original image should look like at the larger scale. Given a small image\nsize S and a larger image size L, you can compute the difference between the original\nimage resized to si"}
{"text": "ze L and the original resized to size S—this difference quantifies the\ndetails lost when going from S to L.\nListing8.12 Running gradient ascent over different successive scales\nPlaying with these hyperparameters Gradient ascent step size\nwill let you achieve new effects.\nNumber of scales at which to run\ngradient ascent\nimport numpy as np\nSize ratio between scales\nstep = 0.01\nnum_octave = 3 Number of ascent steps to\noctave_scale = 1.4 run at each scale\niterations = 20\nIf the loss grows larger tha"}
{"text": "n 10, you’ll interrupt\nthe gradient-ascent process to avoid ugly artifacts.\nmax_loss = 10.\nbase_image_path = '...' Fill this with the path to the image you want to use.\nimg = preprocess_image(base_image_path)\nLoads the base image into a Numpy\narray (function is defined in listing 8.13)\nLicensed to <null>\n284 CHAPTER 8 Generative deep learning\noriginal_shape = img.shape[1:3]\nsuccessive_shapes = [original_shape]\nPrepares a list of shape\nfor i in range(1, num_octave):\ntuples defining the different\n"}
{"text": "shape = tuple([int(dim / (octave_scale ** i))\nscales at which to run\nfor dim in original_shape]) gradient ascent\nsuccessive_shapes.append(shape)\nReverses the list of\nsuccessive_shapes = successive_shapes[::-1] shapes so they’re in\nincreasing order\noriginal_img = np.copy(img)\nshrunk_original_img = resize_img(img, successive_shapes[0])\nScales up\nthe for shape in successive_shapes: Resizes the Numpy\ndream print('Processing image shape', shape) array of the image\nimage img = resize_img(img, shape) t"}
{"text": "o the smallest scale\nimg = gradient_ascent(img,\nScales up the smaller\nRuns gradient iterations=iterations,\nversion of the original\nascent, altering step=step,\nimage: it will be pixellated.\nthe dream max_loss=max_loss)\nupscaled_shrunk_original_img = resize_img(shrunk_original_img, shape)\nsame_size_original = resize_img(original_img, shape)\nlost_detail = same_size_original - upscaled_shrunk_original_img\nimg += lost_detail\nshrunk_original_img = resize_img(original_img, shape)\nsave_img(img, fname='d"}
{"text": "ream_at_scale_' + str(shape) + '.png')\nsave_img(img, fname='final_dream.png')\nReinjects lost detail into the dream\nComputes the high-quality version\nof the original image at this size\nThe difference between the two is the\ndetail that was lost when scaling up.\nNote that this code uses the following straightforward auxiliary Numpy functions,\nwhich all do as their names suggest. They require that you have SciPy installed.\nListing8.13 Auxiliary functions\nimport scipy\nfrom keras.preprocessing import "}
{"text": "image\ndef resize_img(img, size):\nimg = np.copy(img)\nfactors = (1,\nfloat(size[0]) / img.shape[1],\nfloat(size[1]) / img.shape[2],\n1)\nreturn scipy.ndimage.zoom(img, factors, order=1)\ndef save_img(img, fname):\npil_img = deprocess_image(np.copy(img))\nUtil function to open, resize, and\nscipy.misc.imsave(fname, pil_img)\nformat pictures into tensors\ndef preprocess_image(image_path): that Inception V3 can process\nimg = image.load_img(image_path)\nimg = image.img_to_array(img)\nLicensed to <null>\nDeepDream "}
{"text": "285\nimg = np.expand_dims(img, axis=0)\nimg = inception_v3.preprocess_input(img)\nreturn img\ndef deprocess_image(x):\nUtil function to convert a\nif K.image_data_format() == 'channels_first':\ntensor into a valid image\nx = x.reshape((3, x.shape[2], x.shape[3]))\nx = x.transpose((1, 2, 0))\nelse:\nx = x.reshape((x.shape[1], x.shape[2], 3))\nUndoes preprocessing that\nx /= 2.\nwas performed by\nx += 0.5 inception_v3.preprocess_\nx *= 255. input\nx = np.clip(x, 0, 255).astype('uint8')\nreturn x\nNOTE Because the or"}
{"text": "iginal Inception V3 network was trained to recognize\nconcepts in images of size 299 × 299, and given that the process involves scal-\ning the images down by a reasonable factor, the DeepDream implementation\nproduces much better results on images that are somewhere between 300 ×\n300 and 400 × 400. Regardless, you can run the same code on images of any\nsize and any ratio.\nStarting from a photograph taken in the small hills between San Francisco Bay and\nthe Google campus, we obtained the DeepDream s"}
{"text": "hown in figure 8.5.\nFigure 8.5 Running the DeepDream code on an example image\nWe strongly suggest that you explore what you can do by adjusting which layers you\nuse in your loss. Layers that are lower in the network contain more-local, less-abstract\nrepresentations and lead to dream patterns that look more geometric. Layers that are\nhigher up lead to more-recognizable visual patterns based on the most common\nobjects found in ImageNet, such as dog eyes, bird feathers, and so on. You can use\nLicen"}
{"text": "sed to <null>\n286 CHAPTER 8 Generative deep learning\nrandom generation of the parameters in the layer_contributions dictionary to\nquickly explore many different layer combinations. Figure 8.6 shows a range of results\nobtained using different layer configurations, from an image of a delicious home-\nmade pastry.\nFigure 8.6 Trying a range of DeepDream configurations on an example image\n8.2.2 Wrapping up\n DeepDream consists of running a convnet in reverse to generate inputs based\non the representat"}
{"text": "ions learned by the network.\n The results produced are fun and somewhat similar to the visual artifacts\ninduced in humans by the disruption of the visual cortex via psychedelics.\n Note that the process isn’t specific to image models or even to convnets. It can\nbe done for speech, music, and more.\nLicensed to <null>\nNeural style transfer 287\n8.3 Neural style transfer\nIn addition to DeepDream, another major development in deep-learning-driven\nimage modification is neural style transfer, introduc"}
{"text": "ed by Leon Gatys et al. in the sum-\nmer of 2015.5 The neural style transfer algorithm has undergone many refinements\nand spawned many variations since its original introduction, and it has made its way\ninto many smartphone photo apps. For simplicity, this section focuses on the formula-\ntion described in the original paper.\nNeural style transfer consists of applying the style of a reference image to a target\nimage while conserving the content of the target image. Figure 8.7 shows an example.\nCon"}
{"text": "tent target Style reference Combination image\nFigure 8.7 A style transfer example\nIn this context, style essentially means textures, colors, and visual patterns in the image, at\nvarious spatial scales; and the content is the higher-level macrostructure of the image.\nFor instance, blue-and-yellow circular brushstrokes are considered to be the style in fig-\nure 8.7 (using Starry Night by Vincent Van Gogh), and the buildings in the Tübingen\nphotograph are considered to be the content.\nThe idea of s"}
{"text": "tyle transfer, which is tightly related to that of texture generation, has\nhad a long history in the image-processing community prior to the development of\nneural style transfer in 2015. But as it turns out, the deep-learning-based implementa-\ntions of style transfer offer results unparalleled by what had been previously achieved\nwith classical computer-vision techniques, and they triggered an amazing renaissance\nin creative applications of computer vision.\nThe key notion behind implementing sty"}
{"text": "le transfer is the same idea that’s central\nto all deep-learning algorithms: you define a loss function to specify what you want to\nachieve, and you minimize this loss. You know what you want to achieve: conserving\nthe content of the original image while adopting the style of the reference image. If\nwe were able to mathematically define content and style, then an appropriate loss func-\ntion to minimize would be the following:\nloss = distance(style(reference_image) - style(generated_image)) +\ndis"}
{"text": "tance(content(original_image) - content(generated_image))\n5 Leon A. Gatys, Alexander S. Ecker, and Matthias Bethge, “A Neural Algorithm of Artistic Style,” arXiv (2015),\nhttps://arxiv.org/abs/1508.06576.\nLicensed to <null>\n288 CHAPTER 8 Generative deep learning\nHere, distance is a norm function such as the L2 norm, content is a function that\ntakes an image and computes a representation of its content, and style is a function\nthat takes an image and computes a representation of its style. Minimiz"}
{"text": "ing this\nlosscauses style(generated_image) to be close to style(reference_image), and\ncontent(generated_image) is close to content(generated_image), thus achieving\nstyle transfer as we defined it.\nA fundamental observation made by Gatys et al. was that deep convolutional neu-\nral networks offer a way to mathematically define the style and content functions.\nLet’s see how.\n8.3.1 The content loss\nAs you already know, activations from earlier layers in a network contain local informa-\ntion about th"}
{"text": "e image, whereas activations from higher layers contain increasingly global,\nabstract information. Formulated in a different way, the activations of the different lay-\ners of a convnet provide a decomposition of the contents of an image over different spa-\ntial scales. Therefore, you’d expect the content of an image, which is more global and\nabstract, to be captured by the representations of the upper layers in a convnet.\nA good candidate for content loss is thus the L2 norm between the activati"}
{"text": "ons of\nan upper layer in a pretrained convnet, computed over the target image, and the acti-\nvations of the same layer computed over the generated image. This guarantees that, as\nseen from the upper layer, the generated image will look similar to the original target\nimage. Assuming that what the upper layers of a convnet see is really the content of\ntheir input images, then this works as a way to preserve image content.\n8.3.2 The style loss\nThe content loss only uses a single upper layer, but th"}
{"text": "e style loss as defined by Gatys\netal. uses multiple layers of a convnet: you try to capture the appearance of the style-\nreference image at all spatial scales extracted by the convnet, not just a single scale.\nFor the style loss, Gatys et al. use the Gram matrix of a layer’s activations: the inner\nproduct of the feature maps of a given layer. This inner product can be understood as\nrepresenting a map of the correlations between the layer’s features. These feature cor-\nrelations capture the stat"}
{"text": "istics of the patterns of a particular spatial scale, which empir-\nically correspond to the appearance of the textures found at this scale.\nHence, the style loss aims to preserve similar internal correlations within the activa-\ntions of different layers, across the style-reference image and the generated image. In\nturn, this guarantees that the textures found at different spatial scales look similar\nacross the style-reference image and the generated image.\nIn short, you can use a pretrained conv"}
{"text": "net to define a loss that will do the following:\n Preserve content by maintaining similar high-level layer activations between the\ntarget content image and the generated image. The convnet should “see” both\nthe target image and the generated image as containing the same things.\nLicensed to <null>\nNeural style transfer 289\n Preserve style by maintaining similar correlations within activations for both low-\nlevel layers and high-level layers. Feature correlations capture textures: the gen-\nerate"}
{"text": "d image and the style-reference image should share the same textures at\ndifferent spatial scales.\nNow, let’s look at a Keras implementation of the original 2015 neural style transfer\nalgorithm. As you’ll see, it shares many similarities with the DeepDream implementa-\ntion developed in the previous section.\n8.3.3 Neural style transfer in Keras\nNeural style transfer can be implemented using any pretrained convnet. Here, you’ll\nuse the VGG19 network used by Gatys et al. VGG19 is a simple variant of"}
{"text": " the VGG16 net-\nwork introduced in chapter 5, with three more convolutional layers.\nThis is the general process:\n1 Set up a network that computes VGG19 layer activations for the style-reference\nimage, the target image, and the generated image at the same time.\n2 Use the layer activations computed over these three images to define the loss\nfunction described earlier, which you’ll minimize in order to achieve style\ntransfer.\n3 Set up a gradient-descent process to minimize this loss function.\nLet’s"}
{"text": " start by defining the paths to the style-reference image and the target image. To\nmake sure that the processed images are a similar size (widely different sizes make\nstyle transfer more difficult), you’ll later resize them all to a shared height of 400 px.\nListing8.14 Defining initial variables\nfrom keras.preprocessing.image import load_img, img_to_array Path to the image you\nwant to transform\ntarget_image_path = 'img/portrait.jpg'\nstyle_reference_image_path = 'img/transfer_style_reference.jpg'"}
{"text": "\nPath to the\nstyle image\nwidth, height = load_img(target_image_path).size\nDimensions of the\nimg_height = 400\ngenerated picture\nimg_width = int(width * img_height / height)\nYou need some auxiliary functions for loading, preprocessing, and postprocessing the\nimages that go in and out of the VGG19 convnet.\nListing8.15 Auxiliary functions\nimport numpy as np\nfrom keras.applications import vgg19\ndef preprocess_image(image_path):\nimg = load_img(image_path, target_size=(img_height, img_width))\nimg = img"}
{"text": "_to_array(img)\nimg = np.expand_dims(img, axis=0)\nimg = vgg19.preprocess_input(img)\nreturn img\nLicensed to <null>\n290 CHAPTER 8 Generative deep learning\ndef deprocess_image(x):\nx[:, :, 0] += 103.939 Zero-centering by removing the mean pixel value\nx[:, :, 1] += 116.779 from ImageNet. This reverses a transformation\nx[:, :, 2] += 123.68 done by vgg19.preprocess_input.\nx = x[:, :, ::-1]\nx = np.clip(x, 0, 255).astype('uint8') Converts images from 'BGR' to 'RGB'.\nreturn x This is also part of the rever"}
{"text": "sal of\nvgg19.preprocess_input.\nLet’s set up the VGG19 network. It takes as input a batch of three images: the style-\nreference image, the target image, and a placeholder that will contain the generated\nimage. A placeholder is a symbolic tensor, the values of which are provided externally\nvia Numpy arrays. The style-reference and target image are static and thus defined\nusing K.constant, whereas the values contained in the placeholder of the generated\nimage will change over time.\nListing8.16 Load"}
{"text": "ing the pretrained VGG19 network and applying it to the three images\nPlaceholder that will contain\nfrom keras import backend as K the generated image\ntarget_image = K.constant(preprocess_image(target_image_path))\nstyle_reference_image = K.constant(preprocess_image(style_reference_image_path))\ncombination_image = K.placeholder((1, img_height, img_width, 3))\ninput_tensor = K.concatenate([target_image,\nCombines the three\nstyle_reference_image,\nimages in a single batch\ncombination_image], axis=0)\nmo"}
{"text": "del = vgg19.VGG19(input_tensor=input_tensor, Builds the VGG19 network with\nweights='imagenet', the batch of three images as\ninclude_top=False) input. The model will be loaded\nprint('Model loaded.') with pretrained ImageNet weights.\nLet’s define the content loss, which will make sure the top layer of the VGG19 convnet\nhas a similar view of the target image and the generated image.\nListing8.17 Content loss\ndef content_loss(base, combination):\nreturn K.sum(K.square(combination - base))\nNext is the "}
{"text": "style loss. It uses an auxiliary function to compute the Gram matrix of an\ninput matrix: a map of the correlations found in the original feature matrix.\nListing8.18 Style loss\ndef gram_matrix(x):\nfeatures = K.batch_flatten(K.permute_dimensions(x, (2, 0, 1)))\ngram = K.dot(features, K.transpose(features))\nreturn gram\nLicensed to <null>\nNeural style transfer 291\ndef style_loss(style, combination):\nS = gram_matrix(style)\nC = gram_matrix(combination)\nchannels = 3\nsize = img_height * img_width\nreturn "}
{"text": "K.sum(K.square(S - C)) / (4. * (channels ** 2) * (size ** 2))\nTo these two loss components, you add a third: the total variation loss, which operates\non the pixels of the generated combination image. It encourages spatial continuity in\nthe generated image, thus avoiding overly pixelated results. You can interpret it as a\nregularization loss.\nListing8.19 Total variation loss\ndef total_variation_loss(x):\na = K.square(\nx[:, :img_height - 1, :img_width - 1, :] -\nx[:, 1:, :img_width - 1, :])\nb = K.sq"}
{"text": "uare(\nx[:, :img_height - 1, :img_width - 1, :] -\nx[:, :img_height - 1, 1:, :])\nreturn K.sum(K.pow(a + b, 1.25))\nThe loss that you minimize is a weighted average of these three losses. To compute the\ncontent loss, you use only one upper layer—the block5_conv2 layer—whereas for the\nstyle loss, you use a list of layers than spans both low-level and high-level layers. You\nadd the total variation loss at the end.\nDepending on the style-reference image and content image you’re using, you’ll\nlikely wan"}
{"text": "t to tune the content_weight coefficient (the contribution of the content\nloss to the total loss). A higher content_weight means the target content will be more\nrecognizable in the generated image.\nListing8.20 Defining the final loss that you’ll minimize\nDictionary that maps layer\nnames to activation tensors\noutputs_dict = dict([(layer.name, layer.output) for layer in model.layers])\ncontent_layer = 'block5_conv2'\nstyle_layers = ['block1_conv1', Layer used for content loss\n'block2_conv1',\n'block3"}
{"text": "_conv1', Layers used for style loss\n'block4_conv1',\n'block5_conv1']\ntotal_variation_weight = 1e-4\nWeights in the weighted average\nstyle_weight = 1.\nof the loss components\ncontent_weight = 0.025\nLicensed to <null>\n292 CHAPTER 8 Generative deep learning\nloss = K.variable(0.)\nYou’ll define the loss by\nAdds layer_features = outputs_dict[content_layer]\nadding all components to\nthe target_image_features = layer_features[0, :, :, :]\nthis scalar variable.\ncontent\ncombination_features = layer_features[2,"}
{"text": " :, :, :]\nloss\nloss += content_weight * content_loss(target_image_features,\ncombination_features)\nfor layer_name in style_layers:\nAdds a style loss\nlayer_features = outputs_dict[layer_name]\ncomponent for\nstyle_reference_features = layer_features[1, :, :, :]\neach target layer\ncombination_features = layer_features[2, :, :, :]\nAdds the\nsl = style_loss(style_reference_features, combination_features)\ntotal\nloss += (style_weight / len(style_layers)) * sl\nvariation\nloss loss += total_variation_weight *"}
{"text": " total_variation_loss(combination_image)\nFinally, you’ll set up the gradient-descent process. In the original Gatys et al. paper,\noptimization is performed using the L-BFGS algorithm, so that’s what you’ll use here.\nThis is a key difference from the DeepDream example in section 8.2. The L-BFGS algo-\nrithm comes packaged with SciPy, but there are two slight limitations with the SciPy\nimplementation:\n It requires that you pass the value of the loss function and the value of the gra-\ndients as two"}
{"text": " separate functions.\n It can only be applied to flat vectors, whereas you have a 3D image array.\nIt would be inefficient to compute the value of the loss function and the value of the\ngradients independently, because doing so would lead to a lot of redundant computa-\ntion between the two; the process would be almost twice as slow as computing them\njointly. To bypass this, you’ll set up a Python class named Evaluator that computes\nboth the loss value and the gradients value at once, returns the "}
{"text": "loss value when called\nthe first time, and caches the gradients for the next call.\nListing8.21 Setting up the gradient-descent process\ngrads = K.gradients(loss, combination_image)[0]\nGets the\ngradients fetch_loss_and_grads = K.function([combination_image], [loss, grads])\nof the\ngenerated Function to fetch\nclass Evaluator(object):\nimage with the values of\nregard to the current loss\ndef __init__(self):\nthe loss and the current\nself.loss_value = None gradients\nself.grads_values = None\ndef loss(self"}
{"text": ", x):\nassert self.loss_value is None\nx = x.reshape((1, img_height, img_width, 3))\nouts = fetch_loss_and_grads([x])\nThis class wraps fetch_loss_and_grads\nin a way that lets you retrieve the losses and\ngradients via two separate method calls, which is\nrequired by the SciPy optimizer you'll use.\nLicensed to <null>\nNeural style transfer 293\nloss_value = outs[0]\ngrad_values = outs[1].flatten().astype('float64')\nself.loss_value = loss_value\nself.grad_values = grad_values\nreturn self.loss_value\ndef gra"}
{"text": "ds(self, x):\nassert self.loss_value is not None\ngrad_values = np.copy(self.grad_values)\nself.loss_value = None\nself.grad_values = None\nreturn grad_values\nevaluator = Evaluator()\nFinally, you can run the gradient-ascent process using SciPy’s L-BFGS algorithm, saving\nthe current generated image at each iteration of the algorithm (here, a single itera-\ntion represents 20 steps of gradient ascent).\nListing8.22 Style-transfer loop\nfrom scipy.optimize import fmin_l_bfgs_b\nThis is the initial state:\nfr"}
{"text": "om scipy.misc import imsave\nthe target image.\nimport time\nYou flatten the image because\nresult_prefix = 'my_result' scipy.optimize.fmin_l_bfgs_b\niterations = 20 can only process flat vectors.\nx = preprocess_image(target_image_path)\nx = x.flatten() Runs L-BFGS optimization\nfor i in range(iterations): over the pixels of the\nprint('Start of iteration', i) generated image to\nstart_time = time.time() minimize the neural style\nx, min_val, info = fmin_l_bfgs_b(evaluator.loss, loss. Note that you have\nt"}
{"text": "o pass the function that\nx,\ncomputes the loss and the\nfprime=evaluator.grads,\nfunction that computes\nmaxfun=20)\nthe gradients as two\nprint('Current loss value:', min_val)\nseparate arguments.\nimg = x.copy().reshape((img_height, img_width, 3))\nimg = deprocess_image(img)\nfname = result_prefix + '_at_iteration_%d.png' % i Saves the current\nimsave(fname, img) generated image.\nprint('Image saved as', fname)\nend_time = time.time()\nprint('Iteration %d completed in %ds' % (i, end_time - start_time))\nFigu"}
{"text": "re 8.8 shows what you get. Keep in mind that what this technique achieves is\nmerely a form of image retexturing, or texture transfer. It works best with style-\nreference images that are strongly textured and highly self-similar, and with content\ntargets that don’t require high levels of detail in order to be recognizable. It typically\ncan’t achieve fairly abstract feats such as transferring the style of one portrait to\nanother. The algorithm is closer to classical signal processing than to AI, s"}
{"text": "o don’t\nexpect it to work like magic!\nLicensed to <null>\n294 CHAPTER 8 Generative deep learning\nFigure 8.8 Some example results\nLicensed to <null>\nNeural style transfer 295\nAdditionally, note that running this style-transfer algorithm is slow. But the transfor-\nmation operated by the setup is simple enough that it can be learned by a small, fast\nfeedforward convnet as well—as long as you have appropriate training data available.\nFast style transfer can thus be achieved by first spending a lot of"}
{"text": " compute cycles to\ngenerate input-output training examples for a fixed style-reference image, using the\nmethod outlined here, and then training a simple convnet to learn this style-specific\ntransformation. Once that’s done, stylizing a given image is instantaneous: it’s just a\nforward pass of this small convnet.\n8.3.4 Wrapping up\n Style transfer consists of creating a new image that preserves the contents of a\ntarget image while also capturing the style of a reference image.\n Content can be ca"}
{"text": "ptured by the high-level activations of a convnet.\n Style can be captured by the internal correlations of the activations of different\nlayers of a convnet.\n Hence, deep learning allows style transfer to be formulated as an optimization\nprocess using a loss defined with a pretrained convnet.\n Starting from this basic idea, many variants and refinements are possible.\nLicensed to <null>\n296 CHAPTER 8 Generative deep learning\n8.4 Generating images with variational autoencoders\nSampling from a lat"}
{"text": "ent space of images to create entirely new images or edit existing\nones is currently the most popular and successful application of creative AI. In this sec-\ntion and the next, we’ll review some high-level concepts pertaining to image genera-\ntion, alongside implementations details relative to the two main techniques in this\ndomain: variational autoencoders (VAEs) and generative adversarial networks (GANs). The\ntechniques we present here aren’t specific to images—you could develop latent spaces\n"}
{"text": "of sound, music, or even text, using GANs and VAEs—but in practice, the most inter-\nesting results have been obtained with pictures, and that’s what we focus on here.\n8.4.1 Sampling from latent spaces of images\nThe key idea of image generation is to develop a low-dimensional latent space of repre-\nsentations (which naturally is a vector space) where any point can be mapped to a\nrealistic-looking image. The module capable of realizing this mapping, taking as input\na latent point and outputting an"}
{"text": " image (a grid of pixels), is called a generator (in the\ncase of GANs) or a decoder (in the case of VAEs). Once such a latent space has been\ndeveloped, you can sample points from it, either deliberately or at random, and, by\nmapping them to image space, generate images that have never been seen before (see\nfigure 8.9).\nTraining data\nLearning\n?\nprocess\nGenerator / Decoder\nVector from the Artificial\nLatent space latent space image\nof images\n(a vector space)\nFigure 8.9 Learning a latent vector spac"}
{"text": "e of images, and using it to sample new images\nGANs and VAEs are two different strategies for learning such latent spaces of image\nrepresentations, each with its own characteristics. VAEs are great for learning latent\nspaces that are well structured, where specific directions encode a meaningful axis of\nvariation in the data. GANs generate images that can potentially be highly realistic, but\nthe latent space they come from may not have as much structure and continuity.\nLicensed to <null>\nGenerat"}
{"text": "ing images with variational autoencoders 297\nFigure 8.10 A continuous space of faces generated by Tom White using VAEs\n8.4.2 Concept vectors for image editing\nWe already hinted at the idea of a concept vector when we covered word embeddings in\nchapter 6. The idea is still the same: given a latent space of representations, or an\nembedding space, certain directions in the space may encode interesting axes of vari-\nation in the original data. In a latent space of images of faces, for instance, ther"}
{"text": "e may\nbe a smile vectors, such that if latent point z is the embedded representation of a cer-\ntain face, then latent point z + s is the embedded representation of the same face,\nsmiling. Once you’ve identified such a vector, it then becomes possible to edit images\nby projecting them into the latent space, moving their representation in a meaningful\nway, and then decoding them back to image space. There are concept vectors for\nessentially any independent dimension of variation in image space—in "}
{"text": "the case of\nfaces, you may discover vectors for adding sunglasses to a face, removing glasses, turn-\ning a male face into as female face, and so on. Figure 8.11 is an example of a smile vec-\ntor, a concept vector discovered by Tom White from the Victoria University School of\nDesign in New Zealand, using VAEs trained on a dataset of faces of celebrities (the\nCelebA dataset).\nLicensed to <null>\n298 CHAPTER 8 Generative deep learning\nFigure 8.11 The smile vector\n8.4.3 Variational autoencoders\nVaria"}
{"text": "tional autoencoders, simultaneously discovered by Kingma and Welling in\nDecember 20136 and Rezende, Mohamed, and Wierstra in January 2014,7 are a kind\nof generative model that’s especially appropriate for the task of image editing via con-\ncept vectors. They’re a modern take on autoencoders—a type of network that aims to\nencode an input to a low-dimensional latent space and then decode it back—that\nmixes ideas from deep learning with Bayesian inference.\nA classical image autoencoder takes an ima"}
{"text": "ge, maps it to a latent vector space via\nan encoder module, and then decodes it back to an output with the same dimensions\nas the original image, via a decoder module (see figure 8.12). It’s then trained by\nusing as target data the same images as the input images, meaning the autoencoder\nlearns to reconstruct the original inputs. By imposing various constraints on the code\n(the output of the encoder), you can get the autoencoder to learn more-or-less inter-\nesting latent representations of the d"}
{"text": "ata. Most commonly, you’ll constrain the code to\nbe low-dimensional and sparse (mostly zeros), in which case the encoder acts as a way\nto compress the input data into fewer bits of information.\n6 Diederik P. Kingma and Max Welling, “Auto-Encoding Variational Bayes, arXiv (2013), https://arxiv.org/\nabs/1312.6114.\n7 Danilo Jimenez Rezende, Shakir Mohamed, and Daan Wierstra, “Stochastic Backpropagation and Approxi-\nmate Inference in Deep Generative Models,” arXiv (2014), https://arxiv.org/abs/1401."}
{"text": "4082.\nLicensed to <null>\nGenerating images with variational autoencoders 299\nEncoder Decoder\nOriginal Compressed Reconstructed\ninput x representation input x\nFigure 8.12 An autoencoder: mapping an input x to a compressed representation\nand then decoding it back as x'\nIn practice, such classical autoencoders don’t lead to particularly useful or nicely\nstructured latent spaces. They’re not much good at compression, either. For these rea-\nsons, they have largely fallen out of fashion. VAEs, however"}
{"text": ", augment autoencoders\nwith a little bit of statistical magic that forces them to learn continuous, highly struc-\ntured latent spaces. They have turned out to be a powerful tool for image generation.\nA VAE, instead of compressing its input image into a fixed code in the latent space,\nturns the image into the parameters of a statistical distribution: a mean and a vari-\nance. Essentially, this means you’re assuming the input image has been generated by a\nstatistical process, and that the randomnes"}
{"text": "s of this process should be taken into\naccounting during encoding and decoding. The VAE then uses the mean and variance\nparameters to randomly sample one element of the distribution, and decodes that ele-\nment back to the original input (see figure 8.13). The stochasticity of this process\nimproves robustness and forces the latent space to encode meaningful representa-\ntions everywhere: every point sampled in the latent space is decoded to a valid output.\nDistribution over latent\nspace defined by"}
{"text": " z_mean\nInput image and z_log_var\nEncoder\nReconstructed\nimage\nDecoder\nPoint randomly\nsampled from\nthe distribution\nFigure 8.13 A VAE maps an image to two vectors, z_mean and z_log_sigma, which define\na probability distribution over the latent space, used to sample a latent point to decode.\nLicensed to <null>\n300 CHAPTER 8 Generative deep learning\nIn technical terms, here’s how a VAE works:\n1 An encoder module turns the input samples input_img into two parameters in\na latent space of representati"}
{"text": "ons, z_mean and z_log_variance.\n2 You randomly sample a point z from the latent normal distribution that’s\nassumed to generate the input image, via z = z_mean + exp(z_log_variance) *\nepsilon, where epsilon is a random tensor of small values.\n3 A decoder module maps this point in the latent space back to the original input\nimage.\nBecause epsilon is random, the process ensures that every point that’s close to the latent loca-\ntion where you encoded input_img (z-mean) can be decoded to something si"}
{"text": "milar to\ninput_img, thus forcing the latent space to be continuously meaningful. Any two close points\nin the latent space will decode to highly similar images. Continuity, combined with the low\ndimensionality of the latent space, forces every direction in the latent space to encode a mean-\ningful axis of variation of the data, making the latent space very structured and thus highly suit-\nable to manipulation via concept vectors.\nThe parameters of a VAE are trained via two loss functions: a recon"}
{"text": "struction loss that\nforces the decoded samples to match the initial inputs, and a regularization loss that\nhelps learn well-formed latent spaces and reduce overfitting to the training data. Let’s\nquickly go over a Keras implementation of a VAE. Schematically, it looks like this:\nz_mean, z_log_variance = encoder(input_img)\nEncodes the input into a\nz = z_mean + exp(z_log_variance) * epsilon mean and variance parameter\nreconstructed_img = decoder(z) Draws a latent point using\nDecodes a small random"}
{"text": " epsilon\nz back to\nmodel = Model(input_img, reconstructed_img)\nan image Instantiates the autoencoder\nmodel, which maps an input image\nto its reconstruction\nYou can then train the model using the reconstruction loss and the regularization loss.\nThe following listing shows the encoder network you’ll use, mapping images to the\nparameters of a probability distribution over the latent space. It’s a simple convnet\nthat maps the input image x to two vectors, z_mean and z_log_var.\nListing8.23 VAE encode"}
{"text": "r network\nimport keras\nfrom keras import layers\nfrom keras import backend as K\nfrom keras.models import Model\nimport numpy as np\nimg_shape = (28, 28, 1)\nbatch_size = 16 Dimensionality of the\nlatent space: a 2D plane\nlatent_dim = 2\ninput_img = keras.Input(shape=img_shape)\nLicensed to <null>\nGenerating images with variational autoencoders 301\nx = layers.Conv2D(32, 3,\npadding='same', activation='relu')(input_img)\nx = layers.Conv2D(64, 3,\npadding='same', activation='relu',\nstrides=(2, 2))(x)\nx = lay"}
{"text": "ers.Conv2D(64, 3,\npadding='same', activation='relu')(x)\nx = layers.Conv2D(64, 3,\npadding='same', activation='relu')(x)\nshape_before_flattening = K.int_shape(x)\nx = layers.Flatten()(x)\nx = layers.Dense(32, activation='relu')(x)\nThe input image ends up\nz_mean = layers.Dense(latent_dim)(x)\nbeing encoded into these\nz_log_var = layers.Dense(latent_dim)(x)\ntwo parameters.\nNext is the code for using z_mean and z_log_var, the parameters of the statistical dis-\ntribution assumed to have produced input_im"}
{"text": "g, to generate a latent space point z.\nHere, you wrap some arbitrary code (built on top of Keras backend primitives) into a\nLambda layer. In Keras, everything needs to be a layer, so code that isn’t part of a built-\nin layer should be wrapped in a Lambda (or in a custom layer).\nListing8.24 Latent-space-sampling function\ndef sampling(args):\nz_mean, z_log_var = args\nepsilon = K.random_normal(shape=(K.shape(z_mean)[0], latent_dim),\nmean=0., stddev=1.)\nreturn z_mean + K.exp(z_log_var) * epsilon\nz = "}
{"text": "layers.Lambda(sampling)([z_mean, z_log_var])\nThe following listing shows the decoder implementation. You reshape the vector z to\nthe dimensions of an image and then use a few convolution layers to obtain a final\nimage output that has the same dimensions as the original input_img.\nListing8.25 VAE decoder network, mapping latent space points to images\ndecoder_input = layers.Input(K.int_shape(z)[1:]) Input where you’ll feed z\nx = layers.Dense(np.prod(shape_before_flattening[1:]),\nUpsamples the inpu"}
{"text": "t\nactivation='relu')(decoder_input)\nx = layers.Reshape(shape_before_flattening[1:])(x)\nx = layers.Conv2DTranspose(32, 3,\npadding='same', Uses a Conv2DTranspose\nactivation='relu', layer and Conv2D layer to\nstrides=(2, 2))(x) decode z into a feature map\nx = layers.Conv2D(1, 3, the same size as the\npadding='same', original image input\nactivation='sigmoid')(x)\nReshapes z into a feature map of the same shape as the feature\nmap just before the last Flatten layer in the encoder model\nLicensed to <null>"}
{"text": "\n302 CHAPTER 8 Generative deep learning\ndecoder = Model(decoder_input, x) Instantiates the decoder model,\nwhich turns “decoder_input”\nz_decoded = decoder(z) into the decoded image\nApplies it to z to\nrecover the decoded z\nThe dual loss of a VAE doesn’t fit the traditional expectation of a sample-wise function\nof the form loss(input, target). Thus, you’ll set up the loss by writing a custom\nlayer that internally uses the built-in add_loss layer method to create an arbitrary loss.\nListing8.26 Custo"}
{"text": "m layer used to compute the VAE loss\nclass CustomVariationalLayer(keras.layers.Layer):\ndef vae_loss(self, x, z_decoded):\nx = K.flatten(x)\nz_decoded = K.flatten(z_decoded)\nxent_loss = keras.metrics.binary_crossentropy(x, z_decoded)\nkl_loss = -5e-4 * K.mean(\n1 + z_log_var - K.square(z_mean) - K.exp(z_log_var), axis=-1)\nreturn K.mean(xent_loss + kl_loss)\ndef call(self, inputs):\nYou implement custom layers\nYou don't use x = inputs[0]\nby writing a call method.\nthis output, z_decoded = inputs[1]\nbut t"}
{"text": "he layer loss = self.vae_loss(x, z_decoded)\nmust return self.add_loss(loss, inputs=inputs) Calls the custom layer on\nsomething. return x the input and the\ndecoded output to obtain\ny = CustomVariationalLayer()([input_img, z_decoded]) the final model output\nFinally, you’re ready to instantiate and train the model. Because the loss is taken care\nof in the custom layer, you don’t specify an external loss at compile time (loss=None),\nwhich in turn means you won’t pass target data during training (as "}
{"text": "you can see, you\nonly pass x_train to the model in fit).\nListing8.27 Training the VAE\nfrom keras.datasets import mnist\nvae = Model(input_img, y)\nvae.compile(optimizer='rmsprop', loss=None)\nvae.summary()\n(x_train, _), (x_test, y_test) = mnist.load_data()\nx_train = x_train.astype('float32') / 255.\nx_train = x_train.reshape(x_train.shape + (1,))\nx_test = x_test.astype('float32') / 255.\nx_test = x_test.reshape(x_test.shape + (1,))\nvae.fit(x=x_train, y=None,\nshuffle=True,\nepochs=10,\nbatch_size=batch_"}
{"text": "size,\nvalidation_data=(x_test, None))\nLicensed to <null>\nGenerating images with variational autoencoders 303\nOnce such a model is trained—on MNIST, in this case—you can use the decoder net-\nwork to turn arbitrary latent space vectors into images.\nListing8.28 Sampling a grid of points from the 2D latent space and decoding them to images\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nYou’ll display a grid of 15 × 15\ndigits (255 digits total).\nn = 15\ndigit_size = 28 Transforms linearl"}
{"text": "y spaced\nfigure = np.zeros((digit_size * n, digit_size * n)) coordinates using the SciPy ppf\ngrid_x = norm.ppf(np.linspace(0.05, 0.95, n)) function to produce values of the\nlatent variable z (because the prior\ngrid_y = norm.ppf(np.linspace(0.05, 0.95, n))\nof the latent space is Gaussian)\nfor i, yi in enumerate(grid_x):\nRepeats z multiple times to\nfor j, xi in enumerate(grid_y):\nform a complete batch\nz_sample = np.array([[xi, yi]])\nz_sample = np.tile(z_sample, batch_size).reshape(batch_size, 2)\nx"}
{"text": "_decoded = decoder.predict(z_sample, batch_size=batch_size)\ndigit = x_decoded[0].reshape(digit_size, digit_size)\nfigure[i * digit_size: (i + 1) * digit_size,\nj * digit_size: (j + 1) * digit_size] = digit\nplt.figure(figsize=(10, 10)) Reshapes the first digit in\nplt.imshow(figure, cmap='Greys_r') the batch from 28 × 28 × 1\nplt.show() to 28 × 28\nDecodes the batch\ninto digit images\nThe grid of sampled digits (see fig-\nure 8.14) shows a completely contin-\nuous distribution of the different\ndigit clas"}
{"text": "ses, with one digit morphing\ninto another as you follow a path\nthrough latent space. Specific direc-\ntions in this space have a meaning:\nfor example, there’s a direction for\n“four-ness,” “one-ness,” and so on.\nIn the next section, we’ll cover in\ndetail the other major tool for gener-\nating artificial images: generative\nadversarial networks (GANs).\nFigure 8.14 Grid of digits decoded from the latent\nspace\nLicensed to <null>\n304 CHAPTER 8 Generative deep learning\n8.4.4 Wrapping up\n Image generatio"}
{"text": "n with deep learning is done by learning latent spaces that cap-\nture statistical information about a dataset of images. By sampling and decod-\ning points from the latent space, you can generate never-before-seen images.\nThere are two major tools to do this: VAEs and GANs.\n VAEs result in highly structured, continuous latent representations. For this rea-\nson, they work well for doing all sorts of image editing in latent space: face\nswapping, turning a frowning face into a smiling face, and so "}
{"text": "on. They also work\nnicely for doing latent-space-based animations, such as animating a walk along a\ncross section of the latent space, showing a starting image slowly morphing into\ndifferent images in a continuous way.\n GANs enable the generation of realistic single-frame images but may not induce\nlatent spaces with solid structure and high continuity.\nMost successful practical applications I have seen with images rely on VAEs, but GANs\nare extremely popular in the world of academic research—at"}
{"text": " least, circa 2016–2017.\nYou’ll find out how they work and how to implement one in the next section.\nTIP To play further with image generation, I suggest working with the Large-\nscale Celeb Faces Attributes (CelebA) dataset. It’s a free-to-download image\ndataset containing more than 200,000 celebrity portraits. It’s great for experi-\nmenting with concept vectors in particular—it definitely beats MNIST.\nLicensed to <null>\nIntroduction to generative adversarial networks 305\n8.5 Introduction to gen"}
{"text": "erative adversarial networks\nGenerative adversarial networks (GANs), introduced in 2014 by Goodfellow et al.,8 are\nan alternative to VAEs for learning latent spaces of images. They enable the generation\nof fairly realistic synthetic images by forcing the generated images to be statistically\nalmost indistinguishable from real ones.\nAn intuitive way to understand GANs is to imagine a forger trying to create a fake\nPicasso painting. At first, the forger is pretty bad at the task. He mixes some of h"}
{"text": "is\nfakes with authentic Picassos and shows them all to an art dealer. The art dealer makes\nan authenticity assessment for each painting and gives the forger feedback about what\nmakes a Picasso look like a Picasso. The forger goes back to his studio to prepare some\nnew fakes. As times goes on, the forger becomes increasingly competent at imitating\nthe style of Picasso, and the art dealer becomes increasingly expert at spotting fakes.\nIn the end, they have on their hands some excellent fake Picass"}
{"text": "os.\nThat’s what a GAN is: a forger network and an expert network, each being trained\nto best the other. As such, a GAN is made of two parts:\n Generator network—Takes as input a random vector (a random point in the\nlatent space), and decodes it into a synthetic image\n Discriminator network (or adversary)—Takes as input an image (real or synthetic),\nand predicts whether the image came from the training set or was created by\nthe generator network.\nThe generator network is trained to be able to fo"}
{"text": "ol the discriminator network, and\nthus it evolves toward generating increasingly realistic images as training goes on: arti-\nficial images that look indistinguishable from real ones, to the extent that it’s impossi-\nble for the discriminator network to tell the two apart (see figure 8.15). Meanwhile,\nthe discriminator is constantly adapting to the gradually improving capabilities of the\ngenerator, setting a high bar of realism for the generated images. Once training is\nover, the generator is cap"}
{"text": "able of turning any point in its input space into a believable\nimage. Unlike VAEs, this latent space has fewer explicit guarantees of meaningful\nstructure; in particular, it isn’t continuous.\n8 Ian Goodfellow et al., “Generative Adversarial Networks,” arXiv (2014), https://arxiv.org/abs/1406.2661.\nLicensed to <null>\n306 CHAPTER 8 Generative deep learning\nRandom vector\nGenerated\nfrom the\n(decoded)\nlatent space\nimage\nGenerator (decoder)\nTraining\nfeedback\nDiscriminator “Real,” “Fake”\nMix of real\nan"}
{"text": "d fake images\nFigure 8.15 A generator transforms random latent vectors into images, and a discriminator\nseeks to tell real images from generated ones. The generator is trained to fool the discriminator.\nRemarkably, a GAN is a system where the optimization minimum isn’t fixed, unlike in\nany other training setup you’ve encountered in this book. Normally, gradient descent\nconsists of rolling down hills in a static loss landscape. But with a GAN, every step\ntaken down the hill changes the entire lan"}
{"text": "dscape a little. It’s a dynamic system where\nthe optimization process is seeking not a minimum, but an equilibrium between two\nforces. For this reason, GANs are notoriously difficult to train—getting a GAN to work\nrequires lots of careful tuning of the model architecture and training parameters.\nFigure 8.16 Latent space dwellers. Images generated by Mike Tyka using\na multistaged GAN trained on a dataset of faces (www.miketyka.com).\nLicensed to <null>\nIntroduction to generative adversarial networ"}
{"text": "ks 307\n8.5.1 A schematic GAN implementation\nIn this section, we’ll explain how to implement a GAN in Keras, in its barest form—\nbecause GANs are advanced, diving deeply into the technical details would be out of\nscope for this book. The specific implementation is a deep convolutional GAN (DCGAN):\na GAN where the generator and discriminator are deep convnets. In particular, it uses\na Conv2DTranspose layer for image upsampling in the generator.\nYou’ll train the GAN on images from CIFAR10, a datase"}
{"text": "t of 50,000 32 × 32 RGB\nimages belonging to 10 classes (5,000 images per class). To make things easier, you’ll\nonly use images belonging to the class “frog.”\nSchematically, the GAN looks like this:\n1 A generator network maps vectors of shape (latent_dim,) to images of shape\n(32, 32, 3).\n2 A discriminator network maps images of shape (32, 32, 3) to a binary score\nestimating the probability that the image is real.\n3 A gan network chains the generator and the discriminator together: gan(x) =\ndiscri"}
{"text": "minator(generator(x)). Thus this gan network maps latent space vec-\ntors to the discriminator’s assessment of the realism of these latent vectors as\ndecoded by the generator.\n4 You train the discriminator using examples of real and fake images along with\n“real”/“fake” labels, just as you train any regular image-classification model.\n5 To train the generator, you use the gradients of the generator’s weights with\nregard to the loss of the gan model. This means, at every step, you move the\nweights "}
{"text": "of the generator in a direction that makes the discriminator more likely\nto classify as “real” the images decoded by the generator. In other words, you\ntrain the generator to fool the discriminator.\n8.5.2 A bag of tricks\nThe process of training GANs and tuning GAN implementations is notoriously diffi-\ncult. There are a number of known tricks you should keep in mind. Like most things\nin deep learning, it’s more alchemy than science: these tricks are heuristics, not\ntheory-backed guidelines. They’"}
{"text": "re supported by a level of intuitive understanding of\nthe phenomenon at hand, and they’re known to work well empirically, although not\nnecessarily in every context.\nHere are a few of the tricks used in the implementation of the GAN generator and\ndiscriminator in this section. It isn’t an exhaustive list of GAN-related tips; you’ll find\nmany more across the GAN literature:\n We use tanh as the last activation in the generator, instead of sigmoid, which is\nmore commonly found in other types of mod"}
{"text": "els.\n We sample points from the latent space using a normal distribution (Gaussian dis-\ntribution), not a uniform distribution.\nLicensed to <null>\n308 CHAPTER 8 Generative deep learning\n Stochasticity is good to induce robustness. Because GAN training results in a\ndynamic equilibrium, GANs are likely to get stuck in all sorts of ways. Introduc-\ning randomness during training helps prevent this. We introduce randomness\nin two ways: by using dropout in the discriminator and by adding random nois"}
{"text": "e\nto the labels for the discriminator.\n Sparse gradients can hinder GAN training. In deep learning, sparsity is often a\ndesirable property, but not in GANs. Two things can induce gradient sparsity:\nmax pooling operations and ReLU activations. Instead of max pooling, we rec-\nommend using strided convolutions for downsampling, and we recommend\nusing a LeakyReLU layer instead of a ReLU activation. It’s similar to ReLU, but it\nrelaxes sparsity constraints by allowing small negative activation value"}
{"text": "s.\n In generated images, it’s common to see checkerboard artifacts caused by\nunequal coverage of the pixel space in the generator (see figure 8.17). To fix\nthis, we use a kernel size that’s divisible by the stride size whenever we use a\nstrided Conv2DTranpose or Conv2D in both the generator and the discriminator.\nFigure 8.17 Checkerboard artifacts caused by mismatching strides and kernel\nsizes, resulting in unequal pixel-space coverage: one of the many gotchas of GANs\n8.5.3 The generator\nFirst,"}
{"text": " let’s develop a generator model that turns a vector (from the latent space—\nduring training it will be sampled at random) into a candidate image. One of the\nmany issues that commonly arise with GANs is that the generator gets stuck with gener-\nated images that look like noise. A possible solution is to use dropout on both the dis-\ncriminator and the generator.\nListing8.29 GAN generator network\nimport keras\nfrom keras import layers\nimport numpy as np\nlatent_dim = 32\nheight = 32\nwidth = 32\nchanne"}
{"text": "ls = 3\nLicensed to <null>\nIntroduction to generative adversarial networks 309\ngenerator_input = keras.Input(shape=(latent_dim,))\nx = layers.Dense(128 * 16 * 16)(generator_input) Transforms the input into\nx = layers.LeakyReLU()(x) a 16 × 16 128-channel\nx = layers.Reshape((16, 16, 128))(x) feature map\nx = layers.Conv2D(256, 5, padding='same')(x)\nx = layers.LeakyReLU()(x)\nx = layers.Conv2DTranspose(256, 4, strides=2, padding='same')(x) Upsamples\nx = layers.LeakyReLU()(x) to 32 × 32\nx = layers.Conv2"}
{"text": "D(256, 5, padding='same')(x)\nx = layers.LeakyReLU()(x)\nx = layers.Conv2D(256, 5, padding='same')(x)\nx = layers.LeakyReLU()(x)\nx = layers.Conv2D(channels, 7, activation='tanh', padding='same')(x)\ngenerator = keras.models.Model(generator_input, x)\ngenerator.summary()\nProduces a 32 × 32 1-channel feature\nInstantiates the generator model, which maps the input map (shape of a CIFAR10 image)\nof shape (latent_dim,) into an image of shape (32, 32, 3)\n8.5.4 The discriminator\nNext, you’ll develop a discri"}
{"text": "minator model that takes as input a candidate image\n(real or synthetic) and classifies it into one of two classes: “generated image” or “real\nimage that comes from the training set.”\nListing8.30 The GAN discriminator network\ndiscriminator_input = layers.Input(shape=(height, width, channels))\nx = layers.Conv2D(128, 3)(discriminator_input)\nx = layers.LeakyReLU()(x)\nx = layers.Conv2D(128, 4, strides=2)(x)\nx = layers.LeakyReLU()(x)\nx = layers.Conv2D(128, 4, strides=2)(x)\nx = layers.LeakyReLU()(x) On"}
{"text": "e dropout layer:\nan important trick!\nx = layers.Conv2D(128, 4, strides=2)(x)\nx = layers.LeakyReLU()(x)\nx = layers.Flatten()(x) Classification layer\nx = layers.Dropout(0.4)(x)\nInstantiates the discrim-\nx = layers.Dense(1, activation='sigmoid')(x) inator model, which turns\na (32, 32, 3) input into a\ndiscriminator = keras.models.Model(discriminator_input, x)\nbinary classifi-cation\ndiscriminator.summary()\ndecision (fake/real)\ndiscriminator_optimizer = keras.optimizers.RMSprop(\nlr=0.0008, Uses gradie"}
{"text": "nt clipping (by\nclipvalue=1.0, value) in the optimizer\ndecay=1e-8)\nTo stabilize training,\ndiscriminator.compile(optimizer=discriminator_optimizer,\nuses learning-rate decay\nloss='binary_crossentropy')\nLicensed to <null>\n310 CHAPTER 8 Generative deep learning\n8.5.5 The adversarial network\nFinally, you’ll set up the GAN, which chains the generator and the discriminator.\nWhen trained, this model will move the generator in a direction that improves its abil-\nity to fool the discriminator. This model "}
{"text": "turns latent-space points into a classification\ndecision—“fake” or “real”—and it’s meant to be trained with labels that are always\n“these are real images.” So, training gan will update the weights of generator in a way\nthat makes discriminator more likely to predict “real” when looking at fake images.\nIt’s very important to note that you set the discriminator to be frozen during training\n(non-trainable): its weights won’t be updated when training gan. If the discriminator\nweights could be update"}
{"text": "d during this process, then you’d be training the discrimina-\ntor to always predict “real,” which isn’t what you want!\nListing8.31 Adversarial network\ndiscriminator.trainable = False\nSets discriminator weights to\ngan_input = keras.Input(shape=(latent_dim,)) non-trainable (this will only\ngan_output = discriminator(generator(gan_input)) apply to the gan model)\ngan = keras.models.Model(gan_input, gan_output)\ngan_optimizer = keras.optimizers.RMSprop(lr=0.0004, clipvalue=1.0, decay=1e-8)\ngan.compile("}
{"text": "optimizer=gan_optimizer, loss='binary_crossentropy')\n8.5.6 How to train your DCGAN\nNow you can begin training. To recapitulate, this is what the training loop looks like\nschematically. For each epoch, you do the following:\n1 Draw random points in the latent space (random noise).\n2 Generate images with generator using this random noise.\n3 Mix the generated images with real ones.\n4 Train discriminator using these mixed images, with corresponding targets:\neither “real” (for the real images) or “fak"}
{"text": "e” (for the generated images).\n5 Draw new random points in the latent space.\n6 Train gan using these random vectors, with targets that all say “these are real\nimages.” This updates the weights of the generator (only, because the discrimi-\nnator is frozen inside gan) to move them toward getting the discriminator to\npredict “these are real images” for generated images: this trains the generator\nto fool the discriminator.\nLet’s implement it.\nListing8.32 Implementing GAN training\nimport os\nLoads CIF"}
{"text": "AR10 data\nfrom keras.preprocessing import image\n(x_train, y_train), (_, _) = keras.datasets.cifar10.load_data()\nLicensed to <null>\nIntroduction to generative adversarial networks 311\nx_train = x_train[y_train.flatten() == 6]\nSelects frog images (class 6)\nx_train = x_train.reshape(\n(x_train.shape[0],) +\n(height, width, channels)).astype('float32') / 255. Normalizes data\niterations = 10000\nbatch_size = 20\nsave_dir = 'your_dir'\nSpecifies where you want\nto save generated images\nstart = 0\nfor step in"}
{"text": " range(iterations): Samples random\nrandom_latent_vectors = np.random.normal(size=(batch_size, points in the\nlatent_dim)) latent space\ngenerated_images = generator.predict(random_latent_vectors)\nDecodes\nthem to Combines them\nfake stop = start + batch_size with real images\nimages real_images = x_train[start: stop]\ncombined_images = np.concatenate([generated_images, real_images])\nAssembles labels, discrim-\nlabels = np.concatenate([np.ones((batch_size, 1)),\ninating real from fake images\nnp.zeros((ba"}
{"text": "tch_size, 1))])\nlabels += 0.05 * np.random.random(labels.shape)\nAdds random\nd_loss = discriminator.train_on_batch(combined_images, labels) noise to the\nTrains the\nlabels—an\ndiscriminator\nrandom_latent_vectors = np.random.normal(size=(batch_size, important trick!\nlatent_dim)) Samples random\npoints in the\nAssembles misleading_targets = np.zeros((batch_size, 1)) latent space\nlabels that\nsay “these a_loss = gan.train_on_batch(random_latent_vectors, Trains the generator (via the\nare all real misleadi"}
{"text": "ng_targets) gan model, where the discrim-\nimages” inator weights are frozen)\n(it’s a lie!) start += batch_size\nif start > len(x_train) - batch_size:\nOccasionally saves and\nstart = 0\nplots (every 100 steps)\nif step % 100 == 0:\ngan.save_weights('gan.h5') Saves model weights\nSaves one\nprint('discriminator loss:', d_loss)\nPrints metrics print('adversarial loss:', a_loss) generated image\nimg = image.array_to_img(generated_images[0] * 255., scale=False)\nimg.save(os.path.join(save_dir,\n'generated_frog'"}
{"text": " + str(step) + '.png'))\nimg = image.array_to_img(real_images[0] * 255., scale=False)\nimg.save(os.path.join(save_dir,\n'real_frog' + str(step) + '.png'))\nSaves one real image\nfor comparison\nLicensed to <null>\n312 CHAPTER 8 Generative deep learning\nWhen training, you may see the adversarial loss begin to increase considerably, while\nthe discriminative loss tends to zero—the discriminator may end up dominating the\ngenerator. If that’s the case, try reducing the discriminator learning rate, and incre"}
{"text": "ase\nthe dropout rate of the discriminator.\nFigure 8.18 Play the discriminator: in each row, two images were dreamed up by the GAN,\nand one image comes from the training set. Can you tell them apart? (Answers: the real\nimages in each column are middle, top, bottom, middle.)\n8.5.7 Wrapping up\n A GAN consists of a generator network coupled with a discriminator network.\nThe discriminator is trained to differenciate between the output of the generator\nand real images from a training dataset, and the"}
{"text": " generator is trained to fool the\ndiscriminator. Remarkably, the generator nevers sees images from the training\nset directly; the information it has about the data comes from the discriminator.\n GANs are difficult to train, because training a GAN is a dynamic process rather\nthan a simple gradient descent process with a fixed loss landscape. Getting a\nGAN to train correctly requires using a number of heuristic tricks, as well as\nextensive tuning.\n GANs can potentially produce highly realistic i"}
{"text": "mages. But unlike VAEs, the\nlatent space they learn doesn’t have a neat continuous structure and thus may\nnot be suited for certain practical applications, such as image editing via latent-\nspace concept vectors.\nLicensed to <null>\nIntroduction to generative adversarial networks 313\nChapter summary\n With creative applications of deep learning, deep networks go beyond\nannotating existing content and start generating their own. You learned\nthe following:\n– How to generate sequence data, one times"}
{"text": "tep at a time. This is applicable\nto text generation and also to note-by-note music generation or any other\ntype of timeseries data.\n– How DeepDream works: by maximizing convnet layer activations through\ngradient ascent in input space.\n– How to perform style transfer, where a content image and a style image are\ncombined to produce interesting-looking results.\n– What GANs and VAEs are, how they can be used to dream up new images,\nand how latent-space concept vectors can be used for image editing."}
{"text": "\n These few techniques cover only the basics of this fast-expanding field.\nThere’s a lot more to discover out there—generative deep learning is\ndeserving of an entire book of its own.\nLicensed to <null>\nConclusions\nThis chapter covers\n Important takeaways from this book\n The limitations of deep learning\n The future of deep learning, machine learning,\nand AI\n Resources for learning further and working in\nthe field\nYou’ve almost reached the end of this book. This last chapter will summarize a"}
{"text": "nd\nreview core concepts while also expanding your horizons beyond the relatively basic\nnotions you’ve learned so far. Understanding deep learning and AI is a journey, and\nfinishing this book is merely the first step on it. I want to make sure you realize this\nand are properly equipped to take the next steps of this journey on your own.\nWe’ll start with a bird’s-eye view of what you should take away from this book.\nThis should refresh your memory regarding some of the concepts you’ve learned.\nNex"}
{"text": "t, we’ll present an overview of some key limitations of deep learning. To use a\ntool appropriately, you should not only understand what it can do but also be aware\nof what it can’t do. Finally, I’ll offer some speculative thoughts about the future evo-\nlution of the fields of deep learning, machine learning, and AI. This should be\nespecially interesting to you if you’d like to get into fundamental research. The\nchapter ends with a short list of resources and strategies for learning further about"}
{"text": "\nAI and staying up to date with new advances.\n314\nLicensed to <null>\nKey concepts in review 315\n9.1 Key concepts in review\nThis section briefly synthesizes the key takeaways from this book. If you ever need a\nquick refresher to help you recall what you’ve learned, you can read these few pages.\n9.1.1 Various approaches to AI\nFirst of all, deep learning isn’t synonymous with AI or even with machine learning.\nArtificial intelligence is an ancient, broad field that can generally be defined as “all\na"}
{"text": "ttempts to automate cognitive processes”—in other words, the automation of\nthought. This can range from the very basic, such as an Excel spreadsheet, to the very\nadvanced, like a humanoid robot that can walk and talk.\nMachine learning is a specific subfield of AI that aims at automatically developing\nprograms (called models) purely from exposure to training data. This process of turn-\ning data into a program is called learning. Although machine learning has been\naround for a long time, it only s"}
{"text": "tarted to take off in the 1990s.\nDeep learning is one of many branches of machine learning, where the models are\nlong chains of geometric functions, applied one after the other. These operations are\nstructured into modules called layers: deep-learning models are typically stacks of lay-\ners—or, more generally, graphs of layers. These layers are parameterized by weights,\nwhich are the parameters learned during training. The knowledge of a model is stored\nin its weights, and the process of learnin"}
{"text": "g consists of finding good values for these\nweights.\nEven though deep learning is just one among many approaches to machine learn-\ning, it isn’t on an equal footing with the others. Deep learning is a breakout success.\nHere’s why.\n9.1.2 What makes deep learning special\nwithin the field of machine learning\nIn the span of only a few years, deep learning has achieved tremendous break-\nthroughs across a wide range of tasks that have been historically perceived as\nextremely difficult for computers, e"}
{"text": "specially in the area of machine perception:\nextracting useful information from images, videos, sound, and more. Given sufficient\ntraining data (in particular, training data appropriately labeled by humans), it’s possi-\nble to extract from perceptual data almost anything that a human could extract.\nHence, it’s sometimes said that deep learning has solved perception, although that’s true\nonly for a fairly narrow definition of perception.\nDue to its unprecedented technical successes, deep learning"}
{"text": " has singlehandedly\nbrought about the third and by far the largest AI summer: a period of intense interest,\ninvestment, and hype in the field of AI. As this book is being written, we’re in the middle\nof it. Whether this period will end in the near future, and what happens after it ends,\nare topics of debate. One thing is certain: in stark contrast with previous AI summers,\ndeep learning has provided enormous business value to a number of large technology\ncompanies, enabling human-level speech re"}
{"text": "cognition, smart assistants, human-level\nLicensed to <null>\n316 CHAPTER 9 Conclusions\nimage classification, vastly improved machine translation, and more. The hype may\n(and likely will) recede, but the sustained economic and technological impact of deep\nlearning will remain. In that sense, deep learning could be analogous to the internet:\nit may be overly hyped up for a few years, but in the longer term it will still be a major\nrevolution that will transform our economy and our lives.\nI’m partic"}
{"text": "ularly optimistic about deep learning because even if we were to make no\nfurther technological progress in the next decade, deploying existing algorithms to\nevery applicable problem would be a game changer for most industries. Deep learn-\ning is nothing short of a revolution, and progress is currently happening at an incred-\nibly fast rate, due to an exponential investment in resources and headcount. From\nwhere I stand, the future looks bright, although short-term expectations are somewhat\novero"}
{"text": "ptimistic; deploying deep learning to the full extent of its potential will take well\nover a decade.\n9.1.3 How to think about deep learning\nThe most surprising thing about deep learning is how simple it is. Ten years ago, no\none expected that we would achieve such amazing results on machine-perception\nproblems by using simple parametric models trained with gradient descent. Now, it\nturns out that all you need is sufficiently large parametric models trained with gradi-\nent descent on sufficiently"}
{"text": " many examples. As Feynman once said about the universe,\n“It’s not complicated, it’s just a lot of it.”1\nIn deep learning, everything is a vector: everything is a point in a geometric space.\nModel inputs (text, images, and so on) and targets are first vectorized: turned into an\ninitial input vector space and target vector space. Each layer in a deep-learning model\noperates one simple geometric transformation on the data that goes through it.\nTogether, the chain of layers in the model forms one c"}
{"text": "omplex geometric transforma-\ntion, broken down into a series of simple ones. This complex transformation attempts\nto map the input space to the target space, one point at a time. This transformation is\nparameterized by the weights of the layers, which are iteratively updated based on how\nwell the model is currently performing. A key characteristic of this geometric transfor-\nmation is that it must be differentiable, which is required in order for us to be able to\nlearn its parameters via gradien"}
{"text": "t descent. Intuitively, this means the geometric morph-\ning from inputs to outputs must be smooth and continuous—a significant constraint.\nThe entire process of applying this complex geometric transformation to the input\ndata can be visualized in 3D by imagining a person trying to uncrumple a paper ball:\nthe crumpled paper ball is the manifold of the input data that the model starts with.\nEach movement operated by the person on the paper ball is similar to a simple geo-\nmetric transformation ope"}
{"text": "rated by one layer. The full uncrumpling gesture sequence\nis the complex transformation of the entire model. Deep-learning models are mathe-\nmatical machines for uncrumpling complicated manifolds of high-dimensional data.\n1 Richard Feynman, interview, The World from Another Point of View, Yorkshire Television, 1972.\nLicensed to <null>\nKey concepts in review 317\nThat’s the magic of deep learning: turning meaning into vectors, into geometric\nspaces, and then incrementally learning complex geometri"}
{"text": "c transformations that map\none space to another. All you need are spaces of sufficiently high dimensionality in\norder to capture the full scope of the relationships found in the original data.\nThe whole thing hinges on a single core idea: that meaning is derived from the pairwise\nrelationship between things (between words in a language, between pixels in an image,\nand so on) and that these relationships can be captured by a distance function. But note that\nwhether the brain implements meaning vi"}
{"text": "a geometric spaces is an entirely separate\nquestion. Vector spaces are efficient to work with from a computational standpoint,\nbut different data structures for intelligence can easily be envisioned—in particular,\ngraphs. Neural networks initially emerged from the idea of using graphs as a way to\nencode meaning, which is why they’re named neural networks; the surrounding field of\nresearch used to be called connectionism. Nowadays the name neural network exists\npurely for historical reasons—it’s "}
{"text": "an extremely misleading name because they’re nei-\nther neural nor networks. In particular, neural networks have hardly anything to do\nwith the brain. A more appropriate name would have been layered representations learn-\ning or hierarchical representations learning, or maybe even deep differentiable models or\nchained geometric transforms, to emphasize the fact that continuous geometric space\nmanipulation is at their core.\n9.1.4 Key enabling technologies\nThe technological revolution that’s curren"}
{"text": "tly unfolding didn’t start with any single\nbreakthrough invention. Rather, like any other revolution, it’s the product of a vast\naccumulation of enabling factors—slowly at first, and then suddenly. In the case of\ndeep learning, we can point out the following key factors:\n Incremental algorithmic innovations, first spread over two decades (starting\nwith backpropagation) and then happening increasingly faster as more\nresearch effort was poured into deep learning after 2012.\n The availability of "}
{"text": "large amounts of perceptual data, which is a requirement in\norder to realize that sufficiently large models trained on sufficiently large data\nare all we need. This is in turn a byproduct of the rise of the consumer internet\nand Moore’s law applied to storage media.\n The availability of fast, highly parallel computation hardware at a low price,\nespecially the GPUs produced by NVIDIA—first gaming GPUs and then chips\ndesigned from the ground up for deep learning. Early on, NVIDIA CEO Jensen\nHuang"}
{"text": " took note of the deep-learning boom and decided to bet the company’s\nfuture on it.\n A complex stack of software layers that makes this computational power available\nto humans: the CUDA language, frameworks like TensorFlow that do automatic\ndifferentiation, and Keras, which makes deep learning accessible to most people.\nLicensed to <null>\n318 CHAPTER 9 Conclusions\nIn the future, deep learning will not only be used by specialists—researchers, graduate\nstudents, and engineers with an academic pro"}
{"text": "file—but will also be a tool in the tool-\nbox of every developer, much like web technology today. Everyone needs to build\nintelligent apps: just as every business today needs a website, every product will need\nto intelligently make sense of user-generated data. Bringing about this future will\nrequire us to build tools that make deep learning radically easy to use and accessible\nto anyone with basic coding abilities. Keras is the first major step in that direction.\n9.1.5 The universal machine-lea"}
{"text": "rning workflow\nHaving access to an extremely powerful tool for creating models that map any input\nspace to any target space is great, but the difficult part of the machine-learning work-\nflow is often everything that comes before designing and training such models (and,\nfor production models, what comes after, as well). Understanding the problem\ndomain so as to be able to determine what to attempt to predict, given what data, and\nhow to measure success, is a prerequisite for any successful appli"}
{"text": "cation of machine\nlearning, and it isn’t something that advanced tools like Keras and TensorFlow can\nhelp you with. As a reminder, here’s a quick summary of the typical machine-learning\nworkflow as described in chapter 4:\n1 Define the problem: What data is available, and what are you trying to predict?\nWill you need to collect more data or hire people to manually label a dataset?\n2 Identify a way to reliably measure success on your goal. For simple tasks, this\nmay be prediction accuracy, but in "}
{"text": "many cases it will require sophisticated\ndomain-specific metrics.\n3 Prepare the validation process that you’ll use to evaluate your models. In partic-\nular, you should define a training set, a validation set, and a test set. The valida-\ntion- and test-set labels shouldn’t leak into the training data: for instance, with\ntemporal prediction, the validation and test data should be posterior to the\ntraining data.\n4 Vectorize the data by turning it into vectors and preprocessing it in a way that\nmake"}
{"text": "s it more easily approachable by a neural network (normalization, and so\non).\n5 Develop a first model that beats a trivial common-sense baseline, thus demon-\nstrating that machine learning can work on your problem. This may not always\nbe the case!\n6 Gradually refine your model architecture by tuning hyperparameters and add-\ning regularization. Make changes based on performance on the validation data\nonly, not the test data or the training data. Remember that you should get your\nmodel to overfit "}
{"text": "(thus identifying a model capacity level that’s greater than you\nneed) and only then begin to add regularization or downsize your model.\nLicensed to <null>\nKey concepts in review 319\n7 Be aware of validation-set overfitting when turning hyperparameters: the fact\nthat your hyperparameters may end up being overspecialized to the validation\nset. Avoiding this is the purpose of having a separate test set!\n9.1.6 Key network architectures\nThe three families of network architectures that you should be "}
{"text": "familiar with are densely\nconnected networks, convolutional networks, and recurrent networks. Each type of network is\nmeant for a specific input modality: a network architecture (dense, convolutional,\nrecurrent) encodes assumptions about the structure of the data: a hypothesis space within\nwhich the search for a good model will proceed. Whether a given architecture will\nwork on a given problem depends entirely on the match between the structure of the\ndata and the assumptions of the network arch"}
{"text": "itecture.\nThese different network types can easily be combined to achieve larger multi-\nmodal networks, much as you combine LEGO bricks. In a way, deep-learning layers are\nLEGO bricks for information processing. Here’s a quick overview of the mapping\nbetween input modalities and appropriate network architectures:\n Vector data—Densely connected network (Dense layers).\n Image data—2D convnets.\n Sound data (for example, waveform)—Either 1D convnets (preferred) or RNNs.\n Text data—Either 1D conv"}
{"text": "nets (preferred) or RNNs.\n Timeseries data—Either RNNs (preferred) or 1D convnets.\n Other types of sequence data—Either RNNs or 1D convnets. Prefer RNNs if data\nordering is strongly meaningful (for example, for timeseries, but not for text).\n Video data—Either 3D convnets (if you need to capture motion effects) or a\ncombination of a frame-level 2D convnet for feature extraction followed by\neither an RNN or a 1D convnet to process the resulting sequences.\n Volumetric data—3D convnets.\nNow, le"}
{"text": "t’s quickly review the specificities of each network architecture.\nDENSELY CONNECTED NETWORKS\nA densely connected network is a stack of Dense layers, meant to process vector data\n(batches of vectors). Such networks assume no specific structure in the input features:\nthey’re called densely connected because the units of a Dense layer are connected to every\nother unit. The layer attempts to map relationships between any two input features; this\nis unlike a 2D convolution layer, for instance, which"}
{"text": " only looks at local relationships.\nDensely connected networks are most commonly used for categorical data (for\nexample, where the input features are lists of attributes), such as the Boston Housing\nPrice dataset used in chapter 3. They’re also used as the final classification or regres-\nsion stage of most networks. For instance, the convnets covered in chapter 5 typically\nend with one or two Dense layers, and so do the recurrent networks in chapter 6.\nLicensed to <null>\n320 CHAPTER 9 Conclusion"}
{"text": "s\nRemember: to perform binary classification, end your stack of layers with a Dense\nlayer with a single unit and a sigmoid activation, and use binary_crossentropy as the\nloss. Your targets should be either 0 or 1:\nfrom keras import models\nfrom keras import layers\nmodel = models.Sequential()\nmodel.add(layers.Dense(32, activation='relu', input_shape=(num_input_features,)))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\nmodel.compile(optimizer='rmspr"}
{"text": "op', loss='binary_crossentropy')\nTo perform single-label categorical classification (where each sample has exactly one class,\nno more), end your stack of layers with a Dense layer with a number of units equal to the\nnumber of classes, and a softmax activation. If your targets are one-hot encoded, use\ncategorical_crossentropy as the loss; if they’re integers, use sparse_categorical_\ncrossentropy:\nmodel = models.Sequential()\nmodel.add(layers.Dense(32, activation='relu', input_shape=(num_input_feat"}
{"text": "ures,)))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(num_classes, activation='softmax'))\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy')\nTo perform multilabel categorical classification (where each sample can have several\nclasses), end your stack of layers with a Dense layer with a number of units equal to the\nnumber of classes and a sigmoid activation, and use binary_crossentropy as the loss.\nYour targets should be k-hot encoded:\nmodel = models.Sequ"}
{"text": "ential()\nmodel.add(layers.Dense(32, activation='relu', input_shape=(num_input_features,)))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(num_classes, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy')\nTo perform regression toward a vector of continuous values, end your stack of layers\nwith a Dense layer with a number of units equal to the number of values you’re trying\nto predict (often a single one, such as the price of a house), and no"}
{"text": " activation. Several\nlosses can be used for regression, most commonly mean_squared_error (MSE) and\nmean_absolute_error (MAE):\nmodel = models.Sequential()\nmodel.add(layers.Dense(32, activation='relu', input_shape=(num_input_features,)))\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(num_values))\nmodel.compile(optimizer='rmsprop', loss='mse')\nLicensed to <null>\nKey concepts in review 321\nCONVNETS\nConvolution layers look at spatially local patterns by applying the same geomet"}
{"text": "ric\ntransformation to different spatial locations (patches) in an input tensor. This results\nin representations that are translation invariant, making convolution layers highly data\nefficient and modular. This idea is applicable to spaces of any dimensionality: 1D\n(sequences), 2D (images), 3D (volumes), and so on. You can use the Conv1D layer to\nprocess sequences (especially text—it doesn’t work as well on timeseries, which often\ndon’t follow the translation-invariance assumption), the Conv2D la"}
{"text": "yer to process\nimages, and the Conv3D layers to process volumes.\nConvnets, or convolutional networks, consist of stacks of convolution and max-pooling\nlayers. The pooling layers let you spatially downsample the data, which is required to\nkeep feature maps to a reasonable size as the number of features grows, and to allow\nsubsequent convolution layers to “see” a greater spatial extent of the inputs. Convnets\nare often ended with either a Flatten operation or a global pooling layer, turning spa-\nt"}
{"text": "ial feature maps into vectors, followed by Dense layers to achieve classification or\nregression.\nNote that it’s highly likely that regular convolutions will soon be mostly (or com-\npletely) replaced by an equivalent but faster and representationally efficient alterna-\ntive: the depthwise separable convolution (SeparableConv2D layer). This is true for 3D,\n2D, and 1D inputs. When you’re building a new network from scratch, using depth-\nwise separable convolutions is definitely the way to go. The S"}
{"text": "eparableConv2D layer\ncan be used as a drop-in replacement for Conv2D, resulting in a smaller, faster network\nthat also performs better on its task.\nHere’s a typical image-classification network (categorical classification, in this\ncase):\nmodel = models.Sequential()\nmodel.add(layers.SeparableConv2D(32, 3, activation='relu',\ninput_shape=(height, width, channels)))\nmodel.add(layers.SeparableConv2D(64, 3, activation='relu'))\nmodel.add(layers.MaxPooling2D(2))\nmodel.add(layers.SeparableConv2D(64, 3, a"}
{"text": "ctivation='relu'))\nmodel.add(layers.SeparableConv2D(128, 3, activation='relu'))\nmodel.add(layers.MaxPooling2D(2))\nmodel.add(layers.SeparableConv2D(64, 3, activation='relu'))\nmodel.add(layers.SeparableConv2D(128, 3, activation='relu'))\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dense(32, activation='relu'))\nmodel.add(layers.Dense(num_classes, activation='softmax'))\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy')\nRNNS\nRecurrent neural networks (RNNs) work by pr"}
{"text": "ocessing sequences of inputs one timestep at\na time and maintaining a state throughout (a state is typically a vector or set of vectors:\nLicensed to <null>\n322 CHAPTER 9 Conclusions\na point in a geometric space of states). They should be used preferentially over 1D conv-\nnets in the case of sequences where patterns of interest aren’t invariant by temporal\ntranslation (for instance, timeseries data where the recent past is more important than\nthe distant past).\nThree RNN layers are available in K"}
{"text": "eras: SimpleRNN, GRU, and LSTM. For most prac-\ntical purposes, you should use either GRU or LSTM. LSTM is the more powerful of the\ntwo but is also more expensive; you can think of GRU as a simpler, cheaper alternative\nto it.\nIn order to stack multiple RNN layers on top of each other, each layer prior to the\nlast layer in the stack should return the full sequence of its outputs (each input time-\nstep will correspond to an output timestep); if you aren’t stacking any further RNN lay-\ners, then it’"}
{"text": "s common to return only the last output, which contains information\nabout the entire sequence.\nFollowing is a single RNN layer for binary classification of vector sequences:\nmodel = models.Sequential()\nmodel.add(layers.LSTM(32, input_shape=(num_timesteps, num_features)))\nmodel.add(layers.Dense(num_classes, activation='sigmoid'))\n50model.compile(optimizer='rmsprop', loss='binary_crossentropy')\nAnd this is a stacked RNN layer for binary classification of vector sequences:\nmodel = models.Sequential"}
{"text": "()\nmodel.add(layers.LSTM(32, return_sequences=True,\ninput_shape=(num_timesteps, num_features)))\nmodel.add(layers.LSTM(32, return_sequences=True))\nmodel.add(layers.LSTM(32))\nmodel.add(layers.Dense(num_classes, activation='sigmoid'))\nmodel.compile(optimizer='rmsprop', loss='binary_crossentropy')\n9.1.7 The space of possibilities\nWhat will you build with deep learning? Remember, building deep-learning models is\nlike playing with LEGO bricks: layers can be plugged together to map essentially any-\nthi"}
{"text": "ng to anything, given that you have appropriate training data available and that the\nmapping is achievable via a continuous geometric transformation of reasonable com-\nplexity. The space of possibilities is infinite. This section offers a few examples to\ninspire you to think beyond the basic classification and regression tasks that have tra-\nditionally been the bread and butter of machine learning.\nI’ve sorted my suggested applications by input and output modalities. Note that\nquite a few of the"}
{"text": "m stretch the limits of what is possible—although a model could be\ntrained on all of these tasks, in some cases such a model probably wouldn’t generalize\nfar from its training data. Sections 9.2 and 9.3 will address how these limitations could\nbe lifted in the future.\nLicensed to <null>\nKey concepts in review 323\n Mapping vector data to vector data\n– Predictive healthcare—Mapping patient medical records to predictions of\npatient outcomes\n– Behavioral targeting—Mapping a set of website attribute"}
{"text": "s with data on how\nlong a user will spend on the website\n– Product quality control—Mapping a set of attributes relative to an instance of a\nmanufactured product with the probability that the product will fail by next\nyear\n Mapping image data to vector data\n– Doctor assistant—Mapping slides of medical images with a prediction about\nthe presence of a tumor\n– Self-driving vehicle—Mapping car dash-cam video frames to steering wheel\nangle commands\n– Board game AI—Mapping Go and chess boards to the n"}
{"text": "ext player move\n– Diet helper—Mapping pictures of a dish to its calorie count\n– Age prediction—Mapping selfies to the age of the person\n Mapping timeseries data to vector data\n– Weather prediction—Mapping timeseries of weather data in a grid of locations\nof weather data the following week at a specific location\n– Brain-computer interfaces—Mapping timeseries of magnetoencephalogram\n(MEG) data to computer commands\n– Behavioral targeting—Mapping timeseries of user interactions on a website to\nthe "}
{"text": "probability that a user will buy something\n Mapping text to text\n– Smart reply—Mapping emails to possible one-line replies\n– Answering questions—Mapping general-knowledge questions to answers\n– Summarization—Mapping a long article to a short summary of the article\n Mapping images to text\n– Captioning—Mapping images to short captions describing the contents of\nthe images\n Mapping text to images\n– Conditioned image generation—Mapping a short text description to images\nmatching the description\n–"}
{"text": " Logo generation/selection—Mapping the name and description of a company\nto the company’s logo\n Mapping images to images\n– Super-resolution—Mapping downsized images to higher-resolution versions of\nthe same images\n– Visual depth sensing—Mapping images of indoor environments to maps of\ndepth predictions\nLicensed to <null>\n324 CHAPTER 9 Conclusions\n Mapping images and text to text\n– Visual QA—Mapping images and natural-language questions about the con-\ntents of images to natural-language answers"}
{"text": "\n Mapping video and text to text\n– Video QA—Mapping short videos and natural-language questions about the\ncontents of videos to natural-language answers\nAlmost anything is possible—but not quite anything. Let’s see in the next section what\nwe can’t do with deep learning.\nLicensed to <null>\nThe limitations of deep learning 325\n9.2 The limitations of deep learning\nThe space of applications that can be implemented with deep learning is nearly\ninfinite. And yet, many applications are completely out"}
{"text": " of reach for current deep-\nlearning techniques—even given vast amounts of human-annotated data. Say, for\ninstance, that you could assemble a dataset of hundreds of thousands—even mil-\nlions—of English-language descriptions of the features of a software product, written\nby a product manager, as well as the corresponding source code developed by a team\nof engineers to meet these requirements. Even with this data, you could not train a\ndeep-learning model to read a product description and generate"}
{"text": " the appropriate\ncodebase. That’s just one example among many. In general, anything that requires\nreasoning—like programming or applying the scientific method—long-term plan-\nning, and algorithmic data manipulation is out of reach for deep-learning models, no\nmatter how much data you throw at them. Even learning a sorting algorithm with a\ndeep neural network is tremendously difficult.\nThis is because a deep-learning model is just a chain of simple, continuous geometric\ntransformations mapping on"}
{"text": "e vector space into another. All it can do is map one data\nmanifold X into another manifold Y, assuming the existence of a learnable continuous\ntransform from X to Y. A deep-learning model can be interpreted as a kind of pro-\ngram; but, inversely, most programs can’t be expressed as deep-learning models—for most\ntasks, either there exists no corresponding deep-neural network that solves the task or,\neven if one exists, it may not be learnable: the corresponding geometric transform may\nbe far too"}
{"text": " complex, or there may not be appropriate data available to learn it.\nScaling up current deep-learning techniques by stacking more layers and using\nmore training data can only superficially palliate some of these issues. It won’t solve\nthe more fundamental problems that deep-learning models are limited in what they\ncan represent and that most of the programs you may wish to learn can’t be expressed\nas a continuous geometric morphing of a data manifold.\n9.2.1 The risk of anthropomorphizing machin"}
{"text": "e-learning models\nOne real risk with contemporary AI is misinterpreting what deep-learning models do\nand overestimating their abilities. A fundamental feature of humans is our theory of\nmind: our tendency to project intentions, beliefs, and knowledge on the things around\nus. Drawing a smiley face on a rock suddenly makes it “happy”—in our minds. Applied\nto deep learning, this means that, for instance, when we’re able to somewhat success-\nfully train a model to generate captions to describe pictu"}
{"text": "res, we’re led to believe that\nthe model “understands” the contents of the pictures and the captions it generates.\nThen we’re surprised when any slight departure from the sort of images present in the\ntraining data causes the model to generate completely absurd captions (see figure 9.1).\nLicensed to <null>\n326 CHAPTER 9 Conclusions\nFigure 9.1 Failure of an image-captioning\nsystem based on deep learning\nThe boy is holding a baseball bat.\nIn particular, this is highlighted by adversarial examples,"}
{"text": " which are samples fed to a\ndeep-learning network that are designed to trick the model into misclassifying them.\nYou’re already aware that, for instance, it’s possible to do gradient ascent in input\nspace to generate inputs that maximize the activation of some convnet filter—this is\nthe basis of the filter-visualization technique introduced in chapter 5, as well as the\nDeepDream algorithm in chapter 8. Similarly, through gradient ascent, you can\nslightly modify an image in order to maximize the "}
{"text": "class prediction for a given class. By\ntaking a picture of a panda and adding to it a gibbon gradient, we can get a neural\nnetwork to classify the panda as a gibbon (see figure 9.2). This evidences both the brit-\ntleness of these models and the deep difference between their input-to-output map-\nping and our human perception.\nf(x) f(x)\nPanda Gibbon!\nGibbon\nclass gradient\nPanda Adversarial example\nFigure 9.2 An adversarial example: imperceptible changes in an image can\nupend a model’s classificati"}
{"text": "on of the image.\nLicensed to <null>\nThe limitations of deep learning 327\nIn short, deep-learning models don’t have any understanding of their input—at least,\nnot in a human sense. Our own understanding of images, sounds, and language is\ngrounded in our sensorimotor experience as humans. Machine-learning models have\nno access to such experiences and thus can’t understand their inputs in a human-\nrelatable way. By annotating large numbers of training examples to feed into our mod-\nels, we get them"}
{"text": " to learn a geometric transform that maps data to human concepts on\na specific set of examples, but this mapping is a simplistic sketch of the original model\nin our minds—the one developed from our experience as embodied agents. It’s like a\ndim image in a mirror (see figure 9.3).\nLabeled data\nEmbodied Abstract concepts exemplifying Machine-learning\nReal world human experience in human mind these concepts model\nf(x)\nMay not always Doesn’t match the Matches the\ntransfer well to human mental model "}
{"text": "training data\nthe real world it came from\nFigure 9.3 Current machine-learning models: like a dim image in a mirror\nAs a machine-learning practitioner, always be mindful of this, and never fall into the\ntrap of believing that neural networks understand the task they perform—they don’t,\nat least not in a way that would make sense to us. They were trained on a different, far\nnarrower task than the one we wanted to teach them: that of mapping training inputs\nto training targets, point by point. Show"}
{"text": " them anything that deviates from their train-\ning data, and they will break in absurd ways.\n9.2.2 Local generalization vs. extreme generalization\nThere are fundamental differences between the straightforward geometric morphing\nfrom input to output that deep-learning models do, and the way humans think and\nlearn. It isn’t only the fact that humans learn by themselves from embodied experi-\nence instead of being presented with explicit training examples. In addition to the dif-\nferent learning pro"}
{"text": "cesses, there’s a basic difference in the nature of the underlying\nrepresentations.\nHumans are capable of far more than mapping immediate stimuli to immediate\nresponses, as a deep network, or maybe an insect, would. We maintain complex, abstract\nmodels of our current situation, of ourselves, and of other people, and can use these\nmodels to anticipate different possible futures and perform long-term planning. We\ncan merge together known concepts to represent something we’ve never experienced\nLice"}
{"text": "nsed to <null>\n328 CHAPTER 9 Conclusions\nbefore—like picturing a horse wearing jeans, for instance, or imagining what we’d do\nif we won the lottery. This ability to handle hypotheticals, to expand our mental model\nspace far beyond what we can experience directly—to perform abstraction and reason-\ning—is arguably the defining characteristic of human cognition. I call it extreme general-\nization: an ability to adapt to novel, never-before-experienced situations using little data\nor even no new dat"}
{"text": "a at all.\nThis stands in sharp contrast with what deep nets do, which I call local generalization\n(see figure 9.4). The mapping from inputs to outputs performed by a deep net quickly\nstops making sense if new inputs differ even slightly from what the net saw at training\ntime. Consider, for instance, the problem of learning the appropriate launch parame-\nters to get a rocket to land on the moon. If you used a deep net for this task and trained\nit using supervised learning or reinforcement learnin"}
{"text": "g, you’d have to feed it thousands\nor even millions of launch trials: you’d need to expose it to a dense sampling of the input\nspace, in order for it to learn a reliable mapping from input space to output space. In\ncontrast, as humans we can use our power of abstraction to come up with physical mod-\nels—rocket science—and derive an exact solution that will land the rocket on the moon\nin one or a few trials. Similarly, if you developed a deep net controlling a human body,\nand you wanted it to lea"}
{"text": "rn to safely navigate a city without getting hit by cars, the net\nwould have to die many thousands of times in various situations until it could infer that\ncars are dangerous, and develop appropriate avoidance behaviors. Dropped into a new\ncity, the net would have to relearn most of what it knows. On the other hand, humans\nare able to learn safe behaviors without having to die even once—again, thanks to our\npower of abstract modeling of hypothetical situations.\nThe same set of\ndata points\nor exp"}
{"text": "erience\nLocal generalization: Extreme generalization:\ngeneralization power of generalization power Figure 9.4 Local generalization\npattern recognition achieved via abstraction\nvs. extreme generalization\nand reasoning\nIn short, despite our progress on machine perception, we’re still far from human-\nlevel AI. Our models can only perform local generalization, adapting to new situa-\ntions that must be similar to past data, whereas human cognition is capable of\nLicensed to <null>\nThe limitations of d"}
{"text": "eep learning 329\nextreme generalization, quickly adapting to radically novel situations and planning\nfor long-term future situations.\n9.2.3 Wrapping up\nHere’s what you should remember: the only real success of deep learning so far has\nbeen the ability to map space X to space Y using a continuous geometric transform,\ngiven large amounts of human-annotated data. Doing this well is a game-changer for\nessentially every industry, but it’s still a long way from human-level AI.\nTo lift some of the limi"}
{"text": "tations we have discussed and create AI that can compete\nwith human brains, we need to move away from straightforward input-to-output map-\npings and on to reasoning and abstraction. A likely appropriate substrate for abstract\nmodeling of various situations and concepts is that of computer programs. We said\npreviously that machine-learning models can be defined as learnable programs; cur-\nrently we can only learn programs that belong to a narrow and specific subset of all\npossible programs. But w"}
{"text": "hat if we could learn any program, in a modular and reusable\nway? Let’s see in the next section what the road ahead may look like.\nLicensed to <null>\n330 CHAPTER 9 Conclusions\n9.3 The future of deep learning\nThis is a more speculative section aimed at opening horizons for people who want to\njoin a research program or begin doing independent research. Given what we know of\nhow deep nets work, their limitations, and the current state of the research landscape,\ncan we predict where things are heade"}
{"text": "d in the medium term? Following are some\npurely personal thoughts. Note that I don’t have a crystal ball, so a lot of what I antici-\npate may fail to become reality. I’m sharing these predictions not because I expect\nthem to be proven completely right in the future, but because they’re interesting and\nactionable in the present.\nAt a high level, these are the main directions in which I see promise:\n Models closer to general-purpose computer programs, built on top of far richer primi-\ntives than "}
{"text": "the current differentiable layers. This is how we’ll get to reasoning and\nabstraction, the lack of which is the fundamental weakness of current models.\n New forms of learning that make the previous point possible, allowing models to move\naway from differentiable transforms.\n Models that require less involvement from human engineers. It shouldn’t be your job to\ntune knobs endlessly.\n Greater, systematic reuse of previously learned features and architectures, such as meta-\nlearning systems usin"}
{"text": "g reusable and modular program subroutines.\nAdditionally, note that these considerations aren’t specific to the sort of supervised\nlearning that has been the bread and butter of deep learning so far—rather, they’re\napplicable to any form of machine learning, including unsupervised, self-supervised,\nand reinforcement learning. It isn’t fundamentally important where your labels come\nfrom or what your training loop looks like; these different branches of machine learn-\ning are different facets of t"}
{"text": "he same construct. Let’s dive in.\n9.3.1 Models as programs\nAs noted in the previous section, a necessary transformational development that we\ncan expect in the field of machine learning is a move away from models that perform\npurely pattern recognition and can only achieve local generalization, toward models capa-\nble of abstraction and reasoning that can achieve extreme generalization. Current AI pro-\ngrams that are capable of basic forms of reasoning are all hardcoded by human\nprogrammers: for"}
{"text": " instance, software that relies on search algorithms, graph manipula-\ntion, and formal logic. In DeepMind’s AlphaGo, for example, most of the intelligence\non display is designed and hardcoded by expert programmers (such as Monte Carlo\nTree Search); learning from data happens only in specialized submodules (value net-\nworks and policy networks). But in the future, such AI systems may be fully learned,\nwith no human involvement.\nWhat path could make this happen? Consider a well-known type of netwo"}
{"text": "rk: RNNs.\nIt’s important to note that RNNs have slightly fewer limitations than feedforward net-\nworks. That’s because RNNs are a bit more than mere geometric transformations:\nLicensed to <null>\nThe future of deep learning 331\nthey’re geometric transformations repeatedly applied inside a for loop. The temporal for\nloop is itself hardcoded by human developers: it’s a built-in assumption of the net-\nwork. Naturally, RNNs are still extremely limited in what they can represent, primarily\nbecause eac"}
{"text": "h step they perform is a differentiable geometric transformation, and they\ncarry information from step to step via points in a continuous geometric space (state\nvectors). Now imagine a neural network that’s augmented in a similar way with pro-\ngramming primitives—but instead of a single hardcoded for loop with hardcoded\ngeometric memory, the network includes a large set of programming primitives that\nthe model is free to manipulate to expand its processing function, such as if\nbranches, while st"}
{"text": "atements, variable creation, disk storage for long-term memory,\nsorting operators, advanced data structures (such as lists, graphs, and hash tables),\nand many more. The space of programs that such a network could represent would be\nfar broader than what can be represented with current deep-learning models, and\nsome of these programs could achieve superior generalization power.\nWe’ll move away from having, on one hand, hardcoded algorithmic intelligence\n(handcrafted software) and, on the other ha"}
{"text": "nd, learned geometric intelligence (deep\nlearning). Instead, we’ll have a blend of formal algorithmic modules that provide rea-\nsoning and abstraction capabilities, and geometric modules that provide informal\nintuition and pattern-recognition capabilities. The entire system will be learned with\nlittle or no human involvement.\nA related subfield of AI that I think may be about to take off in a big way is program\nsynthesis, in particular neural program synthesis. Program synthesis consists of auto"}
{"text": "-\nmatically generating simple programs by using a search algorithm (possibly genetic\nsearch, as in genetic programming) to explore a large space of possible programs.\nThe search stops when a program is found that matches the required specifications,\noften provided as a set of input-output pairs. This is highly reminiscent of machine\nlearning: given training data provided as input-output pairs, we find a program that\nmatches inputs to outputs and can generalize to new inputs. The difference is th"}
{"text": "at\ninstead of learning parameter values in a hardcoded program (a neural network), we\ngenerate source code via a discrete search process.\nI definitely expect this subfield to see a wave of renewed interest in the next few\nyears. In particular, I expect the emergence of a crossover subfield between deep\nlearning and program synthesis, where instead of generating programs in a general-\npurpose language, we’ll generate neural networks (geometric data-processing flows)\naugmented with a rich set of a"}
{"text": "lgorithmic primitives, such as for loops and many oth-\ners (see figure 9.5). This should be far more tractable and useful than directly gener-\nating source code, and it will dramatically expand the scope of problems that can be\nsolved with machine learning—the space of programs that we can generate automati-\ncally, given appropriate training data. Contemporary RNNs can be seen as a prehis-\ntoric ancestor of such hybrid algorithmic-geometric models.\nLicensed to <null>\n332 CHAPTER 9 Conclusions\nMo"}
{"text": "dular task-level program\nlearned on the fly to solve\na specific task Data and\nfeedback\nGeometric Algorithmic Task #002456\nFigure 9.5 A learned program relying\nsubroutine subroutine\nActions on both geometric primitives (pattern\nGeometric Algorithmic recognition, intuition) and algorithmic\nsubroutine subroutine primitives (reasoning, search,\nmemory)\n9.3.2 Beyond backpropagation and differentiable layers\nIf machine-learning models become more like programs, then they will mostly no lon-\nger be diff"}
{"text": "erentiable—these programs will still use continuous geometric layers as sub-\nroutines, which will be differentiable, but the model as a whole won’t be. As a result,\nusing backpropagation to adjust weight values in a fixed, hardcoded network can’t be\nthe method of choice for training models in the future—at least, it can’t be the entire\nstory. We need to figure out how to train non-differentiable systems efficiently. Cur-\nrent approaches include genetic algorithms, evolution strategies, certain r"}
{"text": "einforce-\nment-learning methods, and alternating direction method of multipliers (ADMM).\nNaturally, gradient descent isn’t going anywhere; gradient information will always be\nuseful for optimizing differentiable parametric functions. But our models will become\nincreasingly more ambitious than mere differentiable parametric functions, and thus\ntheir automatic development (the learning in machine learning) will require more than\nbackpropagation.\nIn addition, backpropagation is end to end, which is"}
{"text": " a great thing for learning\ngood chained transformations but is computationally inefficient because it doesn’t\nfully take advantage of the modularity of deep networks. To make something more\nefficient, there’s one universal recipe: introduce modularity and hierarchy. So we can\nmake backpropagation more efficient by introducing decoupled training modules\nwith a synchronization mechanism between them, organized in a hierarchical fashion.\nThis strategy is somewhat reflected in DeepMind’s recent wor"}
{"text": "k on synthetic gradients.\nI expect more along these lines in the near future. I can imagine a future where mod-\nels that are globally non-differentiable (but feature differentiable parts) are trained—\ngrown—using an efficient search process that doesn’t use gradients, whereas the dif-\nferentiable parts are trained even faster by taking advantage of gradients using a more\nefficient version of backpropagation.\n9.3.3 Automated machine learning\nIn the future, model architectures will be learned rath"}
{"text": "er than be handcrafted by engi-\nneer-artisans. Learning architectures goes hand in hand with the use of richer sets of\nprimitives and program-like machine-learning models.\nLicensed to <null>\nThe future of deep learning 333\nCurrently, most of the job of a deep-learning engineer consists of munging data\nwith Python scripts and then tuning the architecture and hyperparameters of a deep\nnetwork at length to get a working model—or even to get a state-of-the-art model, if\nthe engineer is that ambitiou"}
{"text": "s. Needless to say, that isn’t an optimal setup. But AI can\nhelp. Unfortunately, the data-munging part is tough to automate, because it often\nrequires domain knowledge as well as a clear, high-level understanding of what the\nengineer wants to achieve. Hyperparameter tuning, however, is a simple search proce-\ndure; and in that case we know what the engineer wants to achieve: it’s defined by the\nloss function of the network being tuned. It’s already common practice to set up basic\nAutoML systems t"}
{"text": "hat take care of most model knob tuning. I even set up my own, years\nago, to win Kaggle competitions.\nAt the most basic level, such a system would tune the number of layers in a stack,\ntheir order, and the number of units or filters in each layer. This is commonly done\nwith libraries such as Hyperopt, which we discussed in chapter 7. But we can also be\nfar more ambitious and attempt to learn an appropriate architecture from scratch,\nwith as few constraints as possible: for instance, via reinforc"}
{"text": "ement learning or genetic\nalgorithms.\nAnother important AutoML direction involves learning model architecture jointly\nwith model weights. Because training a new model from scratch every time we try a\nslightly different architecture is tremendously inefficient, a truly powerful AutoML\nsystem would evolve architectures at the same time the features of the model were\nbeing tuned via backpropagation on the training data. Such approaches are begin-\nning to emerge as I write these lines.\nWhen this sta"}
{"text": "rts to happen, the jobs of machine-learning engineers won’t disap-\npear—rather, engineers will move up the value-creation chain. They will begin to put\nmuch more effort into crafting complex loss functions that truly reflect business goals\nand understanding how their models impact the digital ecosystems in which they’re\ndeployed (for example, the users who consume the model’s predictions and generate\nthe model’s training data)—problems that only the largest companies can afford to\nconsider at pr"}
{"text": "esent.\n9.3.4 Lifelong learning and modular subroutine reuse\nIf models become more complex and are built on top of richer algorithmic primitives,\nthen this increased complexity will require higher reuse between tasks, rather than\ntraining a new model from scratch every time we have a new task or a new dataset.\nMany datasets don’t contain enough information for us to develop a new, complex\nmodel from scratch, and it will be necessary to use information from previously\nencountered datasets (much as"}
{"text": " you don’t learn English from scratch every time you\nopen a new book—that would be impossible). Training models from scratch on every\nnew task is also inefficient due to the large overlap between the current tasks and pre-\nviously encountered tasks.\nLicensed to <null>\n334 CHAPTER 9 Conclusions\nA remarkable observation has been made repeatedly in recent years: training the\nsame model to do several loosely connected tasks at the same time results in a model\nthat’s better at each task. For instance"}
{"text": ", training the same neural machine-translation\nmodel to perform both English-to-German translation and French-to-Italian transla-\ntion will result in a model that’s better at each language pair. Similarly, training an\nimage-classification model jointly with an image-segmentation model, sharing the\nsame convolutional base, results in a model that’s better at both tasks. This is fairly\nintuitive: there’s always some information overlap between seemingly disconnected\ntasks, and a joint model has ac"}
{"text": "cess to a greater amount of information about each\nindividual task than a model trained on that specific task only.\nCurrently, when it comes to model reuse across tasks, we use pretrained weights for\nmodels that perform common functions, such as visual feature extraction. You saw\nthis in action in chapter 5. In the future, I expect a generalized version of this to be\ncommonplace: we’ll use not only previously learned features (submodel weights) but\nalso model architectures and training procedure"}
{"text": "s. As models become more like pro-\ngrams, we’ll begin to reuse program subroutines like the functions and classes found in\nhuman programming languages.\nThink of the process of software development today: once an engineer solves a spe-\ncific problem (HTTP queries in Python, for instance), they package it as an abstract,\nreusable library. Engineers who face a similar problem in the future will be able to\nsearch for existing libraries, download one, and use it in their own project. In a similar\nway"}
{"text": ", in the future, metalearning systems will be able to assemble new programs by sift-\ning through a global library of high-level reusable blocks. When the system finds itself\ndeveloping similar program subroutines for several different tasks, it can come up\nwith an abstract, reusable version of the subroutine and store it in the global library\n(see figure 9.6). Such a process will implement abstraction: a necessary component for\nachieving extreme generalization. A subroutine that’s useful across "}
{"text": "different tasks and\ndomains can be said to abstract some aspect of problem solving. This definition of\nabstraction is similar to the notion of abstraction in software engineering. These sub-\nroutines can be either geometric (deep-learning modules with pretrained representa-\ntions) or algorithmic (closer to the libraries that contemporary software engineers\nmanipulate).\nLicensed to <null>\nThe future of deep learning 335\nGlobal library of\nPush\nabstract subroutines\nreusable\nsubroutines Perpetual me"}
{"text": "ta-learner\nGeometric Algorithmic Algorithmic capable of quickly growing\nsubroutine subroutine subroutine\na task-level model\nGeometric Algorithmic Algorithmic Fetch across a variety of tasks Task #002453\nsubroutine subroutine subroutine\nrelevant\nGeometric Algorithmic Algorithmic subroutines\nsubroutine subroutine subroutine Design Data and Task #002454\nchoices feedback\nTask #002455\nModular task-level program\nlearned on the fly to solve\na specific task Data and\nfeedback\nGeometric Algorithmic Task #"}
{"text": "002456\nsubroutine subroutine\nActions\nGeometric Algorithmic\nsubroutine subroutine\nFigure 9.6 A meta-learner capable of quickly developing task-specific models using reusable primitives\n(both algorithmic and geometric), thus achieving extreme generalization\n9.3.5 The long-term vision\nIn short, here’s my long-term vision for machine learning:\n Models will be more like programs and will have capabilities that go far beyond\nthe continuous geometric transformations of the input data we currently work"}
{"text": "\nwith. These programs will arguably be much closer to the abstract mental mod-\nels that humans maintain about their surroundings and themselves, and they\nwill be capable of stronger generalization due to their rich algorithmic nature.\n In particular, models will blend algorithmic modules providing formal reasoning,\nsearch, and abstraction capabilities with geometric modules providing informal\nintuition and pattern-recognition capabilities. AlphaGo (a system that required\na lot of manual softwar"}
{"text": "e engineering and human-made design decisions) pro-\nvides an early example of what such a blend of symbolic and geometric AI could\nlook like.\n Such models will be grown automatically rather than hardcoded by human engi-\nneers, using modular parts stored in a global library of reusable subroutines—a\nlibrary evolved by learning high-performing models on thousands of previous\ntasks and datasets. As frequent problem-solving patterns are identified by the\nmeta-learning system, they will be turned in"}
{"text": "to reusable subroutines—much like\nfunctions and classes in software engineering—and added to the global library.\nThis will achieve abstraction.\n This global library and associated model-growing system will be able to achieve\nsome form of human-like extreme generalization: given a new task or situation,\nLicensed to <null>\n336 CHAPTER 9 Conclusions\nthe system will be able to assemble a new working model appropriate for the\ntask using very little data, thanks to rich program-like primitives that g"}
{"text": "eneralize\nwell, and extensive experience with similar tasks. In the same way, humans can\nquickly learn to play a complex new video game if they have experience with\nmany previous games, because the models derived from this previous experi-\nence are abstract and program-like, rather than a basic mapping between stim-\nuli and action.\n As such, this perpetually learning model-growing system can be interpreted as\nan artificial general intelligence (AGI). But don’t expect any singularitarian robot\na"}
{"text": "pocalypse to ensue: that’s pure fantasy, coming from a long series of profound\nmisunderstandings of both intelligence and technology. Such a critique, how-\never, doesn’t belong in this book.\nLicensed to <null>\nStaying up to date in a fast-moving field 337\n9.4 Staying up to date in a fast-moving field\nAs final parting words, I want to give you some pointers about how to keep learning\nand updating your knowledge and skills after you’ve turned the last page of this book.\nThe field of modern deep le"}
{"text": "arning, as we know it today, is only a few years old, despite\na long, slow prehistory stretching back decades. With an exponential increase in\nfinancial resources and research headcount since 2013, the field as a whole is now\nmoving at a frenetic pace. What you’ve learned in this book won’t stay relevant for-\never, and it isn’t all you’ll need for the rest of your career.\nFortunately, there are plenty of free online resources that you can use to stay up to\ndate and expand your horizons. Here are"}
{"text": " a few.\n9.4.1 Practice on real-world problems using Kaggle\nOne effective way to acquire real-world experience is to try your hand at machine-\nlearning competitions on Kaggle (https://kaggle.com). The only real way to learn is\nthrough practice and actual coding—that’s the philosophy of this book, and Kaggle\ncompetitions are the natural continuation of this. On Kaggle, you’ll find an array of\nconstantly renewed data-science competitions, many of which involve deep learning,\nprepared by companies i"}
{"text": "nterested in obtaining novel solutions to some of their most\nchallenging machine-learning problems. Fairly large monetary prizes are offered to\ntop entrants.\nMost competitions are won using either the XGBoost library (for shallow machine\nlearning) or Keras (for deep learning). So you’ll fit right in! By participating in a few\ncompetitions, maybe as part of a team, you’ll become more familiar with the practical\nside of some of the advanced best practices described in this book, especially hyperpa"}
{"text": "-\nrameter tuning, avoiding validation-set overfitting, and model ensembling.\n9.4.2 Read about the latest developments on arXiv\nDeep-learning research, in contrast with some other scientific fields, takes places com-\npletely in the open. Papers are made publicly and freely accessible as soon as they’re\nfinalized, and a lot of related software is open source. arXiv (https://arxiv.org)—pro-\nnounced “archive” (the X stands for the Greek chi)—is an open-access preprint server\nfor physics, mathematics"}
{"text": ", and computer science research papers. It has become the\ndefacto way to stay up to date on the bleeding edge of machine learning and deep\nlearning. The large majority of deep-learning researchers upload any paper they write\nto arXiv shortly after completion. This allows them to plant a flag and claim a specific\nfinding without waiting for a conference acceptance (which takes months), which is\nnecessary given the fast pace of research and the intense competition in the field. It\nalso allows the "}
{"text": "field to move extremely fast: all new findings are immediately available\nfor all to see and to build on.\nAn important downside is that the sheer quantity of new papers posted every day\non arXiv makes it impossible to even skim them all; and the fact that they aren’t peer\nreviewed makes it difficult to identify those that are both important and high quality.\nLicensed to <null>\n338 CHAPTER 9 Conclusions\nIt’s difficult, and becoming increasingly more so, to find the signal in the noise. Cur-\nrently"}
{"text": ", there isn’t a good solution to this problem. But some tools can help: an auxil-\niary website called arXiv Sanity Preserver (http://arxiv-sanity.com) serves as a\nrecommendation engine for new papers and can help you keep track of new develop-\nments within a specific narrow vertical of deep learning. Additionally, you can use\nGoogle Scholar (https://scholar.google.com) to keep track of publications by your\nfavorite authors.\n9.4.3 Explore the Keras ecosystem\nWith about 200,000 users as of Novembe"}
{"text": "r 2017 and growing fast, Keras has a large\necosystem of tutorials, guides, and related open source projects:\n Your main reference for working with Keras is the online documentation at\nhttps://keras.io. The Keras source code can be found at https://github.com/\nfchollet/keras.\n You can ask for help and join deep-learning discussions on the Keras Slack\nchannel: https://kerasteam.slack.com.\n The Keras blog, https://blog.keras.io, offers Keras tutorials and other articles\nrelated to deep learning."}
{"text": "\n You can follow me on Twitter: @fchollet.\nLicensed to <null>\nFinal words 339\n9.5 Final words\nThis is the end of Deep Learning with Python! I hope you’ve learned a thing or two about\nmachine learning, deep learning, Keras, and maybe even cognition in general. Learn-\ning is a lifelong journey, especially in the field of AI, where we have far more unknowns\non our hands than certitudes. So please go on learning, questioning, and researching.\nNever stop. Because even given the progress made so far,"}
{"text": " most of the fundamental\nquestions in AI remain unanswered. Many haven’t even been properly asked yet.\nLicensed to <null>\nappendix A\nInstalling Keras and its\ndependencies on Ubuntu\nThe process of setting up a deep-learning workstation is fairly involved and consists\nof the following steps, which this appendix will cover in detail:\n1 Install the Python scientific suite—Numpy and SciPy—and make sure you\nhave a Basic Linear Algebra Subprogram (BLAS) library installed so your\nmodels run fast on CPU."}
{"text": "\n2 Install two extras packages that come in handy when using Keras: HDF5 (for\nsaving large neural-network files) and Graphviz (for visualizing neural-\nnetwork architectures).\n3 Make sure your GPU can run deep-learning code, by installing CUDA drivers\nand cuDNN.\n4 Install a backend for Keras: TensorFlow, CNTK, or Theano.\n5 Install Keras.\nIt may seem like a daunting process. In fact, the only difficult part is setting up GPU\nsupport—otherwise, the entire process can be done with a few commands and"}
{"text": "\ntakes only a couple of minutes.\nWe’ll assume you have a fresh installation of Ubuntu, with an NVIDIA GPU avail-\nable. Before you start, make sure you have pip installed and that your package man-\nager is up to date:\n$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install python-pip python-dev\n340\nLicensed to <null>\nInstalling the Python scientific suite 341\nPython 2 vs. Python 3\nBy default, Ubuntu uses Python 2 when it installs Python packages such as python-\npip. If you wish to use"}
{"text": " Python 3 instead, you should use the python3 prefix instead\nof python. For instance:\n$ sudo apt-get install python3-pip python3-dev\nWhen you’re installing packages using pip, keep in mind that by default, it targets\nPython 2. To target Python 3, you should use pip3:\n$ sudo pip3 install tensorflow-gpu\nA.1 Installing the Python scientific suite\nIf you use a Mac, we recommend that you install the Python scientific suite via Ana-\nconda, which you can get at www.continuum.io/downloads. Note that thi"}
{"text": "s won’t\ninclude HDF5 and Graphviz, which you have to install manually. Following are the\nsteps for a manual installation of the Python scientific suite on Ubuntu:\n1 Install a BLAS library (OpenBLAS, in this case), to ensure that you can run fast\ntensor operations on your CPU:\n$ sudo apt-get install build-essential cmake git unzip \\\npkg-config libopenblas-dev liblapack-dev\n2 Install the Python scientific suite: Numpy, SciPy and Matplotlib. This is neces-\nsary in order to perform any kind of machi"}
{"text": "ne learning or scientific computing\nin Python, regardless of whether you’re doing deep learning:\n$ sudo apt-get install python-numpy python-scipy python- matplotlib\n➥python-yaml\n3 Install HDF5. This library, originally developed by NASA, stores large files of\nnumeric data in an efficient binary format. It will allow you to save your Keras\nmodels to disk quickly and efficiently:\n$ sudo apt-get install libhdf5-serial-dev python-h5py\n4 Install Graphviz and pydot-ng, two packages that will let you v"}
{"text": "isualize Keras\nmodels. They aren’t necessary to run Keras, so you could skip this step and\ninstall these packages when you need them. Here are the commands:\n$ sudo apt-get install graphviz\n$ sudo pip install pydot-ng\n5 Install additional packages that are used in some of our code examples:\n$ sudo apt-get install python-opencv\nLicensed to <null>\n342 APPENDIX A Installing Keras and its dependencies on Ubuntu\nA.2 Setting up GPU support\nUsing a GPU isn’t strictly necessary, but it’s strongly recomme"}
{"text": "nded. All the code exam-\nples found in this book can be run on a laptop CPU, but you may sometimes have to wait\nfor several hours for a model to train, instead of mere minutes on a good GPU. If you\ndon’t have a modern NVIDIA GPU, you can skip this step and go directly to section A.3.\nTo use your NVIDIA GPU for deep learning, you need to install two things:\n CUDA—A set of drivers for your GPU that allows it to run a low-level program-\nming language for parallel computing.\n cuDNN—A library of hi"}
{"text": "ghly optimized primitives for deep learning. When using\ncuDNN and running on a GPU, you can typically increase the training speed of\nyour models by 50% to 100%.\nTensorFlow depends on particular versions of CUDA and the cuDNN library. At the\ntime of writing, it uses CUDA version 8 and cuDNN version 6. Please consult the\nTensorFlow website for detailed instructions about which versions are currently rec-\nommended: www.tensorflow.org/install/install_linux.\nFollow these steps:\n1 Download CUDA. For U"}
{"text": "buntu (and other Linux flavors), NVIDIA provides a\nready-to-use package that you can download from https://developer\n.nvidia.com/cuda-downloads:\n$ wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/\n➥\nx86_64/cuda-repo-ubuntu1604_9.0.176-1_amd64.deb\n2 Install CUDA. The easiest way to do so is to use Ubuntu’s apt on this package.\nThis will allow you to easily install updates via apt as they become available:\n$ sudo dpkg -i cuda-repo-ubuntu1604_9.0.176-1_amd64.deb\n$ sudo apt-ke"}
{"text": "y adv --fetch-keys\n➥http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/\n➥x86_64/7fa2af80.pub\n$ sudo apt-get update\n$ sudo apt-get install cuda-8-0\n3 Install cuDNN:\na Register for a free NVIDIA developer account (unfortunately, this is necessary\nin order to gain access to the cuDNN download), and download cuDNN at\nhttps://developer.NVIDIA.com/cudnn (select the version of cuDNN compati-\nble with TensorFlow). Like CUDA, NVIDIA provides packages for different\nLinux flavors—we’ll use "}
{"text": "the version for Ubuntu 16.04. Note that if you’re\nworking with an EC2 install, you won’t be able to download the cuDNN\narchive directly to your instance; instead, download it to your local machine\nand then upload it to your EC2 instance (via scp).\nb Install cuDNN:\n$ sudo dpkg -i dpkg -i libcudnn6*.deb\nLicensed to <null>\nInstalling Keras 343\n4 Install TensorFlow:\na TensorFlow with or without GPU support can be installed from PyPI using\nPip. Here’s the command without GPU support:\n$ sudo pip insta"}
{"text": "ll tensorflow\nb Here’s the command to install TensorFlow with GPU support:\n$ sudo pip install tensorflow-gpu\nA.3 Installing Theano (optional)\nBecause you’ve already installed TensorFlow, you don’t have to install Theano in order\nto run Keras code. But it can sometimes be useful to switch back and forth from\nTensorFlow to Theano when building Keras models.\nTheano can also be installed from PyPI:\n$ sudo pip install theano\nIf you’re using a GPU, then you should configure Theano to use your GPU. You"}
{"text": " can\ncreate a Theano configuration file with this command:\nnano ~/.theanorc\nThen, fill in the file with the following configuration:\n[global]\nfloatX = float32\ndevice = gpu0\n[nvcc]\nfastmath = True\nA.4 Installing Keras\nYou can install Keras from PyPI:\n$ sudo pip install keras\nAlternatively, you can install Keras from GitHub. Doing so will allow you to access the\nkeras/examples folder, which contains many example scripts for you to learn from:\n$ git clone https://github.com/fchollet/keras\n$ cd kera"}
{"text": "s\n$ sudo python setup.py install\nYou can now try to run a Keras script, such as this MNIST example:\npython examples/mnist_cnn.py\nNote that running this example to completion may take a few minutes, so feel free to\nforce-quit it (Ctrl-C) once you’ve verified that it’s working normally.\nAfter you’ve run Keras at least once, the Keras configuration file can be found at\n~/.keras/keras.json. You can edit it to select the backend that Keras runs on: tensorflow,\ntheano, or cntk. Your configuration file"}
{"text": " should like this:\nLicensed to <null>\n344 APPENDIX A Installing Keras and its dependencies on Ubuntu\n{\n\"image_data_format\": \"channels_last\",\n\"epsilon\": 1e-07,\n\"floatx\": \"float32\",\n\"backend\": \"tensorflow\"\n}\nWhile the Keras script examples/mnist_cnn.py is running, you can monitor GPU utili-\nzation in a different shell window:\n$ watch -n 5 NVIDIA-smi -a --display=utilization\nYou’re all set! Congratulations—you can now begin building deep-learning applications.\nLicensed to <null>\nappendix B\nRunning "}
{"text": "Jupyter notebooks\non an EC2 GPU instance\nThis appendix provides a step-by-step guide to running deep-learning Jupyter note-\nbooks on an AWS GPU instance and editing the notebooks from anywhere in your\nbrowser. This is the perfect setup for deep-learning research if you don’t have a\nGPU on your local machine. The original (and up-to-date) version of this guide can\nbe found at https://blog.keras.io.\nB.1 What are Jupyter notebooks?\nWhy run Jupyter notebooks on AWS GPUs?\nA Jupyter notebook is a web "}
{"text": "app that allows you to write and annotate Python code\ninteractively. It’s a great way to experiment, do research, and share what you’re\nworking on.\nMany deep-learning applications are very computationally intensive and can take\nhours or even days when running on a laptop’s CPU cores. Running on a GPU can\nspeed up training and inference by a considerable factor (often 5 to 10 times, when\ngoing from a modern CPU to a single modern GPU). But you may not have access to\na GPU on your local machine. R"}
{"text": "unning Jupyter notebooks on AWS gives you the same\nexperience as running on your local machine, while allowing you to use one or sev-\neral GPUs on AWS. And you only pay for what you use, which can compare favorably\nto investing in your own GPU(s) if you use deep learning only occasionally.\n345\nLicensed to <null>\n346 APPENDIX B Running Jupyter notebooks on an EC2 GPU instance\nB.2 Why would you not want to use Jupyter\non AWS for deep learning?\nAWS GPU instances can quickly become expensive. The on"}
{"text": "e we suggest using costs\n$0.90 per hour. This is fine for occasional use; but if you’re going to run experiments\nfor several hours per day every day, then you’re better off building your own deep-\nlearning machine with a TITAN X or GTX 1080 Ti.\nIn summary, use the Jupyter-on-EC2 setup if you don’t have access to a local GPU or\nif you don’t want to deal with installing Keras dependencies, in particular GPU\ndrivers.If you have a access to a local GPU, we recommend running your models\nlocally, inst"}
{"text": "ead. In that case, use the installation guide in appendix A.\nNOTE You’ll need an active AWS account. Some familiarity with AWS EC2 will\nhelp, but it isn’t mandatory.\nB.3 Setting up an AWS GPU instance\nThe following setup process will take 5 to 10 minutes:\n1 Navigate to the EC2 control panel at https://console.aws.amazon.com/ec2/v2,\nand click the Launch Instance link (see figure B.1).\nFigure B.1 The EC2\ncontrol panel\n2 Select AWS Marketplace (see figure B.2), and search for “deep learning” in the"}
{"text": "\nsearch box. Scroll down until you find the AMI named Deep Learning AMI\nUbuntu Version (see figure B.3); select it.\nFigure B.2 The EC2 AMI Marketplace\nLicensed to <null>\nSetting up an AWS GPU instance 347\nFigure B.3 The EC2 Deep Learning AMI\n3 Select the p2.xlarge instance (see figure B.4). This instance type provides access\nto a single GPU and costs $0.90 per hour of usage (as of March 2017).\nFigure B.4 The p2.xlarge instance\n4 You can keep the default configuration for the steps Configure Inst"}
{"text": "ance, Add\nStorage, and Add Tags, but you’ll customize the Configure Security Group step.\nCreate a custom TCP rule to allow port 8888 (see figure B.5): this rule can be\nallowed either for your current public IP (such as that of your laptop) or for any\nIP (such as 0.0.0.0/0) if the former isn’t possible. Note that if you allow port\n8888 for any IP, then literally anyone will be able to listen to that port on your\ninstance (which is where you’ll run IPython notebooks). You’ll add password\nprotectio"}
{"text": "n to the notebooks to mitigate the risk of random strangers modifying\nthem, but that may be pretty weak protection. If at all possible, you should con-\nsider restricting access to a specific IP. But if your IP address changes constantly,\nthen that isn’t a practical choice. If you’re going to leave access open to any IP,\nthen remember not to leave sensitive data on the instance.\nLicensed to <null>\n348 APPENDIX B Running Jupyter notebooks on an EC2 GPU instance\nFigure B.5 Configure a new security "}
{"text": "group.\nNOTE At the end of the launch process, you’ll be asked if you want to create\nnew connection keys or if you want to reuse existing keys. If you’ve never used\nEC2 before, create new keys and download them.\n5 To connect to your instance, select it on the EC2 control panel, click the Con-\nnect button, and follow the instructions (see figure B.6). Note that it may take a\nfew minutes for the instance to boot up. If you can’t connect at first, wait a bit\nand try again.\nFigure B.6 Connection inst"}
{"text": "ructions\n6 Once you’re logged in to the instance via SSH, create an ssl directory at the root\nof the instance, and cd to it (not mandatory, but cleaner):\n$ mkdir ssl\n$ cd ssl\nLicensed to <null>\nSetting up an AWS GPU instance 349\n7 Create a new SSL certificate using OpenSSL, and create cert.key and cert.pem\nfiles in the current ssl directory:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout \"cert.key\" -out\n➥\n\"cert.pem\" -batch\n2.3.1 Configuring Jupyter\nBefore you use Jupyter, you need"}
{"text": " to touch up its default configuration. Follow these\nsteps:\n1 Generate a new Jupyter config file (still on the remote instance):\n$ jupyter notebook --generate-config\n2 Optionally, you can generate a Jupyter password for your notebooks. Because\nyour instance may be configured to be accessible from any IP (depending on\nthe choice you made when configuring the security group), it’s better to restrict\naccess to Jupyter via a password. To generate a password, open an IPython shell\n(ipython command) a"}
{"text": "nd run the following:\nfrom IPython.lib import passwd\npasswd()\nexit\n3 The passwd() command will ask you to enter and verify a password. After you\ndo, it will display a hash of your password. Copy that hash—you’ll need it soon.\nIt looks something like this:\nsha1:b592a9cf2ec6:b99edb2fd3d0727e336185a0b0eab561aa533a43\nNote that this is a hash of the word password, which isn’t a password you should\nbe using.\n4 Use vi (or your favorite available text editor) to edit the Jupyter config file:\n$ vi ~/.jup"}
{"text": "yter/jupyter_notebook_config.py\n5 The config file is a Python file with all lines commented out. Insert the follow-\ning lines of Python code at the beginning of the file:\nPath to the private key you Serves the\ngenerated for the certificate notebooks locally\nPath to the certificate Inline figure when\nyou generated Getstheconfigobject using Matplotlib\nc = get_config()\nc.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem'\nc.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key'\nc.IPKernelApp.pylab = 'i"}
{"text": "nline'\nc.NotebookApp.ip = '*'\nc.NotebookApp.open_browser = False\nc.NotebookApp.password =\n➥\n'sha1:b592a9cf2ec6:b99edb2fd3d0727e336185a0b0eab561aa533a43'\nDon’t open a browser window by Password hash you\ndefault when using notebooks. generated earlier\nLicensed to <null>\n350 APPENDIX B Running Jupyter notebooks on an EC2 GPU instance\nNOTE In case you aren’t accustomed to using vi, remember that you need to\npress I to begin inserting content. When you’re finished, press Esc, enter :wq,\nand press Ent"}
{"text": "er to quit vi and save your changes (:wq stands for write-quit).\nB.4 Installing Keras\nYou’re almost ready to start using Jupyter. But first, you need to update Keras. A ver-\nsion of Keras is preinstalled on the AMI, but it may not necessarily be up to date. On\nthe remote instance, run this command:\n$ sudo pip install keras --upgrade\nBecause you’ll probably use Python 3 (the notebooks provided with this book use\nPython 3), you should also update Keras using pip3:\n$ sudo pip3 install keras --upgra"}
{"text": "de\nIf there’s an existing Keras configuration file on the instance (there shouldn’t be, but\nthe AMI may have changed since I wrote this), you should delete it, just in case. Keras\nwill re-create a standard configuration file when it’s launched for the first time.\nIf the following code snippet returns an error saying that the file doesn’t exist, you\ncan ignore it:\n$ rm -f ~/.keras/keras.json\nB.5 Setting up local port forwarding\nIn a shell on your local machine (not the remote instance), start for"}
{"text": "warding your local\nport 443 (the HTTPS port) to port 8888 of the remote instance:\n$ sudo ssh -i awsKeys.pem -L local_port:local_machine:remote_port remote_machine\nIn my case, it would look like the following:\n$ sudo ssh -i awsKeys.pem -L\n➥\n443:127.0.0.1:8888 ubuntu@ec2-54-147-126-214.compute-1.amazonaws.com\nB.6 Using Jupyter from your local browser\nOn the remote instance, clone the GitHub repository containing the Jupyter note-\nbooks associated with this book:\n$ git clone https://github.com/fcho"}
{"text": "llet/deep-learning-with-python-notebooks.git\ncd deep-learning-with-python-notebooks\nStart Jupyter Notebook by running this command, still on the remote instance:\n$ jupyter notebook\nThen, in your local browser, navigate to the local address you’re forwarding to the\nremote notebook process (https://127.0.0.1). Be sure you use HTTPS in the address,\nor you’ll get an SSL error.\nLicensed to <null>\nUsing Jupyter from your local browser 351\nYou should see the safety warning shown in figure B.7. This war"}
{"text": "ning is due to the\nfact that the SSL certificate you generated isn’t verified by a trusted authority (obvi-\nously—you generated your own). Click Advanced, and proceed to navigate.\nFigure B.7 A safety warning you can ignore\nYou should be prompted to enter your Jupyter password. You’ll then arrive at the Jupy-\nter dashboard (see figure B.8).\nFigure B.8 The Jupyter dashboard\nChoose New > Notebook to get started (see fig-\nure B.9). You can use the Python version of your\nchoice. All set!\nFigure B.9 C"}
{"text": "reate a new notebook.\nLicensed to <null>\nLicensed to <null>\nindex\nSymbols architecture of networks B\n319–322\n* operator 40 convnets 321 Babbage, Charles 4\n+ operator 99 densely connected networks backend engine, Keras 62\n319–320 backpropagation algorithm\nNumerics recurrent neural networks 11, 51–52, 246\n321–322 backward pass 49\narchitecture patterns of bag-of-2-grams 181\n0D tensors. See scalars\nmodels 260–263 bag-of-3-grams 181\n1D convolutions 225–227\nbatch normalization bag-of-words 181\n1D pool"}
{"text": "ing, for sequence 260–261 Baidu 22\ndata 226 depthwise separable batch axis 35\n1D tensors. See vectors convolution 261–263 batch normalization 22\n2D tensors. See matrices residual connections BatchNormalization layer 260\n3D embeddings 253 235–236, 244–246\nbatch_size 211\narrow of time 100\nBengio, Yoshua 17, 188, 202\nA artificial intelligence 3–13, bidirectional layers 207\n270\nbinary classifications 68–77,\nactivation 160 expectations for 13 96\nhistory of 12–13\nactivation functions 22 binary crossen"}
{"text": "tropy 60, 72\narXiv preprint server 271,\nad targeting 12 black boxes 160\n337–338\nadd_loss method 302 BLAS (Basic Linear Algebra\nassembling datasets 111–112\nADMM (alternating direction Subprograms) 39, 340\naugmented intelligence 270\nmethod of border effects 125–126\naugmenting data 138–142\nmultipliers) 332 broadcasting operations\nfeature extraction with\nadversarial networks 310 39–40\n149–152\nSee also generative deep browsers, local, using Jupyter\nfeature extraction without\nlearning; generative from"}
{"text": " 350–351\n147–149\nadversarial networks\nautoencoders. See VAEs (varia-\nadversary network 305 tional autoencoders) C\naffine transformations 72 AutoML systems 333\nAmazon Web Services. See AWS autonomous driving 12 callbacks, writing 251–252\nAMD 20 AWS (Amazon Web Services) CAM (class activation map)\nAnalytical Engine 4 GPU instances 172\nannotations 94, 96 running Jupyter on 350 categorical encoding 79\napplication program interfaces. setting up 346–350 categorical_crossentropy\nSee functional APIs usi"}
{"text": "ng Jupyter on 346 function 53, 80, 83\n353\nLicensed to <null>\n354 INDEX\nCERN 17 visualizing convnet learning higher-dimensional\nchannels axis 123 160–176 tensors 32\nchannels-first convention 36 convnet filters 167–172 image data 36–37\nchannels-last convention 36 heatmaps of class key attributes of tensors\ncharacter-level neural language activation 172–176 32–33\nmodel 272 intermediate activations manipulating tensors in\nCiresan, Dan 17, 20 160–166 Numpy 34\nclass activation, visualizing heat- convn"}
{"text": "ets filters 160 matrices (2D tensors)\nmaps of 172–176 convolution base 143–144 31–32\nclasses 27, 96 convolution operations scalars (0D tensors) 31\nclassification 60 122–127 sequence data 35–36\ncloud, running jobs in 66 border effects 125–126 timeseries data 35–36\nvector data 35\nclustering 94 convolution strides 127\nvectors (1D tensors) 31\nCNNs. See convnets (convolu- paddling 125–126\nvideo data 37\ntional neural networks) convolution strides 127\nshuffling 98, 100\nCNTK (Microsoft Cognitive convolu"}
{"text": "tions\nsplitting 98\nToolkit) 62 1D 225–226\ntokenizing 189–190\ncompilation step 29 depthwise separable\ntransformations 10\nconcept vectors, for editing 261–263\ntransforming 6\nimages 297–298 Cortes, Corinna 15 vectorization 101\nconditioning data 272 crossentropy 73 data augmentation 130\nConnect button, EC2 control CUDA drivers 20, 340, 342 data distillation 28\npanel 348 cuDNN library 62, 340, 342 data points 27, 220\nconnections, residual 244–246 curvature 48 data representativeness 100\ncontent loss "}
{"text": "288 data tensors, examples of 35\nConv1D layer 226 D datasets, assembling 111–112\nConv2D layer 120, 122, 124 DCGANs (deep convolutional\nconvnets (convolutional neural data GANs)\nnetworks) 321 augmenting 138–142 overview 307\n1D 226–227 feature extraction with training 310–312\ncombining with recurrent 149–152 decision boundaries 15\nneural networks feature extraction without decision trees 16–17\n228–231 147–149 deep convnets 266\noverview 120–129 batches of 34–35 deep learning 3, 6–13\nconvolution ope"}
{"text": "rations generating sequence data accomplishments of 11–12\n122–127 272 achievements of 315–316\ndemocratization of 23\nmax-pooling operations heterogeneous 101\nenabling technologies\n127–129 homogenous 101\n317–318\nprocessing sequences with learning representations\nfuture of 23–24, 330–336\n225–231 from 6–8\nautomated machine\ntraining on small datasets missing 102\nlearning 332–333\n130–142 preparing 112–113\nlifelong learning 333–335\nbuilding networks for character-level LSTM\nlong-term vision 335–336\n133"}
{"text": "–135 text generation 274\nmodels as programs\ndata preprocessing for recurrent neural\n330–332\n135–138 networks 210–212\nmodular subroutine reuse\nrelevance for small-data preprocessing 101–103, 333–335\nproblems 130–131 135–138 geometric interpretation of\nusing data augmentation redundancy 100 44–45\n138–142 representations for neural hardware and 20–21\nusing pretrained convnets networks 31–37 investment in 22–23\n143–159 3D tensors 32 limitations of 325–329\nfeature extraction data batches 34–35 local "}
{"text": "generalization vs.\n143–152 examples of data tensors extreme generalization\nfine-tuning 152–158 35 327–329\nLicensed to <null>\nINDEX 355\ndeep learning, limitations of element-wise operations 38–39 G\n(continued) embedding layers, learning\nrisk of anthropomorphiz- word embeddings Gal, Yarin 216\ning machine-learning with 185–187 GANs (generative adversarial\nmodels 325–327 engineering features 101–103 networks) 296, 305\noverview 9–11, 316–317 ensembling models 264–266 gated recurrent unit layers.\nposs"}
{"text": "ible uses of 322–324 epochs 53, 74, 76, 82 See GRU layers\nreasons for interest in 20–24 epsilon 300 Gatys, Leon 287\nSee also generative deep evaluating models 192–195 Gaussian distribution 307\nlearning evaluation protocols, choosing generalization 104, 327–329\nDeep Learning AMI, EC2 66 100, 112 generative deep learning\nDeepDream technique expert systems 4 generating images with varia-\n280–286 extreme generalization, local tional autoencoders\noverview 280 generalization vs. 296–304\nimplementing i"}
{"text": "n Keras 327–329 concept vectors for image\n281–286 extreme inception 244 editing 297–298\nDeepMind, Google 22, 95 sampling from latent\nDense layers 28, 38, 53, 69–70, F spaces of images\n122, 187, 213, 321 296–297\ndense sampling 328 feature engineering 16, 18 generating text with LSTM\ndensely connected networks feature learning 101–103 271–279\n319–320 feature maps 123, 129 generating sequence data\ndepthwise separable features 272\nconvolution 321 engineering 101–103 history of generative recur-\nderi"}
{"text": "vatives, defined 47–48 extracting 143–152 rent networks 271\ndeveloper account, NVIDIA with data augmentation implementing character-\n342 149–152 level LSTM text\ndigital assistants 12 without data augmentation generation 274–279\ndimension 31 147–149 sampling strategy 272–274\ndimensionality 31, 94 features axis 35 generative adversarial\ndirected acyclic graphs of feedforward networks 196, 202 networks 305–313\nlayers 242–246 Feynman, Richard 316 adversarial networks 310\ninception modules 242–244 fi"}
{"text": "ll_mode 139 discriminator networks\nresidual connections filter visualizations 172 307–309\n244–246 filters generator networks\ndiscriminator networks overview 124 307–308\noverview 305 convnets, visualizing 167–172 schematic implementa-\nimplementing 307–309 fine-tuning 152–158 tion of 307\ndistance function 288 fit method 29 training DCGANs 310–312\ndot operations 40–42 fit_generator method 136 neural style transfer 287–295\ndot product 38 Flatten layer 133 content loss 288\ndownloading Flickr 21 in Ke"}
{"text": "ras 289–295\nGloVe word embeddings 190 float32 29, 101, 173 style loss 288–289\nraw text 189 for loop 38, 197, 331 generative deep learning,\nDropout layer 140 forward pass 46 DeepDream 280–286\ndtype attribute 32–33 freezing layers 150 generative recurrent networks,\nfully connected layers 58 history of 271\nE functional APIs, Keras 234–248 generator function 211, 230\ndirected acyclic graphs of generator networks,\nEarlyStopping callbacks 250 layers 242–246 implementing 307–308\nEck, Douglas 271 layer "}
{"text": "weight sharing 246–247 geometric interpretation\nediting images, concept vectors models as layers 247–248 of deep learning 44–45\nfor 297–298 multi-input models 238–240 of tensor operations 43–44\nEigen 62 multi-output models 240–242 geometric space 316\nLicensed to <null>\n356 INDEX\nGloVe (Global Vectors for Word Hinton, Geoffrey 17, 109 Keras 343–344, 350\nRepresentation) Hochreiter, Sepp 202 OpenBLAS 341\ndownloading word hold-out validation 98–99 OpenCV 341\nembeddings 190 homogenous data 101 Python"}
{"text": " scientific suite on\nloading embeddings in horizontal_flip 139 Ubuntu 341\nmodels 191 HSV (hue-saturation-value) TensorFLow 343\nGoodfellow, Ian 305 format 6 Theano on Ubuntu 343\nGPUs (graphics processing Hyperas library 264 Intel 22\nunits) Hyperopt 264 intermediate activations,\ninstalling on AWS 350 hyperparameters visualizing 160–166\ninstances, on AWS 346–350 optimizing 263–264 investments in deep learning\noverview 20 overview 98 22–23\nselecting 66–67 tuning 114–115 ipython command 349\nsupport, "}
{"text": "setting up on hyperplanes 15\nUbuntu 342–343 hypothesis space 59, 72, 319 J\ngradient boosting machines\n16–17 I joint feature learning 18\ngradient descent 167 Jupyter notebooks 65\ngradient propagation 22 IDSIA 17 configuring 349–350\ngradient-based optimization ILSVRC (ImageNet Large Scale overview 345\n46–52 Visual Recognition running on AWS GPU\nbackpropagation algorithm Challenge) 21 instances\n51–52 image classification 11 installing Keras 350\nderivatives, defined 47–48 image data 36–37, 319 setti"}
{"text": "ng up AWS GPU\ngradients 48 image segmentation 94 instances 346–350\nstochastic gradient descent image-classification task 262 setting up local port\n48–51 ImageDataGenerator class 135, forwarding 350\ngradients 48 139, 147 using from local browsers\nGram matrix 288 ImageNet class 17, 145, 281 350–351\ngraphs, directed acyclic of images using on AWS 346\nlayers 242–246 editing concept vectors for\nGraphviz 257, 340–341 297–298 K\nGraves, Alex 271 flipping 139\ngreedy sampling 272 generating with variation"}
{"text": "al K80, NVIDIA 21\nground-truth 96 autoencoders 296–304 Kaggle platform\nGRU (gated recurrent unit) concept vectors for image overview 16, 19, 266\nlayers 202–204, 215 editing 297–298 practice on real-world prob-\noverview 296 lems using 337\nH sampling from latent spaces Keras API 234–248\nof 296–297 directed acyclic graphs of\ninception blocks 59 layers 242–246\nhandwriting transcription 11\nInception modules 235, exploring 338\nhardware 20–21\n242–244, 281 functional APIs 236–238\nhash collisions 183 inc"}
{"text": "lude_top argument 145 implementing DeepDream\nHDF5 340 information bottlenecks 80, 84 in 281–286\nheatmaps information distillation installing 343–344, 350\nof class activation, visualizing pipeline 166 layer weight sharing 246–247\n172–176 information leaks 97 models as layers 247–248\noverview 160 initial state 196 multi-input models 238–240\nheight_shift range 139 input data 6–7, 58, 95 multi-output models\nheterogeneous data 101 input_shape argument 145 240–242\nhidden layers 77 input_tensor 237 neu"}
{"text": "ral style transfer in\nhidden unit 70 installing 289–295\nhierarchical representation CUDA 342 recurrent layers in 198–202\nlearning 8 cuDNN 342 using callbacks 249–259\nLicensed to <null>\nINDEX 357\nKeras framework 61–64 LeNet network 15 history of 14–19\nCNTK 62 LHC (Large Hadron Collider) decision trees 16–17\ndeveloping with 62–64 17 gradient boosting\nrunning 66 lifelong learning 333–335 machines 16–17\nTensorFlow 62 linear transformations 72 kernel methods 15–16\nTheano 62 local generalization, extr"}
{"text": "eme neural networks 14–15, 17\nKeras library 27 generalization vs. probabilistic modeling 14\nkeras.applications module 145 327–329 random forests 16–17\nkeras.callbacks module 249, local port forwarding, setting learning representations\n251 up 350 from data 6–8\nkeras.preprocessing.image 135 logistic regression algorithm models, risk of anthropo-\nkernel methods 15–16 85 morphizing 325–327\nkernel trick 15 logreg (logistic regression) 14 overfitting and underfitting\nK-fold validation, iterated with l"}
{"text": "ogs argument 251 104–110\nshuffling 99–100 lookback parameter 230 adding dropout 109–110\nKingma, Diederik P. 298 lookback timesteps 210 adding weight\nKrizhevsky, Alex 20 loss function 10, 29, 58, 60, 113 regularization 107–108\nloss plateau 250 reducing network size\nloss value 96 104–107\nL\nLovelace, Ada 5 workflow of 111–115,\nLSTM (long short-term 318–319\nL1 regularization 107 memory) 58, 202–204 assembling datasets\nL2 regularization 107 generating text with 271–279 111–112\nlabel 27, 96 generating"}
{"text": " sequence data choosing evaluation\nLambda layer 301 272 protocol 112\nlanguage models history of generative recur- choosing measure of\nsampling from 276–278 rent networks 271\nsuccess 112\ntraining 276–278 implementing character-\ndefining problems\nlast-layer activation 113 level text generation\n111–112\nlatent spaces 274–279\ndeveloping models\nof images, sampling from sampling strategy 272–274 113–114\n296–297 overview 20, 269 preparing data 112–113\noverview 270 regularizing models\nlayer compatibility"}
{"text": " 59 M 114–115\nlayered representations tuning hyperparameters\nlearning 8 machine learning 114–115\nlayers automated 332–333 See also non-machine learn-\ndifferentiable 332 basic approaches 213–215 ing\ndirected acyclic graphs of branches of 94–96 MAE (mean absolute error)\n242–246 reinforcement learning 87, 91, 212, 320\ninception modules 95–96 Matplotlib library 33, 74, 349\n242–244 self-supervised learning matrices (2D tensors) 31–32\nresidual connections 94–95 maximum operation 40\n244–246 supervised "}
{"text": "learning 94 max-pooling operations\nfreezing 150 unsupervised learning 94 127–129\nmodels as 247–248 data preprocessing 101–103 MaxPooling1D layer 226, 231\noverview 8, 58–59 deep learning vs. 17–18 MaxPooling2D layer 120, 122,\nrecurrent evaluating models of 97–100 127\nin Keras 198–202 choosing evaluation mean_squared_error 73\nstacking 217–219 protocols 100 memorization capacity 104\nunfreezing 154 test sets 97–100 metrics 29\nweight sharing 246–247 training sets 97–100 metrics, logging 249\nlayer-wis"}
{"text": "e pretraining 22 validation sets 97–100 Microsoft Cognitive Toolkit.\nLeakyReLU layer 308 feature engineering 101–103 See CNTK\nLeCun, Yann 15, 17 feature learning 101–103 Mikolov, Tomas 188\nLicensed to <null>\n358 INDEX\nmini-batch 96 MSE (mean squared error) 77, vector data 35\nmini-batch SGD (mini-batch 87, 91, 241, 320 vectors (1D tensors) 31\nstochastic gradient multiclass classifications 78–84 video data 37\ndescent) 49 multihead networks 59 gradient-based optimization\nMinsky, Marvin 12 multi-inp"}
{"text": "ut models 238–240 46–52\nMNIST dataset 27, 68 multilabel classification 78, 96, backpropagation\nmodel checkpointing 249 320 algorithm 51–52\nModel class 162 multimodal inputs 234 derivatives 47–48\nmodel depth 8 multi-output models 240–242 gradients 48\nmodel plot 258 stochastic gradient\nmodel.fit() function 249 N descent 48–51\nmodel.fit_generator() function Keras 61–64\n249 CNTK 62\nN classes 84\nModelCheckpoint callbacks developing with 62–64\nNaive Bayes algorithm 14\n250 TensorFlow 62\nnaive_add 39\nmo"}
{"text": "dels Theano 62\nNational Institute of Standards\narchitecture patterns multiclass classifications\nand Technology.\n260–263 78–84\nSee NIST\nbatch normalization regression 85–91\nndim attribute 31\n260–261 setting up workstations\nNervana Systems 22\ndepthwise separable 65–67\nneural layers 22\nconvolution 261–263 GPUs for deep learning\nneural networks\nresidual connections 66–67\nanatomy of 58–60\n235–236, 244–246 Jupyter notebooks 65\nlayers 58–59\nas layers 247–248 running jobs in cloud 66\nloss functions 60\na"}
{"text": "s programs 330–332 running Keras 66\nmodels 59–60\ndefining 191 tensor operations 38–45\noptimizers 60\ndeveloping broadcasting 39–40\nachieving statistical power binary classifications 68–77 dot 40–42\n113–114 breakthroughs in 17 element-wise 38–39\ndetermining capacity 114 data preprocessing for geometric interpretation\nensembling 264–266 101–102 of 43–44\nevaluating 192–195 handling missing values geometric interpretation\nhyperparameter optimization 102 of deep learning 44–45\n263–264 value normalizat"}
{"text": "ion reshaping 42–43\nlanguage 101–102 neural style transfer 287–295\nsampling from 276–278 vectorization 101 content loss 288\ntraining 276–278 data representations for in Keras 289–295\nloading GloVe embeddings 31–37 style loss 288–289\nin 191 3D tensors 32 N-grams 180\nmachine learning, risk of data batches 34–35 NIST (National Institute of\nanthropomorphizing 3 examples of data tensors Standards and\n25–327 35 Technology) 27\nmulti-input 238–240 higher-dimensional non-linearity function 72\nmulti-outpu"}
{"text": "t 240–242 tensors 32 non-machine learning,\nregularizing 114–115 image data 36–37 baselines 212–213\ntraining 192–195 key attributes of tensors nonstationary problems 111\nusing Keras callbacks 32–33 normalizing batches 260–261\n249–259 manipulating tensors in normalizing values 101–102\nusing TensorBoard 249–259 Numpy 34 Numpy arrays 28, 31\nmodular subroutines, reusing matrices (2D tensors) Numpy library, manipulating\n333–335 31–32 tensors in 34\nmodules, inception 242–244 scalars (0D tensors) 31 Num"}
{"text": "py matrix 31\nmomentum 50 sequence data 35–36 Numpy tensors 53\nMoore’s law 21, 317 timeseries data 35–36 NVIDIA 20, 66\nLicensed to <null>\nINDEX 359\nO overview 135–138 recurrent neural networks\nembeddings 190–191 196–224, 319, 321–322\nobject detection 94 pretrained convnets 143–159 basic machine-learning\nobjective function 10, 60 feature extraction 143–152 approach 213–215\nOccam’s razor principle 107 with data augmentation bidirectional 219–222\noctaves 281–282 combining with\n149–152\none-hot encodi"}
{"text": "ng convnets 228–231\nwithout data augmentation\nof characters 181–183 first recurrent baseline\n147–149\nof words 181–183 215–216\nfine-tuning 152–158\noverview 79, 84, 101 generative, history of 271\nwith small datasets 159\nonline documentation, Keras GRU layers 202–204\n338 pretrained networks 130, 143 LSTM layers 202–204\noptimization 22, 50, 104, 113, pretrained word embeddings non-machine-learning\n263–264 184 baselines 212–213\noptimizer argument 11, 29, 58, probabilistic modeling 14 preparing data f"}
{"text": "or 210–212\n73 probability distribution 80 recurrent layers in Keras\noptimizers 60 problems, defining 111–112 198–202\noutput processing sequences with stacking recurrent layers\nclasses 77 convnets 225–231 217–219\noverview 95 1D convolution for sequence using recurrent dropout to\ntensor 237 data 225–226 fight overfitting\noverfitting 1D pooling for sequence data 216–217\nadding dropout 109–110 ReduceLROnPlateau callbacks\n226\nadding weight regularization 250–251\ncombining with recurrent\n107–108 regre"}
{"text": "ssion 60, 85–91, 320\nreducing network size neural networks to pro-\nregularization loss function\n104–107 cess long sequences\n300\nusing recurrent dropout to 228–231\nregularizing models 114–115\nfight 216–217 implementing 1D convnets\nreinforcement learning 95–96\n226–227\nrelu (rectified linear unit) 71\nP program subroutines 334 representations\nprogram synthesis 331 extracting 28\npadding 125–126 PyCharm 65 overview 6\nparameterized layers 10 pydot library 257 reshaping tensors 42–43\nparameters pydot-ng"}
{"text": " 341 residual connections 235\nadjusting 249 Python response map 124\noverview 97 installing scientific suite on return_sequences argument\npartitions 99 Ubuntu 341 198\npasswd() command 349 overview 19 reusability 23\nPCA (principal component python-pip package 341 reverse-mode differentiation\nanalysis) 255 52\nPichai, Sundar 22\nRGB (red-green-blue) format 6\npip 350 Q\nRMSProp optimizer 53, 73, 77,\nplot_model 258\n135, 155, 222\nplotting code 156 question-answering model 238\nRNN (recurrent neural\npointw"}
{"text": "ise convolutions 243\nnetwork) 196\npooling 1D, for sequence data R rotation_range 139\n226\npredict method 76, 83, 147\nrandom forests 16–17 S\nprediction error 95–96\nrandomly shuffle data 100\npredictions 83\npreparing data 112–113 randomness 272 samples axis 34\npreprocessing rank 31 samples dimension 34\ndata 101–103, 135–138 recurrent dropout 207, 216 sampling\nfor neural networks recurrent layers, bidirectional from language models\n101–102 207 276–278\nLicensed to <null>\n360 INDEX\nsampling (continued)"}
{"text": " softmax 28, 80, 84, 273, 320 reshaping 42\nfrom latent spaces of images sound data 319 slicing 34\n296–297 sparse_categorical_crossentropy See also data tensors\nstrategies 272–274 83–84 test sets 97–100\nSanity Preserver, arXiv 338 spatially hierarchical patterns hold-out validation 98–99\nscalar regression 86, 96 123 iterated K-fold validation\nscalar tensor 31 speech recognition 11 with shuffling 100\nscalars (0D tensors) 31 ssl directory 348 K-fold validation 99\nschematic implementation, of stacki"}
{"text": "ng recurrent layers text data 180–195, 319\nGAN 307 217–219 downloading raw text\nSchmidhuber, Jürgen 202 statistical power, developing 188–195\nScikit-Learn 63 models with 113–114 one-hot encoding of words\nSciPy 284, 341 steps_per_epoch 136 and characters\nself-supervised learning 94–95 stochastic gradient descent. 181–183\nselu function 261 See SGD word embeddings 184–195\nSeparableConv2D layer 261, stochastic sampling 272 defining models 191\n321 stochasticity 272, 308 downloading GloVe word\nseparat"}
{"text": "ion hyperplane 15 strided convolutions 127 embeddings 190\nsequence data strides 125 learning with embedding\ngenerating 272 style function 288 layers 185–187\noverview 35–36 style loss 288–289 loading GloVe embeddings\nsequence generation 94 subroutines, reusing modular in models 191\nsequence prediction 60 333–335 preprocessing 190–191\nsequences, processing with supervised learning 94 pretrained 188\nconvnets 225–231 SVM (support vector machine) tokenizing data 189–190\n1D convolution for sequence 15"}
{"text": " training and evaluating\ndata 225–226 symbolic AI 4, 12 models 192–195\n1D pooling for sequence symbolic differentiation 52 text, generating with LSTM\ndata 226 syntax tree prediction 94 271–279\ncombining with recurrent Szegedy, Christian 235 generating sequence data\nneural networks 272\n228–231 T history of generative recur-\nimplementing 1D convnets rent networks 271\n226–227 tanh activation 77 implementing character-level\nSequential class 63, 248 target 95 text generation 274–279\nSequential model "}
{"text": "150, 234 temporal leak 100 sampling strategy 272–274\nSGD (stochastic gradient temporally supervised learning text-to-speech conversion 12\ndescent) 48–51, 60 95 Theano\nshallow learning 8 TensorBoard applications 233, installing on Ubuntu 343\nshared LSTM 247 249–259 overview 23, 62\nshear_range 139 TensorFlow visualization timeseries data 35–36, 319\nshow_shapes option 258 framework 252–258 timesteps 210\nshuffling, iterated K-fold valida- tensors TITAN X, NVIDIA 21\ntion with 100 higher-dimensional 3"}
{"text": "2 token embedding 180\nSiamese LSTM model 247 key attributes of 32–33 tokenizing data, word\nsigmoid function 71, 86, 320 manipulating in Numpy 34 embeddings 189–190\nSimonyan, Karen 143 operations of 38–45 total variation loss 291\nSimpleRNN layer 198, 322 broadcasting 39–40 TPU (tensor processing unit)\nsingle-label dot 40–42 21\ncategorical classification 320 element-wise 38–39 trainable attribute 150\nmulticlass classification 78 geometric interpretation training\nsliding windows 124 of 43–44 convne"}
{"text": "ts on small datasets\nSmart Reply feature, Google geometric interpretation 130–142\n271 of deep learning 44–45 building networks\nsmile vector 297 reshaping 42–43 133–135\nLicensed to <null>\nINDEX 361\ntraining, convnets on small editing 297–298 word embeddings 184–195\ndatasets (continued) sampling from latent spaces defining models 191\ndata preprocessing of images 296–297 downloading GloVe word\n135–138 validation scores 100 embeddings 190\ndownloading data validation sets 97–100 evaluating models 192"}
{"text": "–195\n131–133 hold-out validation 98–99 learning embedding layers\nrelevance for small-data iterated K-fold validation 185–187\nproblems 130–131 with shuffling 100 loading GloVe embeddings\nusing data augmentation K-fold validation 99 in models 191\n138–142 overfitting 97 preprocessing embeddings\ninterrupting 249 overview 73 190–191\nlanguage models 276–278 validation_data argument 74, tokenizing data 189–190\nmodels 192–195 137 training models 192–195\ntraining loop 11, 46 validation_steps argument 137"}
{"text": " using pretrained word\ntraining sets 97–100 values embeddings 188\nhold-out validation 98–99 handling missing 102 word vectors 184\niterated K-fold validation normalizing 101–102 Word2vec algorithm 188\nwith shuffling 100 vanishing gradient problem word-embedding space 185\nK-fold validation 99 202 word_index 69\ntrain_labels variable 27, 68 Vapnik, Vladimir 15 workflow of machine learning\ntranslation-invariant patterns vector data 35, 319 111–115, 318–319\n123, 321 vector regression 96 assembling dat"}
{"text": "asets 111–112\ntransposition 43 vectorization 101 choosing evaluation protocol\nTuring test 5 vectorized data 69 112\nTuring, Alan 5 vectorized implementations 38 choosing measure of success\ntwo-branch networks 59 vectorizing text 180 112\nTyka, Mike 280, 306 vectors (1D tensors) 31 defining problems 111–112\nversatility 23 developing models 113–114\nvi 350 preparing data 112–113\nU\nvideo data 37, 319 regularizing models 114–115\nvisual concepts 160 tuning hyperparameters\nUbuntu visualizing 114–115\ninst"}
{"text": "alling Keras on 343–344 convnet filters 167–172 workflows 18\ninstalling Python scientific convnet learning 160–176 workstations, setting up 65–67\nsuite on 341 heatmaps of class activation Jupyter notebooks 65\ninstalling Theano on 343 172–176 running jobs in cloud 66\nsetting up GPU support intermediate activations running Keras 66\n342–343 160–166\nselecting GPUs 66–67\nunderfitting 104–110 volumetric data 319\nwriting callbacks 251–252\nadding dropout 109–110\nadding weight regularization W\nX\n107–108\n"}
{"text": "reducing network size\nweight decay 107\n104–107 Xception 244, 248\nweight regularization,\nunfreezing layers 154 XGBoost library 19, 337\nadding 107–108\nUnix workstation 65\nweight sharing of layers\nunsupervised learning 94 Y\n246–247\nweight-initialization schemes\nV 22 yield operator 136\nweights argument, VGG16 58,\nVAEs (variational autoencod- 145 Z\ners), generating images weights, layers 10\nwith 296–304 Welling, Max 298 Zisserman, Andrew 143\nconcept vectors for image width_shift range 139 zoom_range "}
{"text": "139\nLicensed to <null>\nRELATED MANNING TITLES\nMachine Learning with TensorFlow\nbyNishantShukla\nISBN:9781617293870\n325pages,$44.99\nDecember2017\nThe Quick Python Book, Third Edition\nbyNaomiCeder\nISBN:9781617294037\n400pages,$39.99\nDecember2017\nR in Action, Second Edition\nData analysis and graphics with R\nbyRobertI.Kabacoff\nISBN:9781617291388\n608pages,$59.99\nMay2015\nPractical Data Science with R\nbyNinaZumelandJohnMount\nISBN:9781617291562\n416pages,$49.99\nMarch2014\nFor ordering information go to www.m"}
{"text": "anning.com\nLicensed to <null>\nPYTHON/MACHINE LEARNING\nDeep Learning with Python\nFrançois Chollet SEE INSERT\nMachine learning has made remarkable progress in recent\nyears. We went from near-unusable speech and image\nrecognition, to near-human accuracy. We went from\n“The clearest explanation\nmachines that couldn’t beat a serious Go player, to defeating\nof deep learning I have come\na world champion. Behind this progress is deep learning—\nacross ... it was a joy to read.”\na combination of engineerin"}
{"text": "g advances, best practices, and\ntheory that enables a wealth of previously impossible smart —Richard Tobias, Cephasonics\napplications.\n“An excellent hands-on\nDeep Learning with Python introduces the fi eld of deep learn-\nintroductory title, with\ning using the Python language and the powerful Keras library.\ngreat depth and breadth.”\nWritten by Keras creator and Google AI researcher François\nChollet, this book builds your understanding through intuitive —David Blumenthal-Barby\nexplanations and pra"}
{"text": "ctical examples. You’ll explore challenging Babbel\nconcepts and practice with applications in computer vision,\nnatural-language processing, and generative models. By the “Bridges the gap between\ntime you fi nish, you’ll have the knowledge and hands-on skills the hype and a functioning\nto apply deep learning in your own projects. deep-learning system.”\n—Peter Rabinovitch, Akamai\nWhat’s Inside\n● Deep learning from fi rst principles “The best resource for\n● Setting up your own deep-learning environ"}
{"text": "ment becoming a master of\n● Image-classifi cation models Keras and deep learning.”\n● Deep learning for text and sequences —Claudio Rodriguez\n● Neural style transfer, text generation, and image generation Cox Media Group\nReaders need intermediate Python skills. No previous experi-\nence with Keras, TensorFlow, or machine learning is required.\nFrançois Chollet is an AI researcher on the Google Brain Team\nand author of the Keras deep-learning library.\nTo download their free eBook in PDF, ePub, and K"}
{"text": "indle formats,\nowners of this book should visit\nwww.manning.com/books/deep-learning-with-python\nM A N N I N G $49.99 / Can $65.99 [INCLUDING eBOOK]\n"}
